#+TITLE:     Org Mode
#+AUTHOR:    Carsten Dominik
#+EMAIL:     tsd@tsdye.com
#+DATE:      2012-11-10 Sat
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+TEXINFO_HEADER: @c
#+TEXINFO_HEADER: @c Added by tsd [2012-11-11 Sun]
#+TEXINFO_HEADER: @documentencoding UTF-8
#+TEXINFO_HEADER: @c
#+TEXINFO_HEADER: @include org-version.inc
#+TEXINFO_HEADER: @c
#+TEXINFO_HEADER: @c Use proper quote and backtick for code sections in PDF output
#+TEXINFO_HEADER: @c Cf. Texinfo manual 14.2
#+TEXINFO_HEADER: @set txicodequoteundirected
#+TEXINFO_HEADER: @set txicodequotebacktick
#+TEXINFO_HEADER: @c
#+TEXINFO_HEADER: @c Version and Contact Info
#+TEXINFO_HEADER: @set MAINTAINERSITE @uref{http://orgmode.org,maintainers webpage}
#+TEXINFO_HEADER: @set MAINTAINER Carsten Dominik
#+TEXINFO_HEADER: @set MAINTAINEREMAIL @email{carsten at orgmode dot org}
#+TEXINFO_HEADER: @set MAINTAINERCONTACT @uref{mailto:carsten at orgmode dot org,contact the maintainer}
#+SUBTITLE: Release @value{VERSION}
#+SUBAUTHOR:  with contributions by David O'Toole, Bastien Guerry, Philip Rooke, Dan Davison, Eric Schulte, Thomas Dye and Jambunathan K.
#+TEXINFO_DIR_CATEGORY: Emacs editing modes
#+TEXINFO_DIR_TITLE: Org Mode: (org)
#+TEXINFO_DIR_DESC: Outline-based notes management and organizer

#+TODO: FIXME | FIXED

# # Macros for simplifying export

# Indexing macros.  index is generic, the rest are for the specific
# default indexes.
#+MACRO: index @@info:@$1index $2@@
#+MACRO: cindex {{{index(c,$1)}}}
#+MACRO: pindex {{{index(p,$1)}}}
#+MACRO: findex {{{index(f,$1)}}}
#+MACRO: vindex {{{index(v,$1)}}}
#+MACRO: kindex {{{index(k,$1)}}}

# Markup macros.  In texinfo export they will be marked up, otherwise
# they will be inserted verbatim.  markup is the generic form that can
# be used to insert any @-command with the second variable being the
# text to mark up.
#+MACRO: markup @@info:@$1{@@$2@@info:}@@
#+MACRO: kbd {{{markup(kbd,$1)}}}
#+MACRO: key {{{markup(key,$1)}}}
#+MACRO: kbdkey {{{kbd($1{{{key($2)}}})}}}
#+MACRO: samp {{{markup(samp,$1)}}}
#+MACRO: command {{{markup(command,$1)}}}
#+MACRO: file {{{markup(file,$1)}}}

#+MACRO: noindent @@info:@noindent@@

* Introduction
  :PROPERTIES:
  :TITLE: Introduction
  :DESCRIPTION: Getting started
  :END:
{{{cindex(introduction)}}}

** Summary
   :PROPERTIES:
   :DESCRIPTION: Brief summary of what Org-mode does
   :END:
{{{cindex(summary)}}}

Org is a mode for keeping notes, maintaining TODO lists, and doing
project planning with a fast and effective plain-text system.

Org develops organizational tasks around NOTES files that contain
lists or information about projects as plain text. Org is implemented
on top of Outline mode, which makes it possible to keep the content of
large files well structured. Visibility cycling and structure editing
help to work with the tree. Tables are easily created with a built-in
table editor. Org supports TODO items, deadlines, timestamps, and
scheduling. It dynamically compiles entries into an agenda that
utilizes and smoothly integrates much of the Emacs calendar and diary.
Plain text URL-like links connect to websites, emails, Usenet
messages, BBDB entries, and any files related to the projects. For
printing and sharing of notes, an Org file can be exported as a
structured ASCII file, as HTML, or as an iCalendar file.[fn:4] It can
also serve as a publishing tool for a set of linked web pages.

As a project planning environment, Org works by adding metadata to outline
nodes.  Based on this data, specific entries can be extracted in queries and
create dynamic /agenda views/.

Org mode contains the Org Babel environment which allows you to work with
embedded source code blocks in a file, to facilitate code evaluation,
documentation, and literate programming techniques.

Org's automatic, context-sensitive table editor with spreadsheet
capabilities can be integrated into any major mode by activating the
minor Orgtbl mode.  Using a translation step, it can be used to maintain
tables in arbitrary file types, for example in LaTeX.  The structure
editing and list creation capabilities can be used outside Org with
the minor Orgstruct mode.

Org keeps simple things simple.  When first fired up, it should
feel like a straightforward, easy to use outliner.  Complexity is not
imposed, but a large amount of functionality is available when you need
it.  Org is a toolbox and can be used in different ways and for different
ends, for example:

  - an outline extension with visibility cycling and structure editing
  - an ASCII system and table editor for taking structured notes
  - a TODO list editor
  - a full agenda and planner with deadlines and work scheduling
    {{{pindex(GTD\, Getting Things Done)}}}
  - an environment in which to implement David Allen's GTD system
  - a simple hypertext system, with HTML and LaTeX export
  - a publishing tool to create a set of interlinked web pages
  - an environment for literate programming

{{{cindex(FAQ)}}}
There is a [[http://orgmode.org][website for Org]] that provides links to the newest
version of Org, as well as additional information, frequently asked
questions (FAQ), links to tutorials, etc.

{{{cindex(print edition)}}} 
Version 7.3 of this manual is available
as a [[http://www.network-theory.co.uk/org/manual/][paperback book from Network Theory Ltd.]].

@@info:@page@@

** Installation
   :PROPERTIES:
   :DESCRIPTION: How to install a downloaded version of Org-mode
   :END:

{{{cindex(installation)}}}
{{{cindex(XEmacs)}}}

*Important:* If you have the version of Org that comes with Emacs or
as a XEmacs package, please skip this section and go directly to
[[Activation]]. If you downloaded Org as an ELPA package, please read the
instructions on the [[http://orgmode.org/elpa.html][Org ELPA page]]. To see what version of Org (if any)
is part of your Emacs distribution, type {{{kbd(M-x
org-version)}}}.[fn:2]

Installation of Org mode uses a build system, which is described in more
detail on [[http://orgmode.org/worg/dev/org-build-system.html][Worg]].

If you have downloaded Org from the Web as a distribution {{{file(.zip)}}} or
{{{file(.tar.gz)}}} archive, take the following steps to install it:

  - Unpack the distribution archive.
  - Change into (~cd~) the Org directory.
  - Run ~make help config~ and then check and edit the file
    {{{file(local.mk)}}} if the default configuration does not match
    your system. Set the name of the Emacs binary (likely either
    {{{file(emacs)}}} or {{{file(xemacs)}}}), and the paths to the
    directories where local Lisp and Info files will be installed. If
    the Emacs binary is not in your path, give the full path to the
    executable. Avoid spaces in any path names.
  - Run ~make config~ again to check the configuration.
  - Run ~make install~ or ~sudo make install~ to build and install Org
    mode on your system.

If you use a cloned Git repository, then the procedure is slightly
different. The following description assumes that you are using the
~master~ branch.[fn:3] You could also use the ~maint~ branch instead,
where the release versions are published, just replace ~master~ with
~maint~ in the description below.


  - Change into (~cd~) the Org repository.
  - Run ~git checkout master~ to switch to the ~master~ branch of the
    Org repository.
  - Run ~make help~ and then check and edit the file
    {{{file(local.mk)}}}. You must set the name of the Emacs binary
    (likely either {{{file(emacs)}}} or {{{file(xemacs)}}}), and the
    paths to the directories where local Lisp and Info files will be
    installed. If the Emacs binary is not in your path, you must give
    the full path to the executable. Avoid spaces in any path names.
  - Run ~make config~ to check the configuration.
  - Optionally run ~make test~ to build Org mode and then run the full
    test suite.
  - Run ~make update2~ or ~make up2~ to update the Git repository and
    build and install Org mode. The latter invocation runs the
    complete test suite before installation and installs only if the
    build passes all tests.


If you don't have access to the system-wide directories and you don't
want to install somewhere into your home directory, you can run Org
directly from the distribution directory or Org repository by
compiling Org mode in place:


  - Change into (~cd~) the Org repository.
  - Run ~git checkout master~ to switch to the ~master~ branch of the
    Org repository.
  - Run ~make compile~


Last but not least you can also run Org mode directly from an Org repository
without any compilation.  Simply replace the last step in the recipe above
with ~make uncompiled~.

Then add the following line to {{{file(.emacs)}}}:

#+header: :exports code
#+begin_src emacs-lisp
(add-to-list 'load-path "~/path/to/orgdir/lisp")
#+end_src

{{{noindent}}}
If you plan to use code from the {{{file(contrib)}}} subdirectory without
compiling them, do a similar step for this directory:

#+header: :exports code
#+begin_src emacs-lisp
(add-to-list 'load-path "~/path/to/orgdir/contrib/lisp" t)
#+end_src

If you want to include those files with the build and install, please
customize the variable ~ORG_ADD_CONTRIB~ instead in your
~local.mk~ file, for more details please see this
[[http://orgmode.org/worg/dev/org-build-system.html#sec-4-1-2][description on Worg]].

Installing Info files is system dependent, because of differences in
the {{{file(install-info)}}} program. The Info documentation is
installed together with the rest of Org mode. If you don't install Org
mode, it is possible to install the Info documentation separately if you
have install-info on your system.[fn:1]  The command to do this is:

#+begin_src example
make install-info
#+end_src

Do not forget to activate Org as described in the following section.
@@info:@page@@

** Activation
   :PROPERTIES:
   :DESCRIPTION: How to activate Org-mode for certain buffers
   :END:
{{{cindex(activation)}}}
{{{cindex(autoload)}}}
{{{cindex(ELPA)}}}
{{{cindex(global key bindings)}}}
{{{cindex(key bindings\, global)}}}
{{{findex(org-agenda)}}}
{{{findex(org-capture)}}}
{{{findex(org-store-link)}}}
{{{findex(org-iswitchb)}}}

Since Emacs 22.2, files with the {{{file(.org)}}} extension use Org mode by
default.  If you are using an earlier version of Emacs, add this line to your
{{{file(.emacs)}}} file:

#+header: :exports code
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
#+end_src

Org mode buffers need font-lock to be turned on - this is the default in
Emacs.[fn:5]

There are compatibility issues between Org mode and some other Elisp
packages, please take the time to check the list (see [[Conflicts]]).

The four Org commands {{{command(org-store-link)}}},
{{{command(org-capture)}}}, {{{command(org-agenda)}}}, and
{{{command(org-iswitchb)}}} should be accessible through global keys
(i.e., anywhere in Emacs, not just in Org buffers).  Here are
suggested bindings for these keys, please modify the keys to your own
liking.

#+header: :exports code
#+begin_src emacs-lisp
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
#+end_src

{{{cindex(Org mode\, turning on)}}} 
With this setup, all files with extension {{samp(.org)}}} will be put
into Org mode.  As an alternative, make the first line of a file look
like this:

#+begin_src example
MY PROJECTS    -*- mode: org; -*-
#+end_src

{{{vindex(org-insert-mode-line-in-empty-file)}}} 
{{{noindent}}}
which will select Org mode for this buffer no matter what the file's
name is. See also the variable
~org-insert-mode-line-in-empty-file~.

Many commands in Org work on the region if the region is /active/. To
make use of this, you need to have ~transient-mark-mode~
(~zmacs-regions~ in XEmacs) turned on. In Emacs 23 this is the
default, in Emacs 22 you need to do this yourself with

#+header: :exports code
#+begin_src emacs-lisp
(transient-mark-mode 1)
#+end_src

{{{noindent}}} If you do not like ~transient-mark-mode~, you can
create an active region by using the mouse to select a region, or
pressing {{{kbdkey(C-,SPC)}}} twice before moving the cursor.

** Feedback
   :PROPERTIES:
   :DESCRIPTION: Bug reports, ideas, patches, etc.
   :END:
{{{cindex(feedback)}}}
{{{cindex(bug reports)}}}
{{{cindex(maintainer)}}}
{{{cindex(author)}}}

If you find problems with Org, or if you have questions, remarks, or
ideas about it, please mail to the Org mailing list
[[mailto:emacs-orgmode@gnu.org]]. If you are not a member of
the mailing list, your mail will be passed to the list after a
moderator has approved it.[fn:6]

For bug reports, please first try to reproduce the bug with the latest
version of Org available---if you are running an outdated version, it is
quite possible that the bug has been fixed already.  If the bug persists,
prepare a report and provide as much information as possible, including the
version information of Emacs ({{{kbdkey(M-x emacs-version ,RET)}}}) and Org
({{{kbdkey(M-x org-version ,RET)}}}), as well as the Org related setup in
{{{file(.emacs)}}}.  The easiest way to do this is to use the command

#+begin_src example
@kbd{M-x org-submit-bug-report}
#+end_src

{{{noindent}}} which will put all this information into an Emacs
mail buffer so that you only need to add your description. If you are
not sending the Email from within Emacs, please copy and paste the
content into your Email program.

Sometimes you might face a problem due to an error in your Emacs or Org mode
setup.  Before reporting a bug, it is very helpful to start Emacs with minimal
customizations and reproduce the problem.  Doing so often helps you determine
if the problem is with your customization or with Org mode itself.  You can
start a typical minimal session with a command like the example below.

#+begin_src example
$ emacs -Q -l /path/to/minimal-org.el
#+end_src

However if you are using Org mode distributed with Emacs, a minimal
setup is not necessary. In that case it is sufficient to start Emacs
as ~emacs -Q~. The ~minimal-org.el~ setup
file can have contents as shown below.

#+header: :exports code
#+begin_src emacs-lisp
;;; Minimal setup to load latest `org-mode'

;; activate debugging
(setq debug-on-error t
      debug-on-signal nil
      debug-on-quit nil)

;; add latest org-mode to load path
(add-to-list 'load-path (expand-file-name "/path/to/org-mode/lisp"))
(add-to-list 'load-path (expand-file-name "/path/to/org-mode/contrib/lisp" t))
#+end_src

If an error occurs, a backtrace can be very useful (see below on how to
create one).  Often a small example file helps, along with clear information
about:

  1. What exactly did you do?
  2. What did you expect to happen?
  3. What happened instead?

{{{noindent}}} Thank you for helping to improve this program.

*** How to create a useful backtrace
{{{cindex(backtrace of an error)}}}

If working with Org produces an error with a message you don't
understand, you may have hit a bug.  The best way to report this is by
providing, in addition to what was mentioned above, a /backtrace/.
This is information from the built-in debugger about where and how the
error occurred.  Here is how to produce a useful backtrace:

  1. Reload uncompiled versions of all Org mode Lisp files.  The
     backtrace contains much more information if it is produced with
     uncompiled code. To do this, use {{{kbdkey(C-u M-x org-reload ,
     RET)}}} or select ~Org -> Refresh/Reload -> Reload Org
     uncompiled~ from the menu.

  2. Go to the ~Options~ menu and select ~Enter Debugger on Error~
     (XEmacs has this option in the ~Troubleshooting~ sub-menu).

  3. Do whatever you have to do to hit the error. Don't forget to
     document the steps you take.

  4. When you hit the error, a {{{file(*Backtrace*)}}} buffer will
     appear on the screen.  Save this buffer to a file (for example
     using {{{kbd(C-x C-w)}}}) and attach it to your bug report.

** Conventions
   :PROPERTIES:
   :DESCRIPTION: Typesetting conventions in the manual
   :END:

*** TODO keywords, tags, properties, etc.

Org mainly uses three types of keywords: TODO keywords, tags and property
names.  In this manual we use the following conventions:


  - TODO, WAITING :: TODO keywords are written with all capitals, even if they
    are user-defined.
  - boss, ARCHIVE :: User-defined tags are written in lowercase; built-in
               tags with special meaning are written with all capitals.
  - Release, PRIORITY :: User-defined properties are capitalized; built-in
                properties with special meaning are written with all capitals.

Moreover, Org uses /option keywords/ (like ~#+TITLE~ to set the title)
and /environment keywords/ (like ~#+BEGIN_HTML~ to start a ~HTML~
environment). They are written in uppercase in the manual to enhance
its readability, but you can use lowercase in your Org files.[fn:7]

*** Keybindings and commands
{{{kindex(C-c a)}}}
{{{findex(org-agenda)}}}
{{{kindex(C-c c)}}}
{{{findex(org-capture)}}}

The manual suggests two global keybindings: {{{kbd(C-c a)}}} for
~org-agenda~ and {{{kbd(C-c c)}}} for ~org-capture~. These are only
suggestions, but the rest of the manual assumes that you are using
these keybindings.

Also, the manual lists both the keys and the corresponding commands
for accessing a functionality. Org mode often uses the same key for
different functions, depending on context. The command that is bound
to such keys has a generic name, like ~org-metaright~.  In the manual
we will, wherever possible, give the function that is internally
called by the generic command. For example, in the chapter on document
structure, {{{kbdkey(M-,right)}}} will be listed to call
~org-do-demote~, while in the chapter on tables, it will be listed to
call ~org-table-move-column-right~. If you prefer, you can compile the
manual without the command names by unsetting the flag ~cmdnames~ in
{{{file(org.texi)}}}.

* Document structure
  :PROPERTIES:
  :DESCRIPTION: A tree works like your brain
  :TEXINFO_MENU_TITLE: Document Structure
  :END:
{{{cindex(document structure)}}}
{{{cindex(structure of document)}}}

Org is based on Outline mode and provides flexible commands to
edit the structure of the document.

** Outlines
   :PROPERTIES:
   :DESCRIPTION: Org mode is based on Outline mode
   :END:
{{{cindex(outlines)}}}
{{{cindex(Outline mode)}}}

Org is implemented on top of Outline mode. Outlines allow a document
to be organized in a hierarchical structure, which (at least for me)
is the best representation of notes and thoughts. An overview of this
structure is achieved by folding (hiding) large parts of the document
to show only the general document structure and the parts currently
being worked on. Org greatly simplifies the use of outlines by
compressing the entire show/hide functionality into a single command,
{{{command(org-cycle)}}}, which is bound to the {{{key(TAB)}}} key.

** Headlines
   :PROPERTIES:
   :DESCRIPTION: How to typeset Org tree headlines
   :END:
{{{cindex(headlines)}}}
{{{cindex(outline tree)}}}
{{{vindex(org-special-ctrl-a/e)}}}
{{{vindex(org-special-ctrl-k)}}}
{{{vindex(org-ctrl-k-protect-subtree)}}}

Headlines define the structure of an outline tree.  The headlines in Org
start with one or more stars, on the left margin.[fn:8]  For example:
#+begin_src org
  ,* Top level headline
  ,** Second level
  ,*** Third level
      some text
  ,*** Third level
      more text
  ,* Another top level headline
#+end_src

{{{noindent}}} Some people find the many stars too noisy and would
prefer an outline that has whitespace followed by a single star as
headline starters. [[Clean view]], describes a setup to realize this.

{{{vindex(org-cycle-separator-lines)}}}
An empty line after the end of a subtree is considered part of it and
will be hidden when the subtree is folded.  However, if you leave at
least two empty lines, one empty line will remain visible after folding
the subtree, in order to structure the collapsed view.  See the
variable ~org-cycle-separator-lines~ to modify this behavior.

** Visibility cycling
   :PROPERTIES:
   :DESCRIPTION: Show and hide, much simplified
   :TEXINFO_MENU_TITLE: Visibility cycling
   :END:
{{{cindex(cycling\, visibility)}}}
{{{cindex(visibility cycling)}}}
{{{cindex(trees\, visibility)}}}
{{{cindex(show hidden text)}}}
{{{cindex(hide text)}}}

Outlines make it possible to hide parts of the text in the buffer.
Org uses just two commands, bound to {{{key(TAB)}}} and
{{{kbdkey(S-,TAB)}}} to change the visibility in the buffer.

{{{cindex(subtree visibility states)}}}
{{{cindex(subtree cycling)}}}
{{{cindex(folded\, subtree visibility state)}}}
{{{cindex(children\, subtree visibility state)}}}
{{{cindex(subtree\, subtree visibility state)}}}

#+attr_texinfo: :indic "@asis"
- {{{key(TAB)}}} ~org-cycle~ :: Subtrees can be cycled through three
     states:
 
     {{{kindex(TAB)}}}
     {{{findex(org-cycle)}}}
     
     #+begin_src example
       ,-> FOLDED -> CHILDREN -> SUBTREE --.
       '-----------------------------------'
     #+end_src

     {{{vindex(org-cycle-emulate-tab )}}}
     {{{vindex(org-cycle-global-at-bob )}}}

     By default, the cursor must be on a headline for this to work,
     but this behavior can be modified with the
     ~org-cycle-emulate-tab~ option. When the cursor is at the
     beginning of the buffer and the first line is not a headline,
     then {{{key(TAB)}}} actually runs global cycling (see below)[fn:9]. Also,
     when called with a prefix argument ({{{kbdkey(C-u ,TAB)}}}),
     global cycling is invoked.

- {{{kbdkey(S-,TAB)}}} ~org-global-cycle~ :: 
     @@info:@itemx@@ {{{kbdkey(C-u ,(TAB)}}}
     /Global Cycling/: Rotate the entire buffer among the states

     {{{cindex(global visibility states)}}}
     {{{cindex(global cycling)}}}
     {{{cindex(overview\, global visibility state)}}}
     {{{cindex(contents\, global visibility state)}}}
     {{{cindex(show all\, global visibility state)}}}
     {{{kindex(C-u TAB)}}}
     {{{kindex(S-TAB)}}}
     {{{findex(org-global-cycle)}}}

     #+begin_src example
       ,-> OVERVIEW -> CONTENTS -> SHOW ALL --.
       '--------------------------------------'
     #+end_src

     When {{{kbdkey(S-,TAB)}}} is called with a numeric prefix
     argument, ~N~, the CONTENTS view up to headlines of level N will
     be shown. Note that inside tables, {{{kbdkey(S-,TAB)}}} jumps
     to the previous field.

- {{{kbdkey(C-u C-u C-u ,TAB)}}} ~show-all~ :: Show all, including
     drawers.

     {{{kindex(C-u C-u C-u TAB)}}}
     {{{findex(show-all)}}}
     {{{cindex(show all\, command)}}}
- {{{kbd(C-c C-r)}}} ~org-reveal~ :: Reveal context around point,
     showing the current entry, the following heading and the
     hierarchy above.  Useful for working near a location that has
     been exposed by a sparse tree command (see [[Sparse trees]]) or an
     agenda command ([[see Agenda commands]]).  With a prefix argument
     show, on each level, all sibling headings.  With a double prefix
     argument, also show the entire subtree of the parent.

     {{{cindex(revealing context)}}}
     {{{kindex(C-c C-r)}}}
     {{{findex(org-reveal)}}}
- {{{kbd(C-c C-k)}}} ~show-branches~ :: Expose all the headings of
     the subtree, CONTENT view for just one subtree.

     {{{kindex(C-c C-k)}}}
     {{{findex(show-branches)}}}
     {{{cindex(show branches\, command)}}}
- {{{kbdkey(C-c ,TAB)}}} ~show-children~ :: Expose all direct
     children of the subtree.  With a numeric prefix argument, ~N~,
     expose all children down to level N.

     {{{kindex(C-c TAB)}}}
     {{{findex(show-children)}}}
     {{{cindex(show children\, command)}}}
- {{{kbd(C-c C-x b)}}} ~org-tree-to-indirect-buffer~ :: Show the
     current subtree in an indirect buffer.[fn:10] With a numeric
     prefix argument, ~N~, go up to level N and then take that tree.
     If N is negative then go up that many levels.  With a
     {{{kbd(C-u)}}} prefix, do not remove the previously used indirect
     buffer.

     {{{kindex(C-c C-x b)}}}
     {{{findex(org-tree-to-indirect-buffer)}}}
- {{{kbd(C-c C-x v)}}} ~org-copy-visible~ :: Copy the /visible/ text
     in the region into the kill ring.

{{{vindex(org-startup-folded)}}}
{{{cindex(~overview~\, STARTUP keyword)}}}
{{{cindex(~content~\, STARTUP keyword)}}}
{{{cindex(~showall~\, STARTUP keyword)}}}
{{{cindex(~showeverything~\, STARTUP keyword)}}}

When Emacs first visits an Org file, the global state is set to
OVERVIEW, i.e., only the top level headlines are visible.  This can be
configured through the variable ~org-startup-folded~, or on a
per-file basis by adding one of the following lines anywhere in the
buffer:

#+begin_src org 
  ,#+STARTUP: overview
  ,#+STARTUP: content
  ,#+STARTUP: showall
  ,#+STARTUP: showeverything
#+end_src

{{{cindex(property\, VISIBILITY)}}}

{{{noindent}}} Furthermore, any entries with a {{{samp(VISIBILITY)}}}
property (see [[Properties and Columns]]) will get their visibility
adapted accordingly.  Allowed values for this property are ~folded~,
~children~, ~content~, and ~all~.

#+attr_texinfo: :indic "@asis"
- {{{kbdkey(C-u C-u ,TAB)}}} ~org-set-startup-visibility~ :: Switch
     back to the startup visibility of the buffer, i.e.@: whatever is
     requested by startup options and {{{samp(VISIBILITY)}}}
     properties in individual entries.

** Motion
   :PROPERTIES:
   :DESCRIPTION: Jumping to other headlines
   :END:
{{{cindex(motion\, between headlines)}}}
{{{cindex(jumping\, to headlines)}}}
{{{cindex(headline navigation)}}}
The following commands jump to other headlines in the buffer.

#+attr_texinfo: :table-type "table" :indic "@asis"
  - {{{kbd(C-c C-n)}}} ~outline-next-visible-heading~ :: Next heading.
       {{{kindex(C-c C-n)}}}
       {{{findex(outline-next-visible-heading)}}}
  - {{{kbd(C-c C-p)}}} ~outline-previous-visible-heading~ :: Previous heading.
       {{{kindex(C-c C-p)}}}
       {{{findex(outline-previous-visible-heading)}}}
  - {{{kbd(C-c C-f)}}} ~org-forward-same-level~ :: Next heading same level.
       {{{kindex(C-c C-f)}}}
       {{{findex(org-forward-same-level)}}}
  - {{{kbd(C-c C-b)}}} ~org-backward-same-level~ :: Previous heading same level.
       {{{kindex(C-c C-b)}}}
       {{{findex(org-backward-same-level)}}}
  - {{{kbd(C-c C-u)}}} ~outline-up-heading~ :: Backward to higher level heading.
       {{{kindex(C-c C-u)}}}
       {{{findex(outline-up-heading)}}}
  - {{{kbd(C-c C-j)}}} ~org-goto~ :: Jump to a different place
       without changing the current outline visibility.  Shows the
       document structure in a temporary buffer, where you can use the following keys to find your destination:
       {{{kindex(C-c C-j)}}}
       {{{findex(org-goto)}}}
       {{{vindex(org-goto-auto-isearch)}}}
    - {{{key(TAB)}}} ::  Cycle visibility.
    - {{{key(down)}}} / {{{key(up)}}} ::   Next/previous visible headline.
    - {{{key(RET)}}} :: Select this location.
    - {{{kbd(/)}}} :: Do a Sparse-tree search
    - Note: The following keys work if you turn off ~org-goto-auto-isearch~
    - n / p ::  Next/previous visible headline.
    - f / b ::   Next/previous headline same level.
    - u  ::  One level up.
    - 0--9 ::  Digit argument.
    - q :: Quit.

{{{vindex(org-goto-interface)}}}
{{{noindent}}} See also the variable ~org-goto-interface~.

** Structure editing
   :PROPERTIES:
   :DESCRIPTION: Changing sequence and level of headlines
   :TEXINFO_MENU_TITLE: Structure editing
   :END:
{{{cindex(structure editing)}}}
{{{cindex(headline\, promotion and demotion)}}}
{{{cindex(promotion\, of subtrees)}}}
{{{cindex(demotion\, of subtrees)}}}
{{{cindex(subtree\, cut and paste)}}}
{{{cindex(pasting\, of subtrees)}}}
{{{cindex(cutting\, of subtrees)}}}
{{{cindex(copying\, of subtrees)}}}
{{{cindex(sorting\, of subtrees)}}}
{{{cindex(subtrees\, cut and paste)}}}

#+attr_texinfo: :table-type "table" :indic "@asis"
  - {{{kbdkey(M-,RET)}}} ~org-insert-heading~ :: Insert new heading
       with same level as current. If the cursor is in a plain list
       item, a new item is created (see [[Plain lists]]). To force
       creation of a new headline, use a prefix argument. When this
       command is used in the middle of a line, the line is split and
       the rest of the line becomes the new headline.[fn:11] If the
       command is used at the beginning of a headline, the new
       headline is created before the current line. If at the
       beginning of any other line, the content of that line is made
       the new heading. If the command is used at the end of a folded
       subtree (i.e., behind the ellipses at the end of a headline),
       then a headline like the current one will be inserted after the
       end of the subtree.

       {{{kindex(M-RET)}}}
       {{{findex(org-insert-heading)}}}
       {{{vindex(org-M-RET-may-split-line )}}}
  - {{{kbdkey(C-,RET)}}} ~org-insert-heading-respect-content~ :: Just
       like {{{kbdkey(M-,RET)}}}, except when adding a new heading
       below the current heading, the new heading is placed after the
       body instead of before it. This command works from anywhere in
       the entry.

       {{{kindex(C-RET)}}}
       {{{findex(org-insert-heading-respect-content)}}}
  - {{{kbdkey(M-S-,RET)}}} ~org-insert-todo-heading~ :: Insert new
       TODO entry with same level as current heading.  See also the
       variable ~org-treat-insert-todo-heading-as-state-change~.

       {{{kindex(M-S-RET)}}}
       {{{findex(org-insert-todo-heading)}}}
       {{{vindex(org-treat-insert-todo-heading-as-state-change)}}}
  - {{{kbdkey(C-S-,RET)}}} ~org-insert-todo-heading-respect-content~ :: Insert
       new TODO entry with same level as current heading. Like
       {{{kbdkey(C-,RET)}}}, the new headline will be inserted after
       the current subtree.

       {{{kindex(C-S-RET)}}}
       {{{findex(org-insert-todo-heading-respect-content)}}}
  - {{{kbd(@key{TAB})}}} ~org-cycle~ :: In a new entry with no text
       yet, the first {{{key(TAB)}}} demotes the entry to become a
       child of the previous one. The next {{{key(TAB)}}} makes it a
       parent, and so on, all the way to top level. Yet another
       {{{key(TAB)}}}, and you are back to the initial level.

       {{{kindex(@key{TAB})}}}
       {{{findex(org-cycle)}}}
  - {{{kbdkey(M-,left)}}} ~org-do-promote~ :: Promote current heading
       by one level.

       {{{kindex(M-,left)}}}
       {{{findex(org-do-promote)}}}
  - {{{kbdkey(M-,right)}}} ~org-do-demote~ :: Demote current heading
       by one level.

       {{{kindex(M-,right)}}}
       {{{findex(org-do-demote)}}}
  - {{{kbdkey(M-S-,left)}}} ~org-promote-subtree~ :: Promote the
       current subtree by one level.

       {{{kindex(M-S-,left)}}}
       {{{findex(org-promote-subtree)}}}
  - {{{kbdkey(M-S-,right)}}} ~org-demote-subtree~ :: Demote the
       current subtree by one level.

       {{{kindex(M-S-,right)}}}
       {{{findex(org-demote-subtree)}}}
  - {{{kbdkey(M-S-,up)}}} ~org-move-subtree-up~ :: Move subtree up
       (swap with previous subtree of same level).

       {{{kindex(M-S-,up)}}}
       {{{findex(org-move-subtree-up)}}}
  - {{{kbdkey(M-S-,down)}}} ~org-move-subtree-down~ :: Move subtree
       down (swap with next subtree of same level).

       {{{kindex(M-S-,down)}}}
       {{{findex(org-move-subtree-down)}}}
  - {{{kbd(C-c C-x C-w)}}} ~org-cut-subtree~ :: Kill subtree, i.e.,
       remove it from buffer but save in kill ring. With a numeric
       prefix argument N, kill N sequential subtrees.

       {{{kindex(C-c C-x C-w)}}}
       {{{findex(org-cut-subtree)}}}
  - {{{kbd(C-c C-x M-w)}}} ~org-copy-subtree~ :: Copy subtree to kill
       ring.  With a numeric prefix argument N, copy the N sequential
       subtrees.

       {{{kindex(C-c C-x M-w)}}}
       {{{findex(org-copy-subtree)}}}
  - {{{kbd(C-c C-x C-y)}}} ~org-paste-subtree~ :: Yank subtree from
       kill ring. This does modify the level of the subtree to make
       sure the tree fits in nicely at the yank position. The yank
       level can also be specified with a numeric prefix argument, or
       by yanking after a headline marker like {{{samp(****)}}}.

       {{{kindex(C-c C-x C-y)}}}
       {{{findex(org-paste-subtree)}}}
  - {{{kbd(C-y)}}} ~org-yank~ :: Depending on the variables
       ~org-yank-adjusted-subtrees~ and ~org-yank-folded-subtrees~,
       Org's internal ~yank~ command will paste subtrees folded and in
       a clever way, using the same command as {{{kbd(C-c C-x C-y)}}}.
       With the default settings, no level adjustment will take place,
       but the yanked tree will be folded unless doing so would
       swallow text previously visible.  Any prefix argument to this
       command will force a normal ~yank~ to be executed, with the
       prefix passed along.  A good way to force a normal yank is
       {{{kbd(C-u C-y)}}}.  If you use ~yank-pop~ after a yank, it
       will yank previous kill items plainly, without adjustment and
       folding.

       {{{kindex(C-y)}}}
       {{{findex(org-yank)}}}
       {{{vindex(org-yank-adjusted-subtrees)}}}
       {{{vindex(org-yank-folded-subtrees)}}} 
  - {{{kbd(C-c C-x c)}}} ~org-clone-subtree-with-time-shift~ :: Clone
       a subtree by making a number of sibling copies of it. You will
       be prompted for the number of copies to make, and you can also
       specify if any timestamps in the entry should be shifted.  This
       can be useful, for example, to create a number of tasks related
       to a series of lectures to prepare. For more details, see the
       docstring of the command ~org-clone-subtree-with-time-shift~.

       {{{kindex(C-c C-x c)}}}
       {{{findex(org-clone-subtree-with-time-shift)}}}
  - {{{kbd(C-c C-w)}}} ~org-refile~ :: Refile entry or region to a
       different location [[Refile and copy]].

       {{{kindex(C-c C-w)}}}
       {{{findex(org-refile)}}}
  - {{{kbd(C-c ^)}}} ~org-sort~ :: Sort same-level entries.  When
       there is an active region, all entries in the region will be
       sorted.  Otherwise the children of the current headline are
       sorted.  The command prompts for the sorting method, which can
       be alphabetically, numerically, by time (first timestamp with
       active preferred, creation time, scheduled time, deadline
       time), by priority, by TODO keyword (in the sequence the
       keywords have been defined in the setup) or by the value of a
       property.  Reverse sorting is possible as well.  You can also
       supply your own function to extract the sorting key.  With a
       {{{kbd(C-u)}}} prefix, sorting will be case-sensitive.

       {{{kindex(C-c ^)}}}
       {{{findex(org-sort)}}}
  - {{{kbd(C-x n s)}}} ~org-narrow-to-subtree~ :: Narrow buffer to
       current subtree.

       {{{kindex(C-x n s)}}}
       {{{findex(org-narrow-to-subtree)}}}
  - {{{kbd(C-x n b)}}} ~org-narrow-to-block~ :: Narrow buffer to
       current block.

       {{{kindex(C-x n b)}}}
       {{{findex(org-narrow-to-block)}}}
  - {{{kbd(C-x n w)}}} ~widen~ :: Widen buffer to remove narrowing.

       {{{kindex(C-x n w)}}}
       {{{findex(widen)}}}
  - {{{kbd(C-c *)}}} ~org-toggle-heading~ :: Turn a normal line or
       plain list item into a headline (so that it becomes a
       subheading at its location). Also turn a headline into a normal
       line by removing the stars. If there is an active region, turn
       all lines in the region into headlines. If the first line in
       the region was an item, turn only the item lines into
       headlines. Finally, if the first line is a headline, remove the
       stars from all headlines in the region.

       {{{kindex(C-c *)}}}
       {{{findex(org-toggle-heading)}}}

{{{cindex(region\, active)}}} 
{{{cindex(active region)}}}
{{{cindex(transient mark mode)}}} 

When there is an active region (Transient Mark mode), promotion and
demotion work on all headlines in the region.  To select a region of
headlines, it is best to place both point and mark at the beginning of
a line, mark at the beginning of the first headline, and point at the
line just after the last headline to change.  Note that when the
cursor is inside a table (see [[Tables]]), the Meta-Cursor keys have
different functionality.


** Sparse trees
   :PROPERTIES:
   :DESCRIPTION: Matches embedded in context
   :TEXINFO_MENU_TITLE: Sparse trees
   :END:
{{{cindex(sparse trees)}}}
{{{cindex(trees\, sparse)}}}
{{{cindex(folding\, sparse trees)}}}
{{{cindex(occur\, command)}}}

{{{vindex(org-show-hierarchy-above)}}}
{{{vindex(org-show-following-heading)}}}
{{{vindex(org-show-siblings)}}}
{{{vindex(org-show-entry-below)}}}
An important feature of Org mode is the ability to construct /sparse
trees/ for selected information in an outline tree, so that the entire
document is folded as much as possible, but the selected information is made
visible along with the headline structure above it.[fn:14]  Just try it out
and you will see immediately how it works.

Org mode contains several commands creating such trees, all these
commands can be accessed through a dispatcher:

#+attr_texinfo: :table-type "table" :indic "@asis"
  - {{{kbd(C-c /)}}} ~org-sparse-tree~ :: This prompts for an extra
       key to select a sparse-tree creating command.

       {{{kindex(C-c /)}}}
       {{{findex(org-sparse-tree)}}}
  - {{{kbd(C-c / r)}}} ~org-occur~ :: Prompts for a regexp and shows a
       sparse tree with all matches. If the match is in a headline,
       the headline is made visible. If the match is in the body of an
       entry, headline and body are made visible. In order to provide
       minimal context, also the full hierarchy of headlines above the
       match is shown, as well as the headline following the
       match. Each match is also highlighted; the highlights disappear
       when the buffer is changed by an editing command,[fn:13] or by
       pressing {{{kbd(C-c C-c)}}}. When called with a {{{kbd(C-u)}}}
       prefix argument, previous highlights are kept, so several calls
       to this command can be stacked.

       {{{kindex(C-c / r)}}}
       {{{findex(org-occur)}}}
       {{{vindex(org-remove-highlights-with-change)}}}
  - {{{kbd(M-g n)}}} ~next-error~ :: 
       @@info:@itemx@@ {{{kbd(M-g M-n)}}}
       
       Jump to the next sparse tree match in this buffer.

       {{{kindex(M-g n)}}}
       {{{kindex(M-g M-n)}}}
       {{{findex(next-error)}}}
  - {{{kbd(M-g p)}}} ~previous-error~ ::
       @@info:@itemx@@ {{{kbd(M-g M-p)}}}

       Jump to the previous sparse tree match in this buffer.

       {{{kindex(M-g p)}}}
       {{{kindex(M-g M-p)}}}
       {{{findex(previous-error)}}}
{{{vindex(org-agenda-custom-commands)}}} 

{{{noindent}}} For frequently used sparse trees of specific search
strings, you can use the variable ~org-agenda-custom-commands~ to
define fast keyboard access to specific sparse trees. These commands
will then be accessible through the agenda dispatcher
(see [[Agenda Dispatcher]]). For example:

#+header: :exports code
#+begin_src emacs-lisp
  (setq org-agenda-custom-commands
        '(("f" occur-tree "FIXME")))
#+end_src

{{{noindent}}} will define the key {{{kbd(C-c a f)}}} as a
shortcut for creating a sparse tree matching the string
{{{samp(FIXME)}}}.

The other sparse tree commands select headings based on TODO keywords,
tags, or properties and will be discussed later in this manual.

{{{kindex(C-c C-e v)}}}
{{{cindex(printing sparse trees)}}}
{{{cindex(visible text\, printing )}}}

To print a sparse tree, you can use the Emacs command
~ps-print-buffer-with-faces~ which does not print
invisible parts of the document.[fn:12] Or you can use the command
{{{kbd(C-c C-e v)}}} to export only the visible part of the
document and print the resulting file.

** Plain lists
   :PROPERTIES:
   :DESCRIPTION: Additional structure within an entry
   :TEXINFO_MENU_TITLE: Plain lists
   :END:

** Drawers
   :PROPERTIES:
   :DESCRIPTION: Tucking stuff away
   :END:

** Blocks
   :PROPERTIES:
   :DESCRIPTION: Folding blocks
   :END:

** Footnotes
   :PROPERTIES:
   :DESCRIPTION: Define footnotes in Org syntax
   :END:

** Orgstruct mode
   :PROPERTIES:
   :DESCRIPTION: Structure editing outside Org
   :TEXINFO_MENU_TITLE: Orgstruct mode
   :END:
* Tables
  :PROPERTIES:
  :DESCRIPTION: Pure magic for quick formatting
  :END:
** Built-in table editor
   :PROPERTIES:
   :DESCRIPTION: Simple tables
   :END:
** Column width and alignment
   :PROPERTIES:
   :DESCRIPTION: Overrule the automatic settings
   :END:
** Column groups
   :PROPERTIES:
   :DESCRIPTION: Grouping to trigger vertical lines
   :END:
** Orgtbl mode
   :PROPERTIES:
   :DESCRIPTION: The table editor as minor mode
   :END:
** The spreadsheet
   :PROPERTIES:
   :DESCRIPTION: The table editor has spreadsheet capabilities
   :END:
** Org-Plot
   :PROPERTIES:
   :DESCRIPTION: Plotting from Org tables
   :END:
* Hyperlinks
  :PROPERTIES:
  :DESCRIPTION: Notes in context
  :END:
** Link format
   :PROPERTIES:
   :DESCRIPTION: How links in Org are formatted
   :END:
** Internal links
   :PROPERTIES:
   :DESCRIPTION: Links to other places in the current file
   :END:
** Handling links
   :PROPERTIES:
   :DESCRIPTION: URL-like links to the world
   :END:
** Using links outside Org
   :PROPERTIES:
   :DESCRIPTION: Linking from my C source code?
   :END:
** Link abbreviations
   :PROPERTIES:
   :DESCRIPTION: Shortcuts for writing complex links
   :END:
** Search options
   :PROPERTIES:
   :DESCRIPTION: Linking to a specific location
   :END:
** Custom searches
   :PROPERTIES:
   :DESCRIPTION: When the default search is not enough
   :END:
* TODO items
  :PROPERTIES:
  :DESCRIPTION: Every tree branch can be a TODO item
  :TEXINFO_MENU_TITLE: TODO Items
  :END:
Test
** TODO basics
   :PROPERTIES:
   :DESCRIPTION: Marking and displaying TODO entries
   :END:
** =TODO= extensions
   :PROPERTIES:
   :DESCRIPTION: Work flow and assignments
   :END:
** Progress logging
   :PROPERTIES:
   :DESCRIPTION: Dates and notes for progress
   :END:
** Priorities
   :PROPERTIES:
   :DESCRIPTION: Some things are more important than others
   :END:
** Breaking down tasks
   :PROPERTIES:
   :DESCRIPTION: Splitting a task into manageable pieces
   :END:
** Checkboxes
   :PROPERTIES:
   :DESCRIPTION: Tick-off lists
   :END:
* Tags
  :PROPERTIES:
  :DESCRIPTION: Tagging headlines and matching sets of tags
  :END:
** Tag inheritance
   :PROPERTIES:
   :DESCRIPTION: Tags use the tree structure of an outline
   :END:
** Setting tags
   :PROPERTIES:
   :DESCRIPTION: How to assign tags to a headline
   :END:
** Tag searches
   :PROPERTIES:
   :DESCRIPTION: Searching for combinations of tags
   :END:
* Properties and columns
  :PROPERTIES:
  :DESCRIPTION: Storing information about an entry
  :TEXINFO_MENU_TITLE: Properties and Columns
  :END:
** Property syntax
   :PROPERTIES:
   :DESCRIPTION: How properties are spelled out
   :END:
** Special properties
   :PROPERTIES:
   :DESCRIPTION: Access to other Org mode features
   :END:
** Property searches
   :PROPERTIES:
   :DESCRIPTION: Matching property values
   :END:
** Property inheritance
   :PROPERTIES:
   :DESCRIPTION: Passing values down a tree
   :END:
** Column view
   :PROPERTIES:
   :DESCRIPTION: Tabular viewing and editing
   :END:
** Property API
   :PROPERTIES:
   :DESCRIPTION: Properties for Lisp programmers
   :END:
* Dates and times
  :PROPERTIES:
  :DESCRIPTION: Making items useful for planning
  :TEXINFO_MENU_TITLE: Dates and Times
  :END:
** Timestamps
   :PROPERTIES:
   :DESCRIPTION: Assigning a time to a tree entry
   :END:
** Creating timestamps
   :PROPERTIES:
   :DESCRIPTION: Commands to insert timestamps
   :END:
** Deadlines and scheduling
   :PROPERTIES:
   :DESCRIPTION: Planning your work
   :END:
** Clocking work time
   :PROPERTIES:
   :DESCRIPTION: Tracking how long you spend on a task
   :END:
** Effort estimates
   :PROPERTIES:
   :DESCRIPTION: Planning work effort in advance
   :END:
** Relative timer
   :PROPERTIES:
   :DESCRIPTION: Notes with a running timer
   :END:
** Countdown timer
   :PROPERTIES:
   :DESCRIPTION: Starting a countdown timer for a task
   :END:
* Capture - Refile - Archive
  :PROPERTIES:
  :DESCRIPTION: The ins and outs for projects
  :END:
** Capture
   :PROPERTIES:
   :DESCRIPTION: Capturing new stuff
   :END:
** Attachments
   :PROPERTIES:
   :DESCRIPTION: Add files to tasks
   :END:
** RSS Feeds
   :PROPERTIES:
   :DESCRIPTION: Getting input from RSS feeds
   :END:
** Protocols
   :PROPERTIES:
   :DESCRIPTION: External (e.g., browser) access to Emacs and Org
   :END:
** Refile and copy
   :PROPERTIES:
   :DESCRIPTION: Moving/copying a tree from one place to another
   :END:
** Archiving
   :PROPERTIES:
   :DESCRIPTION: What to do with finished products
   :END:
* Agenda views
  :PROPERTIES:
  :DESCRIPTION: Collecting information into views
  :TEXINFO_MENU_TITLE: Agenda Views
  :END:
** Agenda files
   :PROPERTIES:
   :DESCRIPTION: Files being searched for agenda information
   :END:
** Agenda dispatcher
   :PROPERTIES:
   :DESCRIPTION: Keyboard access to agenda views
   :END:
** Built-in agenda views
   :PROPERTIES:
   :DESCRIPTION: What is available out of the box?
   :END:
** Presentation and sorting
   :PROPERTIES:
   :DESCRIPTION: How agenda items are prepared for display
   :END:
** Agenda commands
   :PROPERTIES:
   :DESCRIPTION: Remote editing of Org trees
   :END:
** Custom agenda views
   :PROPERTIES:
   :DESCRIPTION: Defining special searches and views
   :END:
** Exporting agenda views
   :PROPERTIES:
   :DESCRIPTION: Writing a view to a file
   :END:
** Agenda column view
   :PROPERTIES:
   :DESCRIPTION: Using column view for collected entries
   :END:
* Markup for rich export
  :PROPERTIES:
  :DESCRIPTION: Prepare text for rich export
  :TEXINFO_MENU_TITLE: Markup
  :END:
** Structural markup elements
   :PROPERTIES:
   :DESCRIPTION: The basic structure as seen by the exporter
   :END:
** Images and tables
   :PROPERTIES:
   :DESCRIPTION: Tables and images can be exported
   :END:
** Literal examples
   :PROPERTIES:
   :DESCRIPTION: Source code examples with special formatting
   :END:
** Include files
   :PROPERTIES:
   :DESCRIPTION: Include additional files into a document
   :END:
** Index entries
   :PROPERTIES:
   :DESCRIPTION: Making an index
   :END:
** Macro replacement
   :PROPERTIES:
   :DESCRIPTION: Use macros to create complex output
   :END:
** Embedded LaTeX
   :PROPERTIES:
   :DESCRIPTION: LaTeX can be freely used inside Org documents
   :END:
* Exporting
  :PROPERTIES:
  :DESCRIPTION: Sharing and publishing notes
  :END:
** Selective export
   :PROPERTIES:
   :DESCRIPTION: Using tags to select and exclude trees
   :END:
** Export options
   :PROPERTIES:
   :DESCRIPTION: Per-file export settings
   :END:
** The export dispatcher
   :PROPERTIES:
   :DESCRIPTION: How to access exporter commands
   :END:
** ASCII/Latin-1/UTF-8 export
   :PROPERTIES:
   :DESCRIPTION: Exporting to flat files with encoding
   :END:
** HTML export
   :PROPERTIES:
   :DESCRIPTION: Exporting to HTML
   :END:
** LaTeX and PDF export
   :PROPERTIES:
   :DESCRIPTION: Exporting to LaTeX and processing to PDF
   :END:
** DocBook export
   :PROPERTIES:
   :DESCRIPTION: Exporting to DocBook
   :END:
** OpenDocument Text export
   :PROPERTIES:
   :DESCRIPTION: Exporting to OpenDocument Text
   :END:
** TaskJuggler export
   :PROPERTIES:
   :DESCRIPTION: Exporting to TaskJuggler
   :END:
** Freemind export
   :PROPERTIES:
   :DESCRIPTION: Exporting to Freemind mind maps
   :END:
** XOXO export
   :PROPERTIES:
   :DESCRIPTION: Exporting to XOXO
   :END:
** iCalendar export
   :PROPERTIES:
   :DESCRIPTION: Exporting to iCalendar format
   :END:
* Publishing
  :PROPERTIES:
  :DESCRIPTION: Create a web site of linked Org files
  :END:
** Configuration
   :PROPERTIES:
   :DESCRIPTION: Defining projects
   :END:
** Uploading files
   :PROPERTIES:
   :DESCRIPTION: How to get files up on the server
   :END:
** Sample configuration
   :PROPERTIES:
   :DESCRIPTION: Example projects
   :END:
** Triggering publication
   :PROPERTIES:
   :DESCRIPTION: Publication commands
   :END:
* Working with source code
  :PROPERTIES:
  :DESCRIPTION: Export, evaluate, and tangle code blocks
  :TEXINFO_MENU_TITLE: Working With Source Code
  :END:
** Structure of code blocks
   :PROPERTIES:
   :DESCRIPTION: Code block syntax described
   :END:
** Editing source code
   :PROPERTIES:
   :DESCRIPTION: Language major-mode editing
   :END:
** Exporting code blocks
   :PROPERTIES:
   :DESCRIPTION: Export contents and/or results
   :END:
** Extracting source code
   :PROPERTIES:
   :DESCRIPTION: Create pure source code files
   :END:
** Evaluating code blocks
   :PROPERTIES:
   :DESCRIPTION: Place results in the Org buffer
   :END:
** Library of Babel
   :PROPERTIES:
   :DESCRIPTION: Use and contribute to a source code library
   :END:
** Languages
   :PROPERTIES:
   :DESCRIPTION: Supported code block languages
   :END:
** Header arguments
   :PROPERTIES:
   :DESCRIPTION: Configure code block functionality
   :END:
** Results of evaluation
   :PROPERTIES:
   :DESCRIPTION: How evaluation results are handled
   :END:
** Noweb reference syntax
   :PROPERTIES:
   :DESCRIPTION: Literate programming in Org mode
   :END:
** Key bindings and useful functions
   :PROPERTIES:
   :DESCRIPTION: Work quickly with code blocks
   :END:
** Batch execution
   :PROPERTIES:
   :DESCRIPTION: Call functions from the command line
   :END:
* Miscellaneous
  :PROPERTIES:
  :DESCRIPTION: All the rest which did not fit elsewhere
  :END:
** Completion
   :PROPERTIES:
   :DESCRIPTION: M-TAB knows what you need
   :END:
** Easy templates
   :PROPERTIES:
   :DESCRIPTION: Quick insertion of structural elements
   :END:
** Speed keys
   :PROPERTIES:
   :DESCRIPTION: Electric commands at the beginning of a headline
   :END:
** Code evaluation security
   :PROPERTIES:
   :DESCRIPTION: Org mode files evaluate in-line code
   :END:
** Customization
   :PROPERTIES:
   :DESCRIPTION: Adapting Org to your taste
   :END:
** In-buffer settings
   :PROPERTIES:
   :DESCRIPTION: Overview of the #+KEYWORDS
   :END:
** The busy C-c C-c key
   :PROPERTIES:
   :DESCRIPTION: When in doubt, press C-c C-c
   :END:
** Clean view
   :PROPERTIES:
   :DESCRIPTION: Getting rid of leading stars in the outline
   :END:
** TTY keys
   :PROPERTIES:
   :DESCRIPTION: Using Org on a tty
   :END:
** Interaction
   :PROPERTIES:
   :DESCRIPTION: Other Emacs packages
   :END:
** org-crypt.el
   :PROPERTIES:
   :DESCRIPTION: Encrypting Org files
   :END:
* Interaction with other packages

** Cooperation
:PROPERTIES:
:DESCRIPTION: Packages Org cooperates with
:END:
** Conflicts
:PROPERTIES:
:DESCRIPTION: Packages that lead to conflicts
:END:
* Hacking
  :PROPERTIES:
  :DESCRIPTION: How to hack your way around
  :END:
** Hooks
   :PROPERTIES:
   :DESCRIPTION: How to reach into Org's internals
   :END:
** Add-on packages
   :PROPERTIES:
   :DESCRIPTION: Available extensions
   :END:
** Adding hyperlink types
   :PROPERTIES:
   :DESCRIPTION: New custom link types
   :END:
** Context-sensitive commands
   :PROPERTIES:
   :DESCRIPTION: How to add functionality to such commands
   :END:
** Tables in arbitrary syntax
   :PROPERTIES:
   :DESCRIPTION: Orgtbl for LaTeX and other programs
   :END:
** Dynamic blocks
   :PROPERTIES:
   :DESCRIPTION: Automatically filled blocks
   :END:
** Special agenda views
   :PROPERTIES:
   :DESCRIPTION: Customized views
   :END:
** Extracting agenda information
   :PROPERTIES:
   :DESCRIPTION: Post-processing agenda information
   :END:
** Using the property API
   :PROPERTIES:
   :DESCRIPTION: Writing programs that use entry properties
   :END:
** Using the mapping API
   :PROPERTIES:
   :DESCRIPTION: Mapping over all or selected entries
   :END:
* MobileOrg
  :PROPERTIES:
  :DESCRIPTION: Viewing and capture on a mobile device
  :END:
** Setting up the staging area
   :PROPERTIES:
   :DESCRIPTION: Where to interact with the mobile device
   :END:
** Pushing to MobileOrg
   :PROPERTIES:
   :DESCRIPTION: Uploading Org files and agendas
   :END:
** Pulling from MobileOrg
   :PROPERTIES:
   :DESCRIPTION: Integrating captured and flagged items
   :END:
* History and acknowledgments
  :PROPERTIES:
  :DESCRIPTION: How Org came into being
  :TEXINFO_MENU_TITLE: History and Acknowledgments
  :END:

* Key index
  :PROPERTIES:
  :DESCRIPTION: Key bindings and where they are described
  :TEXINFO_MENU_TITLE: Key Index
  :END:

* Command and function index
  :PROPERTIES:
  :DESCRIPTION: Command names and some internal functions
  :TEXINFO_MENU_TITLE: Command and Function Index
  :END:

* Variable index
  :PROPERTIES:
  :DESCRIPTION: Variables mentioned in the manual
  :TEXINFO_MENU_TITLE: Variable Index
  :END:
* Concept index
* Copying
   :PROPERTIES:
   :copying:  t
   :END:

This manual is for Org version @@info:@value{VERSION}@@.

Copyright © 2004-2012  Free Software Foundation, Inc.

#+BEGIN_QUOTE
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover texts being ``A GNU Manual,''
and with the Back-Cover Texts as in (a) below.  A copy of the license
is included in the section entitled ``GNU Free Documentation License.''

(a) The FSF's Back-Cover Text is: ``You have the freedom to copy and
modify this GNU manual.  Buying copies from the FSF supports it in
developing GNU and promoting software freedom.''

This document is part of a collection distributed under the GNU Free
Documentation License.  If you want to distribute this document
separately from the collection, you can do so by adding a copy of the
license to the document, as described in section 6 of the license.
#+END_QUOTE

* Footnotes to export
[fn:1] The output from install-info
(if any) is system dependent. In particular, Debian and its derivatives
use two different versions of install-info.  You may safely ignore the
message:
#+begin_src example
This is not dpkg install-info anymore, but GNU install-info
See the man page for ginstall-info for command line arguments
#+end_src
.

[fn:2]  If your Emacs distribution does not come with Org,
the function =org-version= will not be defined.

[fn:3]  The ~master~ branch is where development takes place.

[fn:4] Export to iCalendar supports TODO and agenda items only.

[fn:5] If you don't use font-lock globally, turn it on in an Org
buffer with ~(add-hook 'org-mode-hook 'turn-on-font-lock)~.

[fn:6] Please consider subscribing to the
mailing list in order to minimize the work the mailing list
moderators have to do.

[fn:7] Easy templates insert lowercase keywords and
Babel dynamically inserts ~#+results~.

[fn:8] See the variables ~org-special-ctrl-a/e~,
~org-special-ctrl-k~, and
~org-ctrl-k-protect-subtree~ to configure special
behavior of {{{kbd(C-a)}}}, {{{kbd(C-e)}}}, and
{{{kbd(C-k)}}} in headlines. Note that clocking only works with
headings indented less than 30 stars.

[fn:9]  See the option
~org-cycle-global-at-bob~.

[fn:10] The indirect buffer
([[info:emacs:Indirect Buffers][Emacs manual on indirect buffers]])
will contain the entire buffer, but will be narrowed to the current
tree.  Editing the indirect buffer will also change the original buffer,
but without affecting visibility in that buffer.

* About orgmanual.org                                              :noexport:
This document intends to be Org mode source for the Org mode manual
and the Org mode guide. It is intended to be a major revision of the
manual, primarily to document the new exporter. It is designed to be
exported using the new exporter, written by Nicolas Goaziou, and the
texinfo back-end, written by Jonathan Leech-Pepin.

** Set up

Configure emacs to edit texinfo, and to add some handy conversion
functions, by executing the setup-editing source code block.

The conversion functions wrap various @ constructs.  They are bound
to =C-c b= and =C-c f=.

** Exporting

Export using =C-c e= if you are confident your initialization file(s)
won't pollute the process.

Alternatively, tangle =makefile= and =init.el= with =C-c C-v t= and
then from a shell run either =make= or =make info=.
* Nicolas Goaziou's instructions                                   :noexport:

** Global Changes
All occurrences of "#+LABEL:" should be replaced with "#+NAME:".

*** TODO Replace #+LABEL with #+NAME

** Chapter 2, Document Structure
   :PROPERTIES:
   :CATEGORY: Ch. 2
   :END:
In "2. Document Structure", one section could be added about
cross-referencing, which would point to "Internal links". There, targets
in comments can be removed. Also most back-ends will turn links to
targets into proper cross-reference number (see `org-export-get-ordinal'
docstring for cases handled).

*** TODO Add section about cross-referencing

** Chapter 4, Hyperlinks
   :PROPERTIES:
   :CATEGORY: Ch. 4
   :END:
"Internal links". There, targets
in comments can be removed. Also most back-ends will turn links to
targets into proper cross-reference number (see `org-export-get-ordinal'
docstring for cases handled).

*** TODO Remove targets in comments

** Chapter 11, Markup for Rich Export
   :PROPERTIES:
   :CATEGORY: Ch. 11
   :END:
*** Include Keyword
The "#+INCLUDE:" keyword syntax and effect is slightly different. You
may want to look at `org-export-expand-include-keyword'.

**** TODO Revise Include keyword
** Chapter 12, Exporting
   :PROPERTIES:
   :CATEGORY: Ch. 12
   :END:
*** Export Options
In "12. Exporting", "Export options" section need an overhaul. See
`org-export-options-alist' for the default list of export options. Other
options are back-end specific and should be introduced in their own
section. Also "#+KEYWORD:" renaming into ":EXPORT_KEYWORD:" property is
systematic.

**** TODO Overhaul Export options section

**** TODO KEYWORD now EXPORT_KEYWORD

*** Macros
There should also be a section about macros (and move it out of "11
Markup for rich export"), general, hard-coded ({{{time(...)}}},
{{{property(...)}}}, {{{input-file}}} and {{{modification-time(...)}}})
and specific ({{{date}}}, {{{author}}}, {{{title}}} and {{{email}}}). It
should be specified that macros are recursive and only apply to one
line. Therefore, they are appropriate for small replacements. For more
complex ones, one may use Babel instead.

**** TODO Write macros section
Subsections: General, Hard-coded, Specific

*** Filters
There should also be a section about filters used to customize export
output and another one about `org-export-define-derived-backend' which
allow someone to tweak a back-end.

**** TODO Write filters section

*** Define derived back-end
and another one about `org-export-define-derived-backend' which
allow someone to tweak a back-end.

**** TODO Write derived back-end section

*** Export Snippets
A section can be added about export snippets, i.e.

  @@ob-latex:\something{...}@@

They are a generalization for @<html> tags.

**** TODO Write export snippets section
*** Captions
There may be a section about captions and their syntax. A note should
specify that export back-ends may or may not respect a caption. On the
other hand "11.2 Images and Tables" focuses on captions. Since these are
not specific to Images and Tables, it may be removed.

**** TODO Write captions section
*** Back-ends
I would also regroup every back-end into a sub-section to not clutter
main section.

Other options are back-end specific and should be introduced in their
own section.

Also most back-ends will turn links to
targets into proper cross-reference number (see `org-export-get-ordinal'
docstring for cases handled).


**** Old back-ends

"DocBook export" (though texinfo back-end can export to DocBook) and
"XOXO export" sections can be removed as the back-ends are discontinued.
There is no equivalent to "Taskjuggler export" yet, so it can be removed
too.

***** TODO Remove DocBook backend

***** TODO Remove XOXO backend

***** TODO Remove Taskjuggler backend

**** Back-end template
These are only suggestion. There is also probably many more things to
do. But I think that the hardest part is to start writing it. If you
come up with a good organization for e-latex back-end documentation, we
can use it for other back-ends thereafter.

***** TODO Write back-end template

****** TODO Does back-end turn links to targets?

**** LaTeX Back-end
About the latex back-end, you know certainly a lot. It should be
specified that it introduces 3 new keywords, namely "LATEX_CLASS",
"LATEX_CLASS_OPTIONS" and "LATEX_HEADER". It also introduces
"BEGIN_LATEX" and "BEGIN_TEX" blocks (the latter being just a synonym
for the former). It would be worth to add that it handles footnotes in
item tags and footnotes within footnotes. It also handles booktabs,
paralist types, automatic babel language selection with #+LANGUAGE: in
addition to already present features (minted/listings package handling).

***** TODO Write LaTeX back-end
**** Beamer Back-end
The BEAMER export back-end deserves, IMO, its own section.

***** TODO Write Beamer back-end
**** TexInfo Back-end
> BTW, it would be great to have a texinfo exporter so the Org
> documentation could be written in Org-mode :)

There is one, albeit barely tested: (require 'org-e-texinfo).

though texinfo back-end can export to DocBook

***** TODO Write texinfo backend
*** Export dispatcher
I think that the export dispatcher doesn't deserve its own section. The
introduction to Export subsystem can talk about "M-x
org-export-dispatch" (bound to C-c C-e) instead.
**** TODO Remove export dispatcher section

*** Smart quotes
There should be a section about smart-quotes too.

**** TODO Add smart quotes section
* Texi -> Org                                                      :noexport:
This section contains source code blocks that help translate from
=texinfo= to =Org=.

* Notes                                                            :noexport:
** TODO org-version.inc needs to change format
It is in texinfo format now, but should be in a form that can be
exported every which way.

** Entities

> With the new exporter's texinfo back-end, I think org-entities and
> org-entities-user might usefully be augmented with the entities listed
> in Chapter 14 of the texinfo manual, Special Insertions.
>
> Or, is there some other Org mechanism that might be preferable?

AFAIU, texinfo can handle UTF-8 characters with:

  @documentencoding UTF-8

(see section 18.2 from texinfo manual). So I guess it's safe to rely
on :utf-8 entities.

However, special characters like @dots{} are usually handled with
"special strings" mechanism, directly at the plain text transcoded (see
`org-e-latex-plain-text' for example).


*** TODO Add @documentencoding UTF-8 to header

*** TODO Investigate special strings mechanism
** TODO texinfo export restriction on position of Copying heading 
[2012-11-12 Mon]
[[gnus:nnfolder%2Barchive:sent-mail#m1mwympokm.fsf@tsdye.com][Email from Thomas S. Dye: Re: {O} texinfo back-end won't]]
** TODO Change description of Publishing 
[2012-11-17 Sat]
[[file:~/org/orgmanual/orgmanual.org::*Publishing][Publishing]]
** TODO Edit description for Miscellaneous 
[2012-11-17 Sat]
[[file:~/org/orgmanual/orgmanual.org::*Miscellaneous][Miscellaneous]]
Perhaps shorten to "All the rest"
** TODO Add concept index to the info version? 
[2012-11-17 Sat]
[[file:~/org/orgmanual/orgmanual.org::*Concept%20index][Concept index]]
** TODO Update 7.2 Special properties 
[2012-11-17 Sat]
[[gnus:nnfolder%2Barchive:sent-mail#m1lie0ow7k.fsf@tsdye.com][Email from Thomas S. Dye: Re: {org-e-texinfo} generate m]]

> EXPORT_TITLE property is meant to provide a title for a subtree export.
* Org-mode setup                                                   :noexport:

** Editing setup
#+name: setup-editing
#+header: :results silent
#+header: :noweb yes
#+begin_src emacs-lisp
(require 'org-e-texinfo)
(define-key org-mode-map (kbd "C-c e") 'org-export-dispatch)
(setq org-pretty-entities nil)
(setq org-src-preserve-indentation t)
(setq org-confirm-babel-evaluate nil)
(setq org-footnote-section "Footnotes to export")
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (makefile . t)
   (sh . t)))
(add-to-list 'org-export-snippet-translation-alist
             '("info" . "e-texinfo"))
<<at-funs-params>>
<<at-funs-bol>>
#+end_src


*** Texi -> Org helpers

#+name: at-funs-params
#+header: :results silent
#+begin_src emacs-lisp
(defun tsd-texi2org-at-funs ()
  "Wrap forms like @fun{} in @@info:...@@"
  (interactive)
  (query-replace-regexp "\\(@[^@]*}\\)" "@@info:\\1@@" nil))
(define-key org-mode-map (kbd "C-c f") 'tsd-texi2org-at-funs)
#+end_src

#+name: at-funs-bol
#+header: :results silent
#+begin_src emacs-lisp
(defun tsd-texi2org-at-bol ()
  "Wrap forms like @fun at bol in @@info:...@@"
  (interactive)
  (query-replace-regexp "\\(^@[a-z,-]*\\)[ $]" "@@info:\\1@@ " nil))
(define-key org-mode-map (kbd "C-c b") 'tsd-texi2org-at-bol)
#+end_src

** init.el file
This source code block requires paths to your Org mode installation.
Modify accordingly.

#+name: emacs-init
#+header: :tangle init.el
#+header: :results silent
#+begin_src emacs-lisp
(setq load-path (cons "~/.emacs.d/src/org-mode/lisp" load-path))
(setq load-path (cons "~/.emacs.d/src/org-mode/contrib/lisp" load-path))
(require 'org-e-texinfo)
(setq org-src-preserve-indentation t)
(setq org-confirm-babel-evaluate nil)
(setq org-footnote-section "Footnotes to export")
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (makefile . t)
   (sh . t)))
(add-to-list 'org-export-snippet-translation-alist
             '("info" . "e-texinfo"))
#+end_src

** Makefile
This source code block requires information to call your emacs binary.

Be certain =org-src-preserve-indentation= is non-nil before you edit
or export this source code block.

#+name: make-manual
#+header: :tangle Makefile
#+header: :results silent
#+begin_src makefile
  CC=gcc  
  EMACS=/Applications/MacPorts/Emacs.app/Contents/MacOS/Emacs
  BATCH_EMACS=$(EMACS) --batch -Q -l init.el

  manual: clean
	$(BATCH_EMACS) orgmanual.org -f org-e-texinfo-export-to-texinfo

  info: clean
	$(BATCH_EMACS) orgmanual.org -f org-e-texinfo-export-to-info

  dvi: cleandvi
	$(BATCH_EMACS) orgmanual.org -f org-e-texinfo-export-to-texinfo
	texi2dvi orgmanual.texi

  pdf: cleanpdf
	$(BATCH_EMACS) orgmanual.org -f org-e-texinfo-export-to-texinfo
	texi2dvi --pdf orgmanual.texi

  info-batch: clean
	$(BATCH_EMACS) orgmanual.org -f org-e-texinfo-export-to-texinfo
	makeinfo orgmanual.texi

  export-test: cleantest
	$(BATCH_EMACS) export-test.org -f org-e-texinfo-export-to-texinfo

  info-test: cleantest
	$(BATCH_EMACS) export-test.org -f org-e-texinfo-export-to-info

  clean realclean::
	rm -f *~ orgmanual.texi orgmanual.info

  cleantest realclean::
	rm -f export-test.texi

  cleandvi realclean::
	rm -f *.dvi *.toc *.tp *.vr *.pg *.log *.ky *.fn *.cps *.cp *.aux

  cleanpdf realclean::
	rm -f *.pdf

  realclean::
	rm -f Makefile init.el
#+end_src


*** DONE Figure out how to export with a batch call
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2012-11-10 Sat 12:46]
    :END:
The correct command is org-e-texinfo-export-to-texinfo


