#+TITLE:     Org Mode
#+AUTHOR:    Carsten Dominik
#+EMAIL:     tsd@tsdye.com
#+DATE:      2012-11-10 Sat
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+STARTUP: overview
#+TEXINFO_HEADER: @c
#+TEXINFO_HEADER: @c Added by tsd [2012-11-11 Sun]
#+TEXINFO_HEADER: @documentencoding UTF-8
#+TEXINFO_HEADER: @c
#+TEXINFO_HEADER: @include org-version.inc
#+TEXINFO_HEADER: @c
#+TEXINFO_HEADER: @c Use proper quote and backtick for code sections in PDF output
#+TEXINFO_HEADER: @c Cf. Texinfo manual 14.2
#+TEXINFO_HEADER: @set txicodequoteundirected
#+TEXINFO_HEADER: @set txicodequotebacktick
#+TEXINFO_HEADER: @c
#+TEXINFO_HEADER: @c Version and Contact Info
#+TEXINFO_HEADER: @set MAINTAINERSITE @uref{http://orgmode.org,maintainers webpage}
#+TEXINFO_HEADER: @set MAINTAINER Carsten Dominik
#+TEXINFO_HEADER: @set MAINTAINEREMAIL @email{carsten at orgmode dot org}
#+TEXINFO_HEADER: @set MAINTAINERCONTACT @uref{mailto:carsten at orgmode dot org,contact the maintainer}
#+SUBTITLE: Release @value{VERSION}
#+SUBAUTHOR:  with contributions by David O'Toole, Bastien Guerry, Philip Rooke, Dan Davison, Eric Schulte, Thomas Dye and Jambunathan K.
#+TEXINFO_DIR_CATEGORY: Emacs editing modes
#+TEXINFO_DIR_TITLE: Org Mode: (org)
#+TEXINFO_DIR_DESC: Outline-based notes management and organizer

#+TODO: FIXME | FIXED

# # Macros for simplifying export

# Indexing macros.  index is generic, the rest are for the specific
# default indexes.
#+MACRO: index @@info:@$1index $2@@
#+MACRO: cindex {{{index(c,$1)}}}
#+MACRO: pindex {{{index(p,$1)}}}
#+MACRO: findex {{{index(f,$1)}}}
#+MACRO: vindex {{{index(v,$1)}}}
#+MACRO: kindex {{{index(k,$1)}}}

# Markup macros.  In texinfo export they will be marked up, otherwise
# they will be inserted verbatim.  markup is the generic form that can
# be used to insert any @-command with the second variable being the
# text to mark up.
#+MACRO: markup @@info:@$1{@@$2@@info:}@@
#+MACRO: kbd {{{markup(kbd,$1)}}}
#+MACRO: key {{{markup(key,$1)}}}
#+MACRO: kbdkey {{{kbd($1{{{key($2)}}})}}}
#+MACRO: samp {{{markup(samp,$1)}}}
#+MACRO: command {{{markup(command,$1)}}}
#+MACRO: file {{{markup(file,$1)}}}
#+MACRO: var {{{markup(var,$1)}}}

#+MACRO: noindent @@info:@noindent@@
#+MACRO: defun @@info:@defun@@
#+MACRO: enddefun @@info:@end defun@@
#+MACRO: defopt @@info:@defopt@@
#+MACRO: enddefopt @@info:@end defopt@@

* FIXED Introduction
  :PROPERTIES:
  :TITLE: Introduction
  :DESCRIPTION: Getting started
  :END:
@@info:@cindex introduction@@

** Summary
   :PROPERTIES:
   :DESCRIPTION: Brief summary of what Org-mode does
   :END:
@@info:@cindex summary@@

Org is a mode for keeping notes, maintaining TODO lists, and doing
project planning with a fast and effective plain-text system.

Org develops organizational tasks around NOTES files that contain
lists or information about projects as plain text. Org is implemented
on top of Outline mode, which makes it possible to keep the content of
large files well structured. Visibility cycling and structure editing
help to work with the tree. Tables are easily created with a built-in
table editor. Org supports TODO items, deadlines, timestamps, and
scheduling. It dynamically compiles entries into an agenda that
utilizes and smoothly integrates much of the Emacs calendar and diary.
Plain text URL-like links connect to websites, emails, Usenet
messages, BBDB entries, and any files related to the projects. For
printing and sharing of notes, an Org file can be exported as a
structured ASCII file, as HTML, or as an iCalendar file.[fn:4] It can
also serve as a publishing tool for a set of linked web pages.

As a project planning environment, Org works by adding metadata to
outline nodes. Based on this data, specific entries can be extracted
in queries and create dynamic /agenda views/.

Org mode contains the Org Babel environment which allows you to work
with embedded source code blocks in a file, to facilitate code
evaluation, documentation, and literate programming techniques.

Org's automatic, context-sensitive table editor with spreadsheet
capabilities can be integrated into any major mode by activating the
minor Orgtbl mode. Using a translation step, it can be used to
maintain tables in arbitrary file types, for example in LaTeX. The
structure editing and list creation capabilities can be used outside
Org with the minor Orgstruct mode.

Org keeps simple things simple. When first fired up, it should feel
like a straightforward, easy to use outliner. Complexity is not
imposed, but a large amount of functionality is available when you
need it. Org is a toolbox and can be used in different ways and for
different ends, for example:

  - an outline extension with visibility cycling and structure editing
  - an ASCII system and table editor for taking structured notes
  - a TODO list editor
  - a full agenda and planner with deadlines and work scheduling
    @@info:@pindex GTD, Getting Things Done@@
  - an environment in which to implement David Allen's GTD system
  - a simple hypertext system, with HTML and LaTeX export
  - a publishing tool to create a set of interlinked web pages
  - an environment for literate programming

@@info:@cindex FAQ@@ 

There is a [[http://orgmode.org][website for Org]] that provides links to the newest version
of Org, as well as additional information, frequently asked questions
(FAQ), links to tutorials, etc.

@@info:@cindex print edition@@ 

Version 7.3 of this manual is available as a [[http://www.network-theory.co.uk/org/manual/][paperback book from
Network Theory Ltd.]]

@@info:@page@@

** Installation
   :PROPERTIES:
   :DESCRIPTION: How to install a downloaded version of Org-mode
   :END:

@@info:@cindex installation@@
@@info:@cindex XEmacs@@

*Important:* If you have the version of Org that comes with Emacs or
as a XEmacs package, please skip this section and go directly to
[[Activation]]. If you downloaded Org as an ELPA package, please read the
instructions on the [[http://orgmode.org/elpa.html][Org ELPA page]]. To see what version of Org (if any)
is part of your Emacs distribution, type @@info:@kbd{@@M-x org-version@@info:}@@.[fn:2]

Installation of Org mode uses a build system, which is described in more
detail on [[http://orgmode.org/worg/dev/org-build-system.html][Worg]].

If you have downloaded Org from the Web as a distribution @@info:@file{@@.zip@@info:}@@ or
@@info:@file{@@.tar.gz@@info:}@@ archive, take the following steps to install it:

  - Unpack the distribution archive
  - Change into (~cd~) the Org directory
  - Run ~make help config~ and then check and edit the file
    @@info:@file{@@local.mk@@info:}@@ if the default configuration does not match
    your system

    - Set the name of the Emacs binary (likely either
      @@info:@file{@@emacs@@info:}@@ or @@info:@file{@@xemacs@@info:}@@), and the paths to the
      directories where local Lisp and Info files will be installed
    - If the Emacs binary is not in your path, give the full path to
      the executable
    - Avoid spaces in any path names

  - Run ~make config~ again to check the configuration
  - Run ~make install~ or ~sudo make install~ to build and install Org
    mode on your system

If you use a cloned Git repository, then the procedure is slightly
different. The following description assumes that you are using the
~master~ branch.[fn:3] You could also use the ~maint~ branch instead,
where the release versions are published, just replace ~master~ with
~maint~ in the description below.

  - Change into (~cd~) the Org repository
  - Run ~git checkout master~ to switch to the ~master~ branch of the
    Org repository
  - Run ~make help~ and then check and edit the file @@info:@file{@@local.mk@@info:}@@

    - You must set the name of the Emacs binary
      (likely either @@info:@file{@@emacs@@info:}@@ or @@info:@file{@@xemacs@@info:}@@), and the
      paths to the directories where local Lisp and Info files will be
      installed
    - If the Emacs binary is not in your path, you must give
      the full path to the executable
    - Avoid spaces in any path names

  - Run ~make config~ to check the configuration
  - Optionally run ~make test~ to build Org mode and then run the full
    test suite
  - Run ~make update2~ or ~make up2~ to update the Git repository and
    build and install Org mode. The latter invocation runs the
    complete test suite before installation and installs only if the
    build passes all tests

If you don't have access to the system-wide directories and you don't
want to install somewhere into your home directory, you can run Org
directly from the distribution directory or Org repository by
compiling Org mode in place:

  - Change into (~cd~) the Org repository
  - Run ~git checkout master~ to switch to the ~master~ branch of the
    Org repository
  - Run ~make compile~

Last but not least you can also run Org mode directly from an Org repository
without any compilation.  Simply replace the last step in the recipe above
with ~make uncompiled~.

Then add the following line to @@info:@file{@@.emacs@@info:}@@:

#+header: :exports code
#+header: :eval no
#+begin_src emacs-lisp
(add-to-list 'load-path "~/path/to/orgdir/lisp")
#+end_src

@@info:@noindent@@
If you plan to use code files from the @@info:@file{@@contrib@@info:}@@ subdirectory without
compiling them, do a similar step for this directory:

#+header: :exports code
#+header: :eval no
#+begin_src emacs-lisp
(add-to-list 'load-path "~/path/to/orgdir/contrib/lisp" t)
#+end_src

If you want to include those files with the build and install, please
customize the variable ~ORG_ADD_CONTRIB~ instead in your
~local.mk~ file. For more details please see this
[[http://orgmode.org/worg/dev/org-build-system.html#sec-4-1-2][description on Worg]].

Installing Info files is system dependent, because of differences in
the @@info:@file{@@install-info@@info:}@@ program. The Info documentation is
installed together with the rest of Org mode. If you don't install Org
mode, it is possible to install the Info documentation separately if you
have install-info on your system.[fn:1]  The command to do this is:

#+begin_src example
make install-info
#+end_src

Do not forget to activate Org as described in the following section.
@@info:@page@@

** Activation
   :PROPERTIES:
   :DESCRIPTION: How to activate Org-mode for certain buffers
   :END:
@@info:@cindex activation@@
@@info:@cindex autoload@@
@@info:@cindex ELPA@@
@@info:@cindex global key bindings@@
@@info:@cindex key bindings, global@@
@@info:@findex org-agenda@@
@@info:@findex org-capture@@
@@info:@findex org-store-link@@
@@info:@findex org-iswitchb@@

Since Emacs 22.2, files with the @@info:@file{@@.org@@info:}@@ extension use Org mode by
default.  If you are using an earlier version of Emacs, add this line to your
@@info:@file{@@.emacs@@info:}@@ file:

#+header: :exports code
#+header: :eval no
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
#+end_src

Org mode buffers need font-lock to be turned on - this is the default in
Emacs.[fn:5]

There are compatibility issues between Org mode and some other Elisp
packages, please take the time to check the list (see [[Conflicts]]).

The four Org commands @@info:@command{@@org-store-link@@info:}@@,
@@info:@command{@@org-capture@@info:}@@, @@info:@command{@@org-agenda@@info:}@@, and
@@info:@command{@@org-iswitchb@@info:}@@ should be accessible through global keys
(i.e., anywhere in Emacs, not just in Org buffers).  Here are
suggested bindings for these keys, please modify the keys to your own
liking.

#+header: :exports code
#+header: :eval no
#+begin_src emacs-lisp
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
#+end_src

@@info:@cindex Org mode, turning on@@ 
With this setup, all files with extension @@info:@samp{@@.org@@info:}@@ will be put
into Org mode.  As an alternative, make the first line of a file look
like this:

#+begin_src example
MY PROJECTS    -*- mode: org; -*-
#+end_src

@@info:@vindex org-insert-mode-line-in-empty-file@@ 
@@info:@noindent@@
which will select Org mode for this buffer no matter what the file's
name is. See also the variable
~org-insert-mode-line-in-empty-file~.

Many commands in Org work on the region if the region is /active/. To
make use of this, you need to have ~transient-mark-mode~
(~zmacs-regions~ in XEmacs) turned on. In Emacs 23 this is the
default, in Emacs 22 you need to do this yourself with

#+header: :exports code
#+header: :eval no
#+begin_src emacs-lisp
(transient-mark-mode 1)
#+end_src

@@info:@noindent@@ If you do not like ~transient-mark-mode~, you can
create an active region by using the mouse to select a region, or
pressing @@info:@kbd{@@C-@@info:@key{@@SPC@@info:}@@@@info:}@@ twice before moving the cursor.

** Feedback
   :PROPERTIES:
   :DESCRIPTION: Bug reports, ideas, patches, etc.
   :END:
@@info:@cindex feedback@@
@@info:@cindex bug reports@@
@@info:@cindex maintainer@@
@@info:@cindex author@@

If you find problems with Org, or if you have questions, remarks, or
ideas about it, please mail to the Org mailing list
[[mailto:emacs-orgmode@gnu.org]]. If you are not a member of
the mailing list, your mail will be passed to the list after a
moderator has approved it.[fn:6]

For bug reports, please first try to reproduce the bug with the latest
version of Org available---if you are running an outdated version, it is
quite possible that the bug has been fixed already.  If the bug persists,
prepare a report and provide as much information as possible, including the
version information of Emacs (@@info:@kbd{@@M-x emacs-version@@info:@key{@@RET@@info:}@@@@info:}@@) and Org
(@@info:@kbd{@@M-x org-version@@info:@key{@@RET@@info:}@@@@info:}@@), as well as the Org related setup in
@@info:@file{@@.emacs@@info:}@@.  The easiest way to do this is to use the command

#+begin_src example
@kbd{M-x org-submit-bug-report}
#+end_src

@@info:@noindent@@ which will put all this information into an Emacs
mail buffer so that you only need to add your description. If you are
not sending the Email from within Emacs, please copy and paste the
content into your Email program.

Sometimes you might face a problem due to an error in your Emacs or
Org mode setup.  Before reporting a bug, it is very helpful to start
Emacs with minimal customizations and reproduce the problem.  Doing so
often helps you determine if the problem is with your customization or
with Org mode itself.  You can start a typical minimal session with a
command like the example below.

#+begin_src sh :exports code
$ emacs -Q -l /path/to/minimal-org.el
#+end_src

However if you are using Org mode distributed with Emacs, a minimal
setup is not necessary. In that case it is sufficient to start Emacs
as ~emacs -Q~. The ~minimal-org.el~ setup
file can have contents as shown below.

#+header: :exports code
#+header: :eval no
#+begin_src emacs-lisp
;;; Minimal setup to load latest `org-mode'

;; activate debugging
(setq debug-on-error t
      debug-on-signal nil
      debug-on-quit nil)

;; add latest org-mode to load path
(add-to-list 'load-path (expand-file-name "/path/to/org-mode/lisp"))
(add-to-list 'load-path (expand-file-name "/path/to/org-mode/contrib/lisp" t))
#+end_src

If an error occurs, a backtrace can be very useful (see below on how to
create one).  Often a small example file helps, along with clear information
about:

  1. What exactly did you do?
  2. What did you expect to happen?
  3. What happened instead?

@@info:@noindent@@ Thank you for helping to improve this program.

*** How to create a useful backtrace
@@info:@cindex backtrace of an error@@

If working with Org produces an error with a message you don't
understand, you may have hit a bug.  The best way to report this is by
providing, in addition to what was mentioned above, a /backtrace/.
This is information from the built-in debugger about where and how the
error occurred.  Here is how to produce a useful backtrace:

  1. Reload uncompiled versions of all Org mode Lisp files. The
     backtrace contains much more information if it is produced with
     uncompiled code. To do this, use 
     @@info:@kbd{@@C-u M-x org-reload@@info:@key{@@RET@@info:}@@@@info:}@@ or select 
     ~Org -> Refresh/Reload -> Reload Org uncompiled~ from the menu.

  2. Go to the ~Options~ menu and select ~Enter Debugger on Error~
     (XEmacs has this option in the ~Troubleshooting~ sub-menu).

  3. Do whatever you have to do to hit the error. Don't forget to
     document the steps you take.

  4. When you hit the error, a @@info:@file{@@*Backtrace*@@info:}@@ buffer will
     appear on the screen.  Save this buffer to a file (for example
     using @@info:@kbd{@@C-x C-w@@info:}@@) and attach it to your bug report.

** Conventions
   :PROPERTIES:
   :DESCRIPTION: Typesetting conventions in the manual
   :END:

*** TODO keywords, tags, properties, etc.

Org mainly uses three types of keywords: TODO keywords, tags and property
names.  In this manual we use the following conventions:


  - TODO, WAITING :: TODO keywords are written with all capitals, even if they
    are user-defined.
  - boss, ARCHIVE :: User-defined tags are written in lowercase; built-in
               tags with special meaning are written with all capitals.
  - Release, PRIORITY :: User-defined properties are capitalized; built-in
                properties with special meaning are written with all capitals.

Moreover, Org uses /option keywords/ (like ~#+TITLE~ to set the title)
and /environment keywords/ (like ~#+BEGIN_HTML~ to start a ~HTML~
environment). They are written in uppercase in the manual to enhance
its readability, but you can use lowercase in your Org files.[fn:7]

*** Keybindings and commands
@@info:@kindex C-c a@@
@@info:@findex org-agenda@@
@@info:@kindex C-c c@@
@@info:@findex org-capture@@

The manual suggests two global keybindings: @@info:@kbd{@@C-c a@@info:}@@ for
~org-agenda~ and @@info:@kbd{@@C-c c@@info:}@@ for ~org-capture~. These are only
suggestions, but the rest of the manual assumes that you are using
these keybindings.

Also, the manual lists both the keys and the corresponding commands
for accessing a functionality. Org mode often uses the same key for
different functions, depending on context. The command that is bound
to such keys has a generic name, like ~org-metaright~.  In the manual
we will, wherever possible, give the function that is internally
called by the generic command. For example, in the chapter on document
structure, @@info:@kbd{@@M-@@info:@key{@@right@@info:}@@@@info:}@@ will be listed to call
~org-do-demote~, while in the chapter on tables, it will be listed to
call ~org-table-move-column-right~. If you prefer, you can compile the
manual without the command names by unsetting the flag ~cmdnames~ in
@@info:@file{@@org.texi@@info:}@@.
* FIXED Document structure
  :PROPERTIES:
  :DESCRIPTION: A tree works like your brain
  :TEXINFO_MENU_TITLE: Document Structure
  :END:
@@info:@cindex document structure@@
@@info:@cindex structure of document@@

Org is based on Outline mode and provides flexible commands to
edit the structure of the document.

** Outlines
   :PROPERTIES:
   :DESCRIPTION: Org mode is based on Outline mode
   :END:
@@info:@cindex outlines@@
@@info:@cindex Outline mode@@

Org is implemented on top of Outline mode. Outlines allow a document
to be organized in a hierarchical structure, which (at least for me)
is the best representation of notes and thoughts. An overview of this
structure is achieved by folding (hiding) large parts of the document
to show only the general document structure and the parts currently
being worked on. Org greatly simplifies the use of outlines by
compressing the entire show/hide functionality into a single command,
@@info:@command{@@org-cycle@@info:}@@, which is bound to the @@info:@key{@@TAB@@info:}@@ key.

** Headlines
   :PROPERTIES:
   :DESCRIPTION: How to typeset Org tree headlines
   :END:
@@info:@cindex headlines@@
@@info:@cindex outline tree@@
@@info:@vindex org-special-ctrl-a/e@@
@@info:@vindex org-special-ctrl-k@@
@@info:@vindex org-ctrl-k-protect-subtree@@

Headlines define the structure of an outline tree.  The headlines in Org
start with one or more stars, on the left margin.[fn:8]  For example:
#+begin_src org
  ,* Top level headline
  ,** Second level
  ,*** Third level
      some text
  ,*** Third level
      more text
  ,* Another top level headline
#+end_src

@@info:@noindent@@ Some people find the many stars too noisy and would
prefer an outline that has whitespace followed by a single star as
headline starters. [[Clean view]], describes a setup to realize this.

@@info:@vindex org-cycle-separator-lines@@
An empty line after the end of a subtree is considered part of it and
will be hidden when the subtree is folded.  However, if you leave at
least two empty lines, one empty line will remain visible after folding
the subtree, in order to structure the collapsed view.  See the
variable ~org-cycle-separator-lines~ to modify this behavior.

** Visibility cycling
   :PROPERTIES:
   :DESCRIPTION: Show and hide, much simplified
   :TEXINFO_MENU_TITLE: Visibility cycling
   :END:
@@info:@cindex cycling, visibility@@
@@info:@cindex visibility cycling@@
@@info:@cindex trees, visibility@@
@@info:@cindex show hidden text@@
@@info:@cindex hide text@@

Outlines make it possible to hide parts of the text in the buffer.
Org uses just two commands, bound to @@info:@key{@@TAB@@info:}@@ and
@@info:@kbd{@@S-@@info:@key{@@TAB@@info:}@@@@info:}@@ to change the visibility in the buffer.

@@info:@cindex subtree visibility states@@
@@info:@cindex subtree cycling@@
@@info:@cindex folded, subtree visibility state@@
@@info:@cindex children, subtree visibility state@@
@@info:@cindex subtree, subtree visibility state@@

#+attr_texinfo: :table-type "table" :indic "@asis"
- @@info:@key{@@TAB@@info:}@@ ~org-cycle~ :: Subtrees can be cycled through three
     states:
     @@info:@kindex TAB@@
     @@info:@findex org-cycle@@
     
     #+begin_src example
       ,-> FOLDED -> CHILDREN -> SUBTREE --.
       '-----------------------------------'
     #+end_src

     @@info:@vindex org-cycle-emulate-tab@@
     @@info:@vindex org-cycle-global-at-bob@@

     By default, the cursor must be on a headline for this to work,
     but this behavior can be modified with the
     ~org-cycle-emulate-tab~ option. When the cursor is at the
     beginning of the buffer and the first line is not a headline,
     then @@info:@key{@@TAB@@info:}@@ actually runs global cycling (see
     below)[fn:9]. Also, when called with a prefix argument
     (@@info:@kbd{@@C-u@@info:@key{@@TAB@@info:}@@@@info:}@@), global cycling is invoked.

- @@info:@kbd{@@S-@@info:@key{@@TAB@@info:}@@@@info:}@@ ~org-global-cycle~ :: 
     @@info:@itemx@@ @@info:@kbd{@@C-u@@info:@key{@@(TAB@@info:}@@@@info:}@@
     /Global Cycling/: Rotate the entire buffer among the states

     @@info:@cindex global visibility states@@
     @@info:@cindex global cycling@@
     @@info:@cindex overview, global visibility state@@
     @@info:@cindex contents, global visibility state@@
     @@info:@cindex show all, global visibility state@@
     @@info:@kindex C-u TAB@@
     @@info:@kindex S-TAB@@
     @@info:@findex org-global-cycle@@

     #+begin_src example
       ,-> OVERVIEW -> CONTENTS -> SHOW ALL --.
       '--------------------------------------'
     #+end_src

     When @@info:@kbd{@@S-@@info:@key{@@TAB@@info:}@@@@info:}@@ is called with a numeric prefix
     argument, ~N~, the CONTENTS view up to headlines of level N will
     be shown. Note that inside tables, @@info:@kbd{@@S-@@info:@key{@@TAB@@info:}@@@@info:}@@ jumps
     to the previous field.

- @@info:@kbd{@@C-u C-u C-u@@info:@key{@@TAB@@info:}@@@@info:}@@ ~show-all~ :: Show all, including
     drawers.

     @@info:@kindex C-u C-u C-u TAB@@
     @@info:@findex show-all@@
     @@info:@cindex show all, command@@
- @@info:@kbd{@@C-c C-r@@info:}@@ ~org-reveal~ :: Reveal context around point,
     showing the current entry, the following heading and the
     hierarchy above.  Useful for working near a location that has
     been exposed by a sparse tree command (see [[Sparse trees]]) or an
     agenda command (see [[Agenda commands]]).  With a prefix argument
     show, on each level, all sibling headings.  With a double prefix
     argument, also show the entire subtree of the parent.

     @@info:@cindex revealing context@@
     @@info:@kindex C-c C-r@@
     @@info:@findex org-reveal@@
- @@info:@kbd{@@C-c C-k@@info:}@@ ~show-branches~ :: Expose all the headings of
     the subtree, CONTENT view for just one subtree.

     @@info:@kindex C-c C-k@@
     @@info:@findex show-branches@@
     @@info:@cindex show branches, command@@
- @@info:@kbd{@@C-c@@info:@key{@@TAB@@info:}@@@@info:}@@ ~show-children~ :: Expose all direct
     children of the subtree.  With a numeric prefix argument, ~N~,
     expose all children down to level N.

     @@info:@kindex C-c TAB@@
     @@info:@findex show-children@@
     @@info:@cindex show children, command@@
- @@info:@kbd{@@C-c C-x b@@info:}@@ ~org-tree-to-indirect-buffer~ :: Show the
     current subtree in an indirect buffer.[fn:10] With a numeric
     prefix argument, ~N~, go up to level N and then take that tree.
     If N is negative then go up that many levels.  With a
     @@info:@kbd{@@C-u@@info:}@@ prefix, do not remove the previously used indirect
     buffer.

     @@info:@kindex C-c C-x b@@
     @@info:@findex org-tree-to-indirect-buffer@@
- @@info:@kbd{@@C-c C-x v@@info:}@@ ~org-copy-visible~ :: Copy the /visible/ text
     in the region into the kill ring.

@@info:@vindex org-startup-folded@@
@@info:@cindex ~overview~, STARTUP keyword@@
@@info:@cindex ~content~, STARTUP keyword@@
@@info:@cindex ~showall~, STARTUP keyword@@
@@info:@cindex ~showeverything~, STARTUP keyword@@

When Emacs first visits an Org file, the global state is set to
OVERVIEW, i.e., only the top level headlines are visible.  This can be
configured through the variable ~org-startup-folded~, or on a
per-file basis by adding one of the following lines anywhere in the
buffer:

#+begin_src org 
  ,#+STARTUP: overview
  ,#+STARTUP: content
  ,#+STARTUP: showall
  ,#+STARTUP: showeverything
#+end_src

@@info:@cindex property, VISIBILITY@@

@@info:@noindent@@ Furthermore, any entries with a @@info:@samp{@@VISIBILITY@@info:}@@
property (see [[Properties%20and%20columns][Properties and Columns]]) will get their visibility
adapted accordingly.  Allowed values for this property are ~folded~,
~children~, ~content~, and ~all~.

#+attr_texinfo: :indic "@asis"
- @@info:@kbd{@@C-u C-u@@info:@key{@@TAB@@info:}@@@@info:}@@ ~org-set-startup-visibility~ :: Switch
     back to the startup visibility of the buffer, i.e., whatever is
     requested by startup options and @@info:@samp{@@VISIBILITY@@info:}@@
     properties in individual entries.

** Motion
   :PROPERTIES:
   :DESCRIPTION: Jumping to other headlines
   :END:
@@info:@cindex motion, between headlines@@
@@info:@cindex jumping, to headlines@@
@@info:@cindex headline navigation@@
The following commands jump to other headlines in the buffer.

#+attr_texinfo: :table-type "table" :indic "@asis"
  - @@info:@kbd{@@C-c C-n@@info:}@@ ~outline-next-visible-heading~ :: Next heading.
       @@info:@kindex C-c C-n@@
       @@info:@findex outline-next-visible-heading@@
  - @@info:@kbd{@@C-c C-p@@info:}@@ ~outline-previous-visible-heading~ :: Previous heading.
       @@info:@kindex C-c C-p@@
       @@info:@findex outline-previous-visible-heading@@
  - @@info:@kbd{@@C-c C-f@@info:}@@ ~org-forward-same-level~ :: Next heading same level.
       @@info:@kindex C-c C-f@@
       @@info:@findex org-forward-same-level@@
  - @@info:@kbd{@@C-c C-b@@info:}@@ ~org-backward-same-level~ :: Previous heading same level.
       @@info:@kindex C-c C-b@@
       @@info:@findex org-backward-same-level@@
  - @@info:@kbd{@@C-c C-u@@info:}@@ ~outline-up-heading~ :: Backward to higher level heading.
       @@info:@kindex C-c C-u@@
       @@info:@findex outline-up-heading@@
  - @@info:@kbd{@@C-c C-j@@info:}@@ ~org-goto~ :: Jump to a different place without
       changing the current outline visibility.  Shows the document
       structure in a temporary buffer, where you can use the
       following keys to find your destination:

       @@info:@kindex C-c C-j@@
       @@info:@findex org-goto@@
       @@info:@vindex org-goto-auto-isearch@@
    - @@info:@key{@@TAB@@info:}@@ ::  Cycle visibility.
    - @@info:@key{@@down@@info:}@@ / @@info:@key{@@up@@info:}@@ ::   Next/previous visible headline.
    - @@info:@key{@@RET@@info:}@@ :: Select this location.
    - @@info:@kbd{@@/@@info:}@@ :: Do a Sparse-tree search
    - Note: The following keys work if you turn off ~org-goto-auto-isearch~
    - n / p ::  Next/previous visible headline.
    - f / b ::   Next/previous headline same level.
    - u  ::  One level up.
    - 0--9 ::  Digit argument.
    - q :: Quit.

@@info:@vindex org-goto-interface@@
@@info:@noindent@@ See also the variable ~org-goto-interface~.

** Structure editing
   :PROPERTIES:
   :DESCRIPTION: Changing sequence and level of headlines
   :TEXINFO_MENU_TITLE: Structure editing
   :END:
@@info:@cindex structure editing@@
@@info:@cindex headline, promotion and demotion@@
@@info:@cindex promotion, of subtrees@@
@@info:@cindex demotion, of subtrees@@
@@info:@cindex subtree, cut and paste@@
@@info:@cindex pasting, of subtrees@@
@@info:@cindex cutting, of subtrees@@
@@info:@cindex copying, of subtrees@@
@@info:@cindex sorting, of subtrees@@
@@info:@cindex subtrees, cut and paste@@

#+attr_texinfo: :table-type "table" :indic "@asis"
  - @@info:@kbd{@@M-@@info:@key{@@RET@@info:}@@@@info:}@@ ~org-insert-heading~ :: Insert new heading
       with same level as current. If the cursor is in a plain list
       item, a new item is created (see [[Plain lists]]). To force
       creation of a new headline, use a prefix argument. When this
       command is used in the middle of a line, the line is split and
       the rest of the line becomes the new headline.[fn:11] If the
       command is used at the beginning of a headline, the new
       headline is created before the current line. If at the
       beginning of any other line, the content of that line is made
       the new heading. If the command is used at the end of a folded
       subtree (i.e., behind the ellipses at the end of a headline),
       then a headline like the current one will be inserted after the
       end of the subtree.

       @@info:@kindex M-RET@@
       @@info:@findex org-insert-heading@@
       @@info:@vindex org-M-RET-may-split-line@@
  - @@info:@kbd{@@C-@@info:@key{@@RET@@info:}@@@@info:}@@ ~org-insert-heading-respect-content~ :: Just
       like @@info:@kbd{@@M-@@info:@key{@@RET@@info:}@@@@info:}@@, except when adding a new heading
       below the current heading, the new heading is placed after the
       body instead of before it. This command works from anywhere in
       the entry.

       @@info:@kindex C-RET@@
       @@info:@findex org-insert-heading-respect-content@@
  - @@info:@kbd{@@M-S-@@info:@key{@@RET@@info:}@@@@info:}@@ ~org-insert-todo-heading~ :: Insert new
       TODO entry with same level as current heading.  See also the
       variable ~org-treat-insert-todo-heading-as-state-change~.

       @@info:@kindex M-S-RET@@
       @@info:@findex org-insert-todo-heading@@
       @@info:@vindex org-treat-insert-todo-heading-as-state-change@@
  - @@info:@kbd{@@C-S-@@info:@key{@@RET@@info:}@@@@info:}@@ ~org-insert-todo-heading-respect-content~ :: Insert
       new TODO entry with same level as current heading. Like
       @@info:@kbd{@@C-@@info:@key{@@RET@@info:}@@@@info:}@@, the new headline will be inserted after
       the current subtree.

       @@info:@kindex C-S-RET@@
       @@info:@findex org-insert-todo-heading-respect-content@@
  - @@info:@key{@@TAB@@info:}@@ ~org-cycle~ :: In a new entry with no text
       yet, the first @@info:@key{@@TAB@@info:}@@ demotes the entry to become a
       child of the previous one. The next @@info:@key{@@TAB@@info:}@@ makes it a
       parent, and so on, all the way to top level. Yet another
       @@info:@key{@@TAB@@info:}@@, and you are back to the initial level.

       @@info:@kindex @key{TAB}@@
       @@info:@findex org-cycle@@
  - @@info:@kbd{@@M-@@info:@key{@@left@@info:}@@@@info:}@@ ~org-do-promote~ :: Promote current heading
       by one level.

       @@info:@kindex M-@@
       @@info:@findex org-do-promote@@
  - @@info:@kbd{@@M-@@info:@key{@@right@@info:}@@@@info:}@@ ~org-do-demote~ :: Demote current heading
       by one level.

       @@info:@kindex M-@@
       @@info:@findex org-do-demote@@
  - @@info:@kbd{@@M-S-@@info:@key{@@left@@info:}@@@@info:}@@ ~org-promote-subtree~ :: Promote the
       current subtree by one level.

       @@info:@kindex M-S-@@
       @@info:@findex org-promote-subtree@@
  - @@info:@kbd{@@M-S-@@info:@key{@@right@@info:}@@@@info:}@@ ~org-demote-subtree~ :: Demote the
       current subtree by one level.

       @@info:@kindex M-S-@@
       @@info:@findex org-demote-subtree@@
  - @@info:@kbd{@@M-S-@@info:@key{@@up@@info:}@@@@info:}@@ ~org-move-subtree-up~ :: Move subtree up
       (swap with previous subtree of same level).

       @@info:@kindex M-S-@@
       @@info:@findex org-move-subtree-up@@
  - @@info:@kbd{@@M-S-@@info:@key{@@down@@info:}@@@@info:}@@ ~org-move-subtree-down~ :: Move subtree
       down (swap with next subtree of same level).

       @@info:@kindex M-S-@@
       @@info:@findex org-move-subtree-down@@
  - @@info:@kbd{@@C-c C-x C-w@@info:}@@ ~org-cut-subtree~ :: Kill subtree, i.e.,
       remove it from buffer but save in kill ring. With a numeric
       prefix argument N, kill N sequential subtrees.

       @@info:@kindex C-c C-x C-w@@
       @@info:@findex org-cut-subtree@@
  - @@info:@kbd{@@C-c C-x M-w@@info:}@@ ~org-copy-subtree~ :: Copy subtree to kill
       ring.  With a numeric prefix argument N, copy the N sequential
       subtrees.

       @@info:@kindex C-c C-x M-w@@
       @@info:@findex org-copy-subtree@@
  - @@info:@kbd{@@C-c C-x C-y@@info:}@@ ~org-paste-subtree~ :: Yank subtree from
       kill ring. This does modify the level of the subtree to make
       sure the tree fits in nicely at the yank position. The yank
       level can also be specified with a numeric prefix argument, or
       by yanking after a headline marker like @@info:@samp{@@****@@info:}@@.

       @@info:@kindex C-c C-x C-y@@
       @@info:@findex org-paste-subtree@@
  - @@info:@kbd{@@C-y@@info:}@@ ~org-yank~ :: Depending on the variables
       ~org-yank-adjusted-subtrees~ and ~org-yank-folded-subtrees~,
       Org's internal ~yank~ command will paste subtrees folded and in
       a clever way, using the same command as @@info:@kbd{@@C-c C-x C-y@@info:}@@.
       With the default settings, no level adjustment will take place,
       but the yanked tree will be folded unless doing so would
       swallow text previously visible.  Any prefix argument to this
       command will force a normal ~yank~ to be executed, with the
       prefix passed along.  A good way to force a normal yank is
       @@info:@kbd{@@C-u C-y@@info:}@@.  If you use ~yank-pop~ after a yank, it
       will yank previous kill items plainly, without adjustment and
       folding.

       @@info:@kindex C-y@@
       @@info:@findex org-yank@@
       @@info:@vindex org-yank-adjusted-subtrees@@
       @@info:@vindex org-yank-folded-subtrees@@ 
  - @@info:@kbd{@@C-c C-x c@@info:}@@ ~org-clone-subtree-with-time-shift~ :: Clone
       a subtree by making a number of sibling copies of it. You will
       be prompted for the number of copies to make, and you can also
       specify if any timestamps in the entry should be shifted.  This
       can be useful, for example, to create a number of tasks related
       to a series of lectures to prepare. For more details, see the
       docstring of the command ~org-clone-subtree-with-time-shift~.

       @@info:@kindex C-c C-x c@@
       @@info:@findex org-clone-subtree-with-time-shift@@
  - @@info:@kbd{@@C-c C-w@@info:}@@ ~org-refile~ :: Refile entry or region to a
       different location. See [[Refile and copy]].

       @@info:@kindex C-c C-w@@
       @@info:@findex org-refile@@
  - @@info:@kbd{@@C-c ^@@info:}@@ ~org-sort~ :: Sort same-level entries.  When
       there is an active region, all entries in the region will be
       sorted.  Otherwise the children of the current headline are
       sorted.  The command prompts for the sorting method, which can
       be alphabetically, numerically, by time (first timestamp with
       active preferred, creation time, scheduled time, deadline
       time), by priority, by TODO keyword (in the sequence the
       keywords have been defined in the setup) or by the value of a
       property.  Reverse sorting is possible as well.  You can also
       supply your own function to extract the sorting key.  With a
       @@info:@kbd{@@C-u@@info:}@@ prefix, sorting will be case-sensitive.

       @@info:@kindex C-c ^@@
       @@info:@findex org-sort@@
  - @@info:@kbd{@@C-x n s@@info:}@@ ~org-narrow-to-subtree~ :: Narrow buffer to
       current subtree.

       @@info:@kindex C-x n s@@
       @@info:@findex org-narrow-to-subtree@@
  - @@info:@kbd{@@C-x n b@@info:}@@ ~org-narrow-to-block~ :: Narrow buffer to
       current block.

       @@info:@kindex C-x n b@@
       @@info:@findex org-narrow-to-block@@
  - @@info:@kbd{@@C-x n w@@info:}@@ ~widen~ :: Widen buffer to remove narrowing.

       @@info:@kindex C-x n w@@
       @@info:@findex widen@@
  - @@info:@kbd{@@C-c *@@info:}@@ ~org-toggle-heading~ :: Turn a normal line or
       plain list item into a headline (so that it becomes a
       subheading at its location). Also turn a headline into a normal
       line by removing the stars. If there is an active region, turn
       all lines in the region into headlines. If the first line in
       the region was an item, turn only the item lines into
       headlines. Finally, if the first line is a headline, remove the
       stars from all headlines in the region.

       @@info:@kindex C-c *@@
       @@info:@findex org-toggle-heading@@

@@info:@cindex region, active@@ 
@@info:@cindex active region@@
@@info:@cindex transient mark mode@@ 

When there is an active region (Transient Mark mode), promotion and
demotion work on all headlines in the region.  To select a region of
headlines, it is best to place both point and mark at the beginning of
a line, mark at the beginning of the first headline, and point at the
line just after the last headline to change.  Note that when the
cursor is inside a table (see [[Tables]]), the Meta-Cursor keys have
different functionality.

** Sparse trees
   :PROPERTIES:
   :DESCRIPTION: Matches embedded in context
   :TEXINFO_MENU_TITLE: Sparse trees
   :END:
@@info:@cindex sparse trees@@
@@info:@cindex trees, sparse@@
@@info:@cindex folding, sparse trees@@
@@info:@cindex occur, command@@
@@info:@vindex org-show-hierarchy-above@@
@@info:@vindex org-show-following-heading@@
@@info:@vindex org-show-siblings@@
@@info:@vindex org-show-entry-below@@

An important feature of Org mode is the ability to construct /sparse
trees/ for selected information in an outline tree, so that the entire
document is folded as much as possible, but the selected information
is made visible along with the headline structure above it.[fn:14]
Just try it out and you will see immediately how it works.

Org mode contains several commands creating such trees, all these
commands can be accessed through a dispatcher:

#+attr_texinfo: :table-type "table" :indic "@asis"
  - @@info:@kbd{@@C-c /@@info:}@@ ~org-sparse-tree~ :: This prompts for an extra
       key to select a sparse-tree creating command.

       @@info:@kindex C-c /@@
       @@info:@findex org-sparse-tree@@
  - @@info:@kbd{@@C-c / r@@info:}@@ ~org-occur~ :: Prompts for a regexp and shows a
       sparse tree with all matches. If the match is in a headline,
       the headline is made visible. If the match is in the body of an
       entry, headline and body are made visible. In order to provide
       minimal context, also the full hierarchy of headlines above the
       match is shown, as well as the headline following the
       match. Each match is also highlighted; the highlights disappear
       when the buffer is changed by an editing command,[fn:13] or by
       pressing @@info:@kbd{@@C-c C-c@@info:}@@. When called with a @@info:@kbd{@@C-u@@info:}@@
       prefix argument, previous highlights are kept, so several calls
       to this command can be stacked.

       @@info:@kindex C-c / r@@
       @@info:@findex org-occur@@
       @@info:@vindex org-remove-highlights-with-change@@
  - @@info:@kbd{@@M-g n@@info:}@@ ~next-error~ ::
       @@info:@itemx@@ @@info:@kbd{@@M-g M-n@@info:}@@
       
       Jump to the next sparse tree match in this buffer.

       @@info:@kindex M-g n@@
       @@info:@kindex M-g M-n@@
       @@info:@findex next-error@@
  - @@info:@kbd{@@M-g p@@info:}@@ ~previous-error~ ::
       @@info:@itemx@@ @@info:@kbd{@@M-g M-p@@info:}@@

       Jump to the previous sparse tree match in this buffer.

       @@info:@kindex M-g p@@
       @@info:@kindex M-g M-p@@
       @@info:@findex previous-error@@
@@info:@vindex org-agenda-custom-commands@@ 

@@info:@noindent@@ For frequently used sparse trees of specific search
strings, you can use the variable ~org-agenda-custom-commands~ to
define fast keyboard access to specific sparse trees. These commands
will then be accessible through the agenda dispatcher
(see [[Agenda%20dispatcher][Agenda Dispatcher]]). For example:

#+header: :exports code
#+header: :eval no
#+begin_src emacs-lisp
  (setq org-agenda-custom-commands
        '(("f" occur-tree "FIXME")))
#+end_src

@@info:@noindent@@ will define the key @@info:@kbd{@@C-c a f@@info:}@@ as a
shortcut for creating a sparse tree matching the string
@@info:@samp{@@FIXME@@info:}@@.

The other sparse tree commands select headings based on TODO keywords,
tags, or properties and will be discussed later in this manual.

@@info:@kindex C-c C-e v@@
@@info:@cindex printing sparse trees@@
@@info:@cindex visible text, printing@@

To print a sparse tree, you can use the Emacs command
~ps-print-buffer-with-faces~ which does not print
invisible parts of the document.[fn:12] Or you can use the command
@@info:@kbd{@@C-c C-e v@@info:}@@ to export only the visible part of the
document and print the resulting file.

** Plain lists
   :PROPERTIES:
   :DESCRIPTION: Additional structure within an entry
   :TEXINFO_MENU_TITLE: Plain lists
   :END:
@@info:@cindex plain lists@@
@@info:@cindex lists, plain@@
@@info:@cindex lists, ordered@@
@@info:@cindex ordered lists@@

Within an entry of the outline tree, hand-formatted lists can provide
additional structure. They also provide a way to create lists of
checkboxes (see [[Checkboxes]]). Org supports editing
such lists, and every exporter (see [[Exporting]])
can parse and format them.

Org knows ordered lists, unordered lists, and description lists.

#+attr_texinfo: :table-type "table" :indic "@bullet"
  - /Unordered/ list items start with ~-~, ~+~, or ~*~ [fn:15] as bullets.

  - /Ordered/ list items start with a numeral followed by either a
    period or a right parenthesis,[fn:23] such as
    ~1.~ or ~1~.[fn:16] If you want a list to
    start with a different value (e.g.: 20), start the text of the
    item with ~[@20]~.[fn:17] Those constructs can be used
    in any item of the list in order to enforce a particular
    numbering.
    @@info:@vindex org-plain-list-ordered-item-terminator@@
    @@info:@vindex org-alphabetical-lists@@

  - /Description/ list items are unordered list items, and contain the
    separator @@info:@samp{@@::@@info:}@@ to distinguish the description
    /term/ from the description.


Items belonging to the same list must have the same indentation on the
first line. In particular, if an ordered list reaches number
@@info:@samp{@@10.@@info:}@@, then the 2--digit numbers must be written
left-aligned with the other numbers in the list. An item ends before
the next line that is less or equally indented than its bullet/number.

@@info:@vindex org-empty-line-terminates-plain-lists@@
A list ends whenever every item has ended, which means before any line less
or equally indented than items at top level.  It also ends before two blank
lines.[fn:18]  In that case, all items are closed.  Here is an example:

#+begin_src texinfo
  ,** Lord of the Rings                                
     My favorite scenes are (in this order)
     1. The attack of the Rohirrim
     2. Eowyn's fight with the witch king
        + this was already my favorite scene in the book
        + I really like Miranda Otto.
     3. Peter Jackson being shot by Legolas
        - on DVD only
        He makes a really funny face when it happens.
     But in the end, no individual scenes matter but the film as a whole.
     Important actors in this film are:
     - @b{Elijah Wood} :: He plays Frodo
     - @b{Sean Austin} :: He plays Sam, Frodo's friend.  I still remember
       him very well from his role as Mikey Walsh in @i{The Goonies}.
#+end_src

Org supports these lists by tuning filling and wrapping commands to
deal with them correctly.[fn:19] To turn this on, put into
@@info:@file{@@.emacs@@info:}@@: ~(require 'filladapt)~}, and by exporting them
properly (see [[Exporting]]). Since indentation is
what governs the structure of these lists, many structural constructs
like ~#+BEGIN_...~ blocks can be indented to signal that they belong
to a particular item.

@@info:@vindex org-list-demote-modify-bullet@@
@@info:@vindex org-list-indent-offset@@
If you find that using a different bullet for a sub-list (than that used for
the current list-level) improves readability, customize the variable
~org-list-demote-modify-bullet~.  To get a greater difference of
indentation between items and theirs sub-items, customize
~org-list-indent-offset~.

@@info:@vindex org-list-automatic-rules@@
The following commands act on items when the cursor is in the first line of
an item (the line with the bullet or number).  Some of them imply the
application of automatic rules to keep list structure intact.  If some of
these actions get in your way, configure ~org-list-automatic-rules~
to disable them individually.


#+attr_texinfo: :table-type "table" :indic "@asis"
  - @@info:@key{@@TAB@@info:}@@ ~org-cycle~ :: 
    @@info:@cindex cycling, in plain lists@@
    @@info:@kindex TAB@@
    @@info:@findex org-cycle@@
    @@info:@vindex org-cycle-include-plain-lists@@       

    Items can be folded just like headline levels. Normally this
    works only if the cursor is on a plain list item. For more
    details, see the variable ~org-cycle-include-plain-lists~. If
    this variable is set to ~integrate~, plain list items will be
    treated like low-level headlines. The level of an item is then
    given by the indentation of the bullet/number. Items are always
    subordinate to real headlines, however; the hierarchies remain
    completely separated. In a new item with no text yet, the first
    @@info:@key{@@TAB@@info:}@@ demotes the item to become a child of the
    previous one. Subsequent @@info:@key{@@TAB@@info:}@@s move the item to
    meaningful levels in the list and eventually get it back to its
    initial position.

  - @@info:@kbd{@@M-@@info:@key{@@RET@@info:}@@@@info:}@@ ~org-insert-heading~ :: 
    @@info:@kindex M-RET@@
    @@info:@findex org-insert-heading@@
    @@info:@vindex org-M-RET-may-split-line@@
    @@info:@vindex org-list-automatic-rules@@

    Insert new item at current level. With a prefix argument, force
    a new heading (see [[Structure editing]]). If this command is used
    in the middle of an item, that item is /split/ in two, and the
    second part becomes the new item.[fn:20] If this command is
    executed /before item's body/, the new item is created /before/
    the current one.

  - @@info:@kbd{@@M-S-@@info:@key{@@RET@@info:}@@@@info:}@@ :: 
    @@info:@kindex M-S-RET@@

    Insert a new item with a checkbox (see Checkboxes).
  
  - @@info:@kbd{@@S-@@info:@key{@@up@@info:}@@@@info:}@@ :: 
    @@info:@itemx@@ @@info:@kbd{@@S-@@info:@key{@@down@@info:}@@@@info:}@@

       Jump to the previous/next item in the current list,[fn:21] but
       only if ~org-support-shift-select~ is off.  If not, you can
       still use paragraph jumping commands like @@info:@kbd{@@C-@@info:@key{@@up@@info:}@@@@info:}@@
       and @@info:@kbd{@@C-@@info:@key{@@down@@info:}@@@@info:}@@ to quite similar effect.
       
       @@info:@kindex S-up@@
       @@info:@kindex S-down@@
       @@info:@cindex shift-selection-mode@@
       @@info:@vindex org-support-shift-select@@
       @@info:@vindex org-list-use-circular-motion@@
  - @@info:@kbd{@@M-@@info:@key{@@up@@info:}@@@@info:}@@ ::
       @@info:@itemx@@ @@info:@kbd{@@M-@@info:@key{@@down@@info:}@@@@info:}@@

       Move the item including subitems up/down[fn:22] (swap with
       previous/next item of same indentation).  If the list is
       ordered, renumbering is automatic.

       @@info:@kindex M-up@@
       @@info:@kindex M-down@@
  - @@info:@kbd{@@M-@@info:@key{@@left@@info:}@@@@info:}@@ :: 
       @@info:@itemx@@ @@info:@kbd{@@M-@@info:@key{@@right@@info:}@@@@info:}@@

       Decrease/increase the indentation of an item, leaving children
       alone.

       @@info:@kindex M-left@@
       @@info:@kindex M-right@@
  - @@info:@kbd{@@M-S-@@info:@key{@@left@@info:}@@@@info:}@@ :: 
       @@info:@itemx@@ @@info:@kbd{@@M-S-@@info:@key{@@right@@info:}@@@@info:}@@

       Decrease/increase the indentation of the item, including
       subitems.  Initially, the item tree is selected based on
       current indentation.  When these commands are executed several
       times in direct succession, the initially selected region is
       used, even if the new indentation would imply a different
       hierarchy.  To use the new hierarchy, break the command chain
       with a cursor motion or so.

       @@info:@kindex M-S-left@@
       @@info:@kindex M-S-right@@

       As a special case, using this command on the very first item of
       a list will move the whole list.  This behavior can be disabled
       by configuring ~org-list-automatic-rules~.  The global
       indentation of a list has no influence on the text /after/ the
       list.
  - @@info:@kbd{@@C-c C-c@@info:}@@ :: If there is a checkbox (see [[Checkboxes]]) in
       the item line, toggle the state of the checkbox.  In any case,
       verify bullets and indentation consistency in the whole list.

       @@info:@kindex C-c C-c@@
  - @@info:@kbd{@@C-c -@@info:}@@ :: Cycle the entire list level through the
       different itemize/enumerate bullets (@@info:@samp{@@-@@info:}@@,
       @@info:@samp{@@+@@info:}@@, @@info:@samp{@@*@@info:}@@, @@info:@samp{@@1.@@info:}@@, @@info:@samp{@@1)@@info:}@@)
       or a subset of them, depending on
       ~org-plain-list-ordered-item-terminator~, the type of list, and
       its indentation.  With a numeric prefix argument N, select the
       Nth bullet from this list.  If there is an active region when
       calling this, selected text will be changed into an item.  With
       a prefix argument, all lines will be converted to list items.
       If the first line already was a list item, any item marker will
       be removed from the list.  Finally, even without an active
       region, a normal line will be converted into a list item.

       @@info:@kindex C-c -@@
       @@info:@vindex org-plain-list-ordered-item-terminator@@
  - @@info:@kbd{@@C-c *@@info:}@@ :: Turn a plain list item into a headline (so
       that it becomes a subheading at its location). See [[Structure%20editing][Structure
       editing]], for a detailed explanation.

       @@info:@kindex C-c *@@
  - @@info:@kbd{@@C-c C-*@@info:}@@ :: Turn the whole plain list into a subtree of
       the current heading.  Checkboxes (see [[Checkboxes]]) will become
       TODO (resp. DONE) keywords when unchecked (resp. checked).

       @@info:@kindex C-c C-*@@
  - @@info:@kbd{@@S-left/right@@info:}@@ :: This command also cycles bullet styles
       when the cursor in on the bullet or anywhere in an item line,
       details depending on ~org-support-shift-select~.

       @@info:@vindex org-support-shift-select@@
       @@info:@kindex S-left@@
       @@info:@kindex S-right@@
  - @@info:@kbd{@@C-c ^@@info:}@@ :: Sort the plain list.  You will be prompted for
       the sorting method: numerically, alphabetically, by time, or by
       custom function.

       @@info:@kindex C-c ^@@

** Drawers
   :PROPERTIES:
   :DESCRIPTION: Tucking stuff away
   :END:
@@info:@cindex drawers@@
@@info:@cindex #+DRAWERS@@
@@info:@cindex visibility cycling, drawers@@

@@info:@vindex org-drawers@@
@@info:@cindex org-insert-drawer@@
@@info:@kindex C-c C-x d@@
Sometimes you want to keep information associated with an entry, but you
normally don't want to see it.  For this, Org mode has /drawers/.
Drawers need to be configured with the variable
~org-drawers~.[fn:24]  Drawers
look like this:

#+begin_src org
  ,** This is a headline
     Still outside the drawer
     :DRAWERNAME:
     This is inside the drawer.
     :END:
     After the drawer.
#+end_src


You can interactively insert drawers at point by calling
~org-insert-drawer~, which is bound to @@info:@kbd{@@C-c C-x d@@info:}@@.
With an active region, this command will put the region inside the
drawer. With a prefix argument, this command calls
~org-insert-property-drawer~ and add a property drawer right
below the current headline. Completion over drawer keywords is also
possible using @@info:@key{@@M-TAB@@info:}@@.

Visibility cycling (see [[Visibility cycling]]) on the headline
will hide and show the entry, but keep the drawer collapsed to a
single line. In order to look inside the drawer, you need to move the
cursor to the drawer line and press @@info:@key{@@TAB@@info:}@@ there. Org mode
uses the ~PROPERTIES~ drawer for storing properties
(see [[Properties%20and%20columns][Properties and Columns]]), and you can also arrange for
state change notes (see [[Tracking TODO state changes]) and
clock times (see [[Clocking work time]) to be stored in a drawer
~LOGBOOK~. If you want to store a quick note in the LOGBOOK
drawer, in a similar way to state changes, use

#+attr_texinfo: :table-type "table" :indic "@asis"
 - @@info:@kbd{@@C-c C-z@@info:}@@ :: Add a time-stamped note to the LOGBOOK
      drawer.

      @@info:@kindex C-c C-z@@

** Blocks
   :PROPERTIES:
   :DESCRIPTION: Folding blocks
   :END:
@@info:@vindex org-hide-block-startup@@ 
@@info:@cindex blocks, folding@@

Org mode uses begin...end blocks for various purposes from including
source code examples (see [[Literal examples]]) to capturing time logging
information (see [[Clocking work time]).  These blocks can be folded
and unfolded by pressing TAB in the begin line.  You can also get all
blocks folded at startup by configuring the variable
~org-hide-block-startup~ or on a per-file basis by using

@@info:@cindex @code{hideblocks}, STARTUP keyword@@
@@info:@cindex @code{nohideblocks}, STARTUP keyword@@
#+begin_src org
  ,#+STARTUP: hideblocks
  ,#+STARTUP: nohideblocks
#+end_src

** Creating Footnotes
   :PROPERTIES:
   :DESCRIPTION: Define footnotes in Org syntax
   :END:
@@info:@cindex footnotes@@

Org mode supports the creation of footnotes. In contrast to the
@@info:@file{@@footnote.el@@info:}@@ package, Org mode's footnotes are designed for
work on a larger document, not only for one-off documents like emails.
The basic syntax is similar to the one used by
@@info:@file{@@footnote.el@@info:}@@, i.e., a footnote is defined in a paragraph
that is started by a footnote marker in square brackets in column 0,
no indentation allowed. If you need a paragraph break inside a
footnote, use the LaTeX idiom ~\par~. The footnote reference is simply
the marker in square brackets, inside text. For example:

#+begin_example
The Org homepage[fn:1] now looks a lot better than it used to.
...
[fn:1] The link is: http://orgmode.org
#+end_example

Org mode extends the number-based syntax to /named/ footnotes and
optional inline definition. Using plain numbers as markers (as
@@info:@file{@@footnote.el@@info:}@@ does) is supported for backward compatibility,
but not encouraged because of possible conflicts with {{{latex}}}
snippets (see [[Embedded%20LaTeX][Embedded LaTeX]]). Here are
the valid references:

#+attr_texinfo: :table-type "table" :indic "@asis"
  - ~[1]~ :: A plain numeric footnote marker. Compatible with
           @@info:@file{@@footnote.el@@info:}@@, but not recommended because
           something like @@info:@samp{@@[1]@@info:}@@ could easily be part of a
           code snippet.

  - ~[fn:name]~ :: A named footnote reference, where ~name~ is
                 a unique label word, or, for simplicity of automatic
                 creation, a number.
  - ~[fn:: This is the inline definition of this footnote]~ :: A
       {{{latex}}}-like anonymous footnote where the definition
       is given directly at the reference point.
  - ~[fn:name: a definition]~ :: An inline definition of a footnote,
       which also specifies a name for the note. Since Org allows
       multiple references to the same note, you can then use
       ~[fn:name]~ to create additional references.


@@info:@vindex org-footnote-auto-label@@
Footnote labels can be created automatically, or you can create names
yourself. This is handled by the variable
~org-footnote-auto-label~ and its corresponding
~#+STARTUP~ keywords. See the docstring of that variable for
details.

@@info:@noindent@@ The following command handles footnotes:

#+attr_texinfo: :table-type "table" :indic "@kbd"
  - C-c C-x f :: The footnote action command.
                 @@info:@kindex C-c C-x f@@

                 When the cursor is on a footnote reference, jump to the
                 definition.  When it is at a definition, jump to the
                 (first) reference.

                 @@info:@vindex org-footnote-define-inline@@
                 @@info:@vindex org-footnote-section@@
                 @@info:@vindex org-footnote-auto-adjust@@

                 Otherwise, create a new footnote.  Depending on the
                 variable ~org-footnote-define-inline~,[fn:26] the
                 definition will be placed right into the text as part
                 of the reference, or separately into the location
                 determined by the variable ~org-footnote-section~.

                 When this command is called with a prefix argument, a
                 menu of additional options is offered:

    - s ::  Sort the footnote definitions by reference sequence.
            During editing, Org makes no effort to sort footnote
            definitions into a particular sequence.  If you want them
            sorted, use this command, which will also move entries
            according to ~org-footnote-section~.  Automatic sorting
            after each insertion/deletion can be configured using the
            variable ~org-footnote-auto-adjust~.
    - r ::  Renumber the simple ~fn:N~ footnotes.  Automatic
            renumbering after each insertion/deletion can be
            configured using the variable ~org-footnote-auto-adjust~.
    - S ::  Short for first ~r~, then ~s~ action.
    - n ::  Normalize the footnotes by collecting all definitions
            (including inline definitions) into a special section, and
            then numbering them in sequence.  The references will then
            also be numbers.  This is meant to be the final step
            before finishing a document (e.g.: sending off an email).
            The exporters do this automatically, and so could
            something like ~message-send-hook~.
    - d ::  Delete the footnote at point, and all definitions of and
            references to it.

            Depending on the variable
            ~org-footnote-auto-adjust~,[fn:25] renumbering and sorting
            footnotes can be automatic after each insertion or
            deletion.

  - C-c C-c :: If the cursor is on a footnote reference, jump to the
               definition.  If it is a the definition, jump back to
               the reference.  When called at a footnote location with
               a prefix argument, offer the same menu as @@info:@kbd{@@C-c C-x f@@info:}@@.

    @@info:@kindex C-c C-c@@

  - C-c C-o  @@info:@r{or}@@ mouse-1/2 :: Footnote labels are also
       links to the corresponding definition/reference, and you can
       use the usual commands to follow these links.

    @@info:@kindex C-c C-o@@
    @@info:@kindex mouse-1@@
    @@info:@kindex mouse-2@@

** Orgstruct mode 
   :PROPERTIES:
   :DESCRIPTION: Structure editing outside Org
   :TEXINFO_MENU_TITLE: Orgstruct mode
   :END:
@@info:@cindex Orgstruct mode@@
@@info:@cindex minor mode for structure editing@@

If you like the intuitive way the Org mode structure editing and list
formatting works, you might want to use these commands in other modes
like Text mode or Mail mode as well.  The minor mode ~orgstruct-mode~
makes this possible.  Toggle the mode with @@info:@kbd{@@M-x orgstruct-mode@@info:}@@, or turn it on by default, for example in Message
mode, with one of:

#+header: :exports code
#+header: :eval no
#+begin_src emacs-lisp
  (add-hook 'message-mode-hook 'turn-on-orgstruct)
  (add-hook 'message-mode-hook 'turn-on-orgstruct++)
#+end_src

When this mode is active and the cursor is on a line that looks to Org
like a headline or the first line of a list item, most structure
editing commands will work, even if the same keys normally have
different functionality in the major mode you are using.  If the
cursor is not in one of those special lines, Orgstruct mode lurks
silently in the shadows.  When you use ~orgstruct++-mode~, Org will
also export indentation and autofill settings into that mode, and
detect item context after the first line of an item.

* FIXED Tables
  :PROPERTIES:
  :DESCRIPTION: Pure magic for quick formatting
  :END:
@@info:@cindex tables@@
@@info:@cindex editing tables@@

Org comes with a fast and intuitive table editor.  Spreadsheet-like
calculations are supported using the Emacs @@info:@file{@@calc@@info:}@@ package
[[info:calc][Calc]].

** Built-in table editor 
   :PROPERTIES:
   :DESCRIPTION: Simple tables
   :END:
@@info:@cindex table editor, built-in@@

Org makes it easy to format tables in plain ASCII. Any line with
@@info:@samp{@@|@@info:}@@ as the first non-whitespace character is considered part
of a table. @@info:@samp{@@|@@info:}@@ is also the column separator.[fn:27] A table
might look like this:

#+begin_src org
  | Name  | Phone | Age |
  |-------+-------+-----|
  | Peter |  1234 |  17 |
  | Anna  |  4321 |  25 |
#+end_src


A table is re-aligned automatically each time you press @@info:@key{@@TAB@@info:}@@
or @@info:@key{@@RET@@info:}@@ or @@info:@kbd{@@C-c C-c@@info:}@@ inside the table.
@@info:@key{@@TAB@@info:}@@ also moves to the next field (@@info:@key{@@RET@@info:}@@ to the
next row) and creates new table rows at the end of the table or before
horizontal lines. The indentation of the table is set by the first
line. Any line starting with @@info:@samp{@@|-@@info:}@@ is considered as a
horizontal separator line and will be expanded on the next re-align to
span the whole table width. So, to create the above table, you would
only type

#+begin_src org
  |Name|Phone|Age|
  |-
#+end_src


@@info:@noindent@@ and then press @@info:@key{@@TAB@@info:}@@ to align the table and
start filling in fields. Even faster would be to type
~|Name|Phone|Age~ followed by @@info:@kbd{@@C-c@@info:@key{@@RET@@info:}@@@@info:}@@.

@@info:@vindex org-enable-table-editor@@
@@info:@vindex org-table-auto-blank-field@@ 

When typing text into a field, Org treats @@info:@key{@@DEL@@info:}@@,
@@info:@key{@@Backspace@@info:}@@, and all character keys in a special way, so that
inserting and deleting avoids shifting other fields.  Also, when
typing /immediately after the cursor was moved into a new field with
{{{key(TAB)}}}, {{{kbdkey(S-,TAB)}}} or {{{key(RET)}}}/, the field is
automatically made blank.  If this behavior is too unpredictable for
you, configure the variables ~org-enable-table-editor~ and
~code(org-table-auto-blank-field~.
**** Creation and Conversion
#+attr_texinfo: :table-type "table" :indic "@asis"
- @@info:@kbd{@@C-c |@@info:}@@ ~org-table-create-or-convert-from-region~ :: Convert
     the active region to table.  If every line contains at least one
     TAB character, the function assumes that the material is tab
     separated.  If every line contains a comma, comma-separated
     values (CSV) are assumed.  If not, lines are split at whitespace
     into fields.  You can use a prefix argument to force a specific
     separator: @@info:@kbd{@@C-u@@info:}@@ forces CSV, @@info:@kbd{@@C-u C-u@@info:}@@ forces
     TAB, and a numeric argument N indicates that at least N
     consecutive spaces, or alternatively a TAB will be the separator.
     @@info:@*@@ If there is no active region, this command creates an
     empty Org table.  But it is easier just to start typing, like
     @@info:@kbd{@@|Name|Phone|Age@@info:@key{@@RET@@info:}@@@@info:}@@ @@info:@kbd{@@|-@@info:@key{@@TAB@@info:}@@@@info:}@@.

     @@info:@kindex C-c |@@
     @@info:@findex org-table-create-or-convert-from-region@@
**** Re-aligning and field motion
#+attr_texinfo: :table-type "table" :indic "@asis"
- @@info:@kbd{@@C-c C-c@@info:}@@ ~org-table-align~ :: Re-align the table without
     moving the cursor.

     @@info:@kindex C-c C-c@@
     @@info:@findex org-table-align@@
- @@info:@kbd{@@<TAB>@@info:}@@ ~org-table-next-field~ :: Re-align the table, move
     to the next field.  Creates a new row if necessary.

     @@info:@kindex <TAB>@@
     @@info:@findex org-table-next-field@@
- @@info:@kbd{@@S-@@info:@key{@@TAB@@info:}@@@@info:}@@ ~org-table-previous-field~ :: Re-align, move to
     previous field.

     @@info:@kindex S-TAB@@
     @@info:@findex org-table-previous-field@@
- @@info:@key{@@RET@@info:}@@ ~org-table-next-row~ :: Re-align the table and move
     down to next row.  Creates a new row if necessary.  At the
     beginning or end of a line, @@info:@key{@@RET@@info:}@@ still does NEWLINE, so
     it can be used to split a table.

     @@info:@kindex RET@@
     @@info:@findex org-table-next-row@@
- @@info:@kbd{@@M-a@@info:}@@ ~org-table-beginning-of-field~ :: Move to beginning
     of the current table field, or on to the previous field.

     @@info:@kindex M-a@@
     @@info:@findex org-table-beginning-of-field@@
- @@info:@kbd{@@M-e@@info:}@@ ~org-table-end-of-field~ :: Move to end of the
     current table field, or on to the next field.

     @@info:@kindex M-e@@
     @@info:@findex org-table-end-of-field@@
**** Column and row editing
#+attr_texinfo: :table-type "table" :indic "@asis"
- @@info:@kbd{@@M-@@info:@key{@@left@@info:}@@@@info:}@@ ~org-table-move-column-left~ ::
     @@info:@itemx@@ @@info:@kbd{@@M-@@info:@key{@@right@@info:}@@@@info:}@@ ~org-table-move-column-right~ 
     
     Move the current column left/right.

     @@info:@kindex M-left@@
     @@info:@kindex M-right@@
     @@info:@findex org-table-move-column-left@@
     @@info:@findex org-table-move-column-right@@
- @@info:@kbd{@@M-S-@@info:@key{@@left@@info:}@@@@info:}@@ ~org-table-delete-column~ :: Kill the
     current column.

     @@info:@kindex M-S-left@@
     @@info:@findex org-table-delete-column@@
- @@info:@kbd{@@M-S-@@info:@key{@@right@@info:}@@@@info:}@@ ~org-table-insert-column~ :: Insert a new
     column to the left of the cursor position.

     @@info:@kindex M-S-right@@
     @@info:@findex org-table-insert-column@@
- @@info:@kbd{@@M-@@info:@key{@@up@@info:}@@@@info:}@@ ~org-table-move-row-up~ ::
     @@info:@itemx@@ @@info:@kbd{@@M-@@info:@key{@@down@@info:}@@@@info:}@@ ~org-table-move-row-down~
     
     Move the current row up/down.

     @@info:@kindex M-up@@
     @@info:@kindex M-down@@
     @@info:@findex org-table-move-row-up@@
     @@info:@findex org-table-move-row-down@@
- @@info:@kbd{@@M-S-@@info:@key{@@up@@info:}@@@@info:}@@ ~org-table-kill-row~ :: Kill the current row
     or horizontal line.

     @@info:@kindex M-S-up@@
     @@info:@findex org-table-kill-row@@
- @@info:@kbd{@@M-S-@@info:@key{@@down@@info:}@@@@info:}@@ ~org-table-insert-row~ :: Insert a new row
     above the current row.  With a prefix argument, the line is
     created below the current one.

     @@info:@kindex M-S-down@@
     @@info:@findex org-table-insert-row@@
- @@info:@kbd{@@C-c -@@info:}@@ ~org-table-insert-hline~ :: Insert a horizontal
     line below current row.  With a prefix argument, the line is
     created above the current line.

     @@info:@kindex C-c -@@
     @@info:@findex org-table-insert-hline@@
- @@info:@kbd{@@C-c@@info:@key{@@RET@@info:}@@@@info:}@@ ~org-table-hline-and-move~ :: Insert a
     horizontal line below current row, and move the cursor into the
     row below that line.

     @@info:@kindex C-c RET@@
     @@info:@findex org-table-hline-and-move@@
- @@info:@kbd{@@C-c ^@@info:}@@ ~org-table-sort-lines~ :: Sort the table lines in
     the region.  The position of point indicates the column to be
     used for sorting, and the range of lines is the range between the
     nearest horizontal separator lines, or the entire table.  If
     point is before the first column, you will be prompted for the
     sorting column.  If there is an active region, the mark specifies
     the first line and the sorting column, while point should be in
     the last line to be included into the sorting.  The command
     prompts for the sorting type (alphabetically, numerically, or by
     time).  When called with a prefix argument, alphabetic sorting
     will be case-sensitive.

     @@info:@kindex C-c ^@@
     @@info:@findex org-table-sort-lines@@
**** Regions
#+attr_texinfo: :table-type "table" :indic "@asis"
- @@info:@kbd{@@C-c C-x M-w@@info:}@@ ~org-table-copy-region~ :: Copy a rectangular
     region from a table to a special clipboard.  Point and mark
     determine edge fields of the rectangle.  If there is no active
     region, copy just the current field.  The process ignores
     horizontal separator lines.

     @@info:@kindex C-c C-x M-w@@
     @@info:@findex org-table-copy-region@@
- @@info:@kbd{@@C-c C-x C-w@@info:}@@ ~org-table-cut-region~ :: Copy a rectangular
     region from a table to a special clipboard, and blank all fields
     in the rectangle.  So this is the ``cut'' operation.

     @@info:@kindex C-c C-x C-w@@
     @@info:@findex org-table-cut-region@@
- @@info:@kbd{@@C-c C-x C-y@@info:}@@ ~org-table-paste-rectangle~ :: Paste a
     rectangular region into a table.  The upper left corner ends up
     in the current field.  All involved fields will be overwritten.
     If the rectangle does not fit into the present table, the table
     is enlarged as needed.  The process ignores horizontal separator
     lines.

     @@info:@kindex C-c C-x C-y@@
     @@info:@findex org-table-paste-rectangle@@
- @@info:@kbd{@@M-@@info:@key{@@RET@@info:}@@@@info:}@@ ~org-table-wrap-region~ :: Split the current
     field at the cursor position and move the rest to the line below.
     If there is an active region, and both point and mark are in the
     same column, the text in the column is wrapped to minimum width
     for the given number of lines.  A numeric prefix argument may be
     used to change the number of desired lines.  If there is no
     region, but you specify a prefix argument, the current field is
     made blank, and the content is appended to the field above.

     @@info:@kindex M-RET@@
     @@info:@findex org-table-wrap-region@@
**** Calculations
#+attr_texinfo: :table-type "table" :indic "@asis"
@@info:@cindex formula, in tables@@
@@info:@cindex calculations, in tables@@
@@info:@cindex region, active@@
@@info:@cindex active region@@
@@info:@cindex transient mark mode@@
- @@info:@kbd{@@C-c +@@info:}@@ ~org-table-sum~ :: Sum the numbers in the current
     column, or in the rectangle defined by the active region.  The
     result is shown in the echo area and can be inserted with
     @@info:@kbd{@@C-y@@info:}@@.

  @@info:@kindex C-c +@@
  @@info:@findex org-table-sum@@
- @@info:@kbd{@@S-@@info:@key{@@RET@@info:}@@@@info:}@@ ~org-table-copy-down~ :: When current field is
     empty, copy from first non-empty field above.  When not empty,
     copy current field down to next row and move cursor along with
     it.  Depending on the variable ~org-table-copy-increment~,
     integer field values will be incremented during copy.  Integers
     that are too large will not be incremented.  Also, a ~0~ prefix
     argument temporarily disables the increment.  This key is also
     used by shift-selection and related modes (see [[Conflicts]]).

     @@info:@kindex S-RET@@
     @@info:@findex org-table-copy-down@@
     @@info:@vindex org-table-copy-increment@@

**** Misc
#+attr_texinfo: :table-type "table" :indic "@asis"
- @@info:@kbd{@@C-c `@@info:}@@ ~org-table-edit-field~ :: Edit the current field in
     a separate window.  This is useful for fields that are not fully
     visible (see [[Column width and alignment]]).  When called with a
     @@info:@kbd{@@C-u@@info:}@@ prefix, just make the full field visible, so that
     it can be edited in place.  When called with two @@info:@kbd{@@C-u@@info:}@@
     prefixes, make the editor window follow the cursor through the
     table and always show the current field.  The follow mode exits
     automatically when the cursor leaves the table, or when you
     repeat this command with @@info:@kbd{@@C-u C-u C-c `@@info:}@@.

     @@info:@kindex C-c `@@
     @@info:@findex org-table-edit-field@@
- @@info:@kbd{@@M-x org-table-import@@info:}@@ :: Import a file as a table.  The
     table should be TAB or whitespace separated.  Use, for example,
     to import a spreadsheet table or data from a database, because
     these programs generally can write TAB-separated text files.
     This command works by inserting the file into the buffer and then
     converting the region to a table.  Any prefix argument is passed
     on to the converter, which uses it to determine the separator.

- @@info:@kbd{@@C-c |@@info:}@@ ~org-table-create-or-convert-from-region~ :: Tables
     can also be imported by pasting tabular text into the Org buffer,
     selecting the pasted text with @@info:@kbd{@@C-x C-x@@info:}@@ and then using
     the @@info:@kbd{@@C-c |@@info:}@@ command (see above under /Creation and
     conversion/).

     @@info:@kindex C-c |@@
     @@info:@findex org-table-create-or-convert-from-region@@
- @@info:@kbd{@@M-x org-table-export@@info:}@@ :: Export the table, by default as a
     TAB-separated file.  Use for data exchange with, for example,
     spreadsheet or database programs.  The format used to export the
     file can be configured in the variable
     ~org-table-export-default-format~.  You may also use properties
     ~TABLE_EXPORT_FILE~ and ~TABLE_EXPORT_FORMAT~ to specify the file
     name and the format for table export in a subtree.  Org supports
     quite general formats for exported tables.  The exporter format
     is the same as the format used by Orgtbl radio tables, see
     [[Translator functions], for a detailed description.

     @@info:@findex org-table-export@@
     @@info:@vindex org-table-export-default-format@@

If you don't like the automatic table editor because it gets in your
way on lines which you would like to start with @@info:@samp{@@|@@info:}@@, you can
turn it off with

#+header: :exports code
#+header: :eval no
#+begin_src emacs-lisp
(setq org-enable-table-editor nil)
#+end_src


@@info:@noindent@@ Then the only table command that still works is
@@info:@kbd{@@C-c C-c@@info:}@@ to do a manual re-align.

** Column width and alignment
   :PROPERTIES:
   :DESCRIPTION: Overrule the automatic settings
   :END:
@@info:@cindex narrow columns in tables@@
@@info:@cindex alignment in tables@@

The width of columns is automatically determined by the table editor.
And also the alignment of a column is determined automatically from
the fraction of number-like versus non-number fields in the column.

Sometimes a single field or a few fields need to carry more text,
leading to inconveniently wide columns.  Or maybe you want to make a
table with several columns having a fixed width, regardless of
content.  To set the width of a column, one field anywhere in the
column may contain just the string @@info:@samp{@@<N>@@info:}@@ where @@info:@samp{@@N@@info:}@@
is an integer specifying the width of the column in characters.[fn:28]
The next re-align will then set the width of this column to this
value.

#+begin_example
  |---+------------------------------|               |---+--------|
  |   |                              |               |   | <6>    |
  | 1 | one                          |               | 1 | one    |
  | 2 | two                          |     ----\     | 2 | two    |
  | 3 | This is a long chunk of text |     ----/     | 3 | This=> |
  | 4 | four                         |               | 4 | four   |
  |---+------------------------------|               |---+--------|
#+end_example

@@info:@noindent@@ Fields that are wider become clipped and end in the
string @@info:@samp{@@=>@@info:}@@.  Note that the full text is still in the buffer
but is hidden.  To see the full text, hold the mouse over the
field---a tool-tip window will show the full content.  To edit such a
field, use the command @@info:@kbd{@@C-c `@@info:}@@ (that is @@info:@kbd{@@C-c@@info:}@@
followed by the backquote).  This will open a new window with the full
field.  Edit it and finish with @@info:@kbd{@@C-c C-c@@info:}@@.

@@info:@vindex org-startup-align-all-tables@@ 

When visiting a file containing a table with narrowed columns, the
necessary character hiding has not yet happened, and the table needs
to be aligned before it looks nice.  Setting the option
~org-startup-align-all-tables~ will realign all tables in a file upon
visiting, but also slow down startup.  You can also set this option on
a per-file basis with:

#+begin_src org
  ,#+STARTUP: align
  ,#+STARTUP: noalign
#+end_src

If you would like to overrule the automatic alignment of number-rich
columns to the right and of string-rich columns to the left, you can
use @@info:@samp{@@<r>@@info:}@@, @@info:@samp{@@<c>@@info:}@@[fn:29] or @@info:@samp{@@<l>@@info:}@@ in a
similar fashion.  You may also combine alignment and field width like
this: @@info:@samp{@@<l10>@@info:}@@.

A line that only contains these formatting cookies will be removed
automatically when exporting the document.

** Column groups                
   :PROPERTIES:
   :DESCRIPTION: Grouping to trigger vertical lines
   :END:
@@info:@cindex grouping columns in tables@@

When Org exports tables, it does so by default without vertical lines
because that is visually more satisfying in general.  Occasionally
however, vertical lines can be useful to structure a table into groups
of columns, much like horizontal lines can do for groups of rows.  In
order to specify column groups, you can use a special row where the
first field contains only @@info:@samp{@@/@@info:}@@.  The further fields can
either contain @@info:@samp{@@<@@info:}@@ to indicate that this column should start
a group, @@info:@samp{@@>@@info:}@@ to indicate the end of a column, or
@@info:@samp{@@<>@@info:}@@ (no space between @@info:@samp{@@<@@info:}@@ and @@info:@samp{@@>@@info:}@@) to
make a column a group of its own.  Boundaries between column groups
will upon export be marked with vertical lines.  Here is an example:

#+begin_src org
  | N | N^2 | N^3 | N^4 | sqrt(n) | sqrt[4](N) |
  |---+-----+-----+-----+---------+------------|
  | / |   < |     |   > |       < |          > |
  | 1 |   1 |   1 |   1 |       1 |          1 |
  | 2 |   4 |   8 |  16 |  1.4142 |     1.1892 |
  | 3 |   9 |  27 |  81 |  1.7321 |     1.3161 |
  |---+-----+-----+-----+---------+------------|
  ,#+TBLFM: $2=$1^2::$3=$1^3::$4=$1^4::$5=sqrt($1)::$6=sqrt(sqrt(($1)))
#+end_src

It is also sufficient to just insert the column group starters after
every vertical line you would like to have:

#+begin_src org
  |  N | N^2 | N^3 | N^4 | sqrt(n) | sqrt[4](N) |
  |----+-----+-----+-----+---------+------------|
  | /  | <   |     |     | <       |            |
#+end_src

** The Orgtbl mode minor mode
   :PROPERTIES:
   :DESCRIPTION: The table editor as minor mode
   :TEXINFO_MENU_TITLE: Ogtbl mode
   :END:
@@info:@cindex Orgtbl mode@@
@@info:@cindex minor mode for tables@@

If you like the intuitive way the Org table editor works, you might
also want to use it in other modes like Text mode or Mail mode.  The
minor mode Orgtbl mode makes this possible.  You can always toggle the
mode with @@info:@kbd{@@M-x orgtbl-mode@@info:}@@.  To turn it on by default, for
example in Message mode, use

#+header: :exports code
#+header: :eval no
#+begin_src emacs-lisp
(add-hook 'message-mode-hook 'turn-on-orgtbl)
#+end_src

Furthermore, with some special setup, it is possible to maintain
tables in arbitrary syntax with Orgtbl mode.  For example, it is
possible to construct {{{latex}}} tables with the underlying ease and
power of Orgtbl mode, including spreadsheet capabilities.  For
details, see [[Tables in arbitrary syntax]].

** The spreadsheet
   :PROPERTIES:
   :DESCRIPTION: The table editor has spreadsheet capabilities
   :END:
@@info:@cindex calculations, in tables@@
@@info:@cindex spreadsheet capabilities@@
@@info:@cindex @file{calc} package@@

The table editor makes use of the Emacs @@info:@file{@@calc@@info:}@@ package to
implement spreadsheet-like capabilities.  It can also evaluate Emacs
Lisp forms to derive fields from other fields.  While fully featured,
Org's implementation is not identical to other spreadsheets.  For
example, Org knows the concept of a /column formula/ that will be
applied to all non-header fields in a column without having to copy
the formula to each relevant field.  There is also a formula debugger,
and a formula editor with features for highlighting fields in the
table corresponding to the references at the point in the formula,
moving these references by arrow keys

*** References
    :PROPERTIES:
    :DESCRIPTION: How to refer to another field or range
    :END:
@@info:@cindex references@@

To compute fields in the table from other fields, formulas must
reference other fields or ranges.  In Org, fields can be referenced by
name, by absolute coordinates, and by relative coordinates.  To find
out what the coordinates of a field are, press @@info:@kbd{@@C-c ?@@info:}@@ in
that field, or press @@info:@kbd{@@C-c @}@@info:}@@ to toggle the display of a
grid.

**** Field references
@@info:@cindex field references@@
@@info:@cindex references, to fields@@

Formulas can reference the value of another field in two ways.  Like
in any other spreadsheet, you may reference fields with a
letter/number combination like ~B3~, meaning the 2nd field in the 3rd
row.  @@info:@vindex org-table-use-standard-references@@ However, Org
prefers[fn:31] to use another, more general representation that looks
like this:

#+begin_example
 @ROW$COLUMN
#+end_example

Column specifications can be absolute like ~$1~, ~$2~ ,... ~$N~, or
relative to the current column (i.e., the column of the field which is
being computed) like ~$+1~ or ~$-2~. ~$<~ and ~$>~ are immutable
references to the first and last column, respectively, and you can use
~$>>>~ to indicate the third column from the right.

The row specification only counts data lines and ignores horizontal
separator lines (hlines). Like with columns, you can use absolute row
numbers ~@1~, ~@2~ ,... ~@N~, and row numbers relative to the current
row like ~@+3~ or ~@-1~. ~@<~ and ~@>~ are immutable references the
first and last row in the table, respectively.[fn:34] You may also
specify the row relative to one of the hlines: ~@I~ refers to the
first hline, ~@II~ to the second, etc@. ~@-I~ refers to the first such
line above the current line, ~@+I~ to the first such line below the
current line. You can also write ~@III+2~ which is the second data
line after the third hline in the table.

~@0~ and ~$0~ refer to the current row and column, respectively, i.e.,
to the row/column for the field being computed. Also, if you omit
either the column or the row part of the reference, the current
row/column is implied.

Org's references with /unsigned/ numbers are fixed references in the
sense that if you use the same reference in the formula for two
different fields, the same field will be referenced each time.  Org's
references with /signed/ numbers are floating references because the
same reference operator can reference different fields depending on
the field being calculated by the formula.

Here are a few examples:

#+attr_texinfo: :table-type "table" :indic "@code"
  - @2$3 :: 2nd row, 3rd column (same as ~C2~)
  - $5 :: column 5 in the current row (same as ~E&~)
  - @2 :: current column, row 2
  - @-1$-3 :: the field one row up, three columns to the left
  - @-I$2 :: field just under hline above current row, column 2
  - @>$5 :: field in the last row, in column 5

**** Range references
@@info:@cindex range references@@
@@info:@cindex references, to ranges@@

You may reference a rectangular range of fields by specifying two
field references connected by two dots ~..~.  If both fields are in
the current row, you may simply use ~$2..$7~, but if at least one
field is in a different row, you need to use the general ~@row$column~
format at least for the first field (i.e., the reference must start
with ~@~ in order to be interpreted correctly).  Examples:

#+attr_texinfo: :table-type "table" :indic "@code"
  - $1..$3      :: first three fields in the current row
  - $P..$Q      :: range, using column names (see under Advanced)
  - $<<<..$>>   :: start in third column, continue to the one but last
  - @2$1..@4$3  ::  six fields between these two fields (same as
                   ~A2..C4~)
  - @-1$-2..@-1 :: three numbers from the column to the left, 2 up to
                   current row
  - @I..II      ::  between first and second hline, short for ~@I..@II~


@@info:@noindent@@ Range references return a vector of values that can be
fed into Calc vector functions.  Empty fields in ranges are normally
suppressed, so that the vector contains only the non-empty fields (but
see the ~E~ mode switch below).  If there are no non-empty fields,
@@info:@samp{@@[0]@@info:}@@ is returned to avoid syntax errors in formulas.

**** Field coordinates in formulas
@@info:@cindex field coordinates@@
@@info:@cindex coordinates, of field@@
@@info:@cindex row, of field coordinates@@
@@info:@cindex column, of field coordinates@@

For Calc formulas and Lisp formulas ~@#~ and ~$#~ can be used to get
the row or column number of the field where the formula result goes.
The traditional Lisp formula equivalents are ~org-table-current-dline~
and ~org-table-current-column~.  Examples:

#+attr_texinfo: :table-type "table" :indic "@code"
  - if(@# % 2, $#, string("")) :: column number on odd lines only
  - $3 = remote(FOO, @@#$2)    :: copy column 2 from table FOO into
       column 3 of the current table

@@info:@noindent@@ For the second example, table FOO must have at least as
many rows as the current table. Note that this is inefficient for
large number of rows.[fn:30]

**** Named references
@@info:@cindex named references@@
@@info:@cindex references, named@@
@@info:@cindex name, of column or field@@
@@info:@cindex constants, in calculations@@
@@info:@cindex #+CONSTANTS@@
@@info:@vindex org-table-formula-constants@@

@@info:@samp{@@$name@@info:}@@ is interpreted as the name of a column, parameter or
constant.  Constants are defined globally through the variable
~org-table-formula-constants~, and locally (for the file) through a
line like

#+begin_src org
  ,#+CONSTANTS: c=299792458. pi=3.14 eps=2.4e-6
#+end_src

@@info:@noindent@@ 
@@info:@vindex constants-unit-system@@
@@info:@pindex constants.el@@ 

Also properties (see [[Properties%20and%20columns][Properties and columns]]) can be used as constants
in table formulas: for a property @@info:@samp{@@:Xyz:@@info:}@@ use the name
@@info:@samp{@@$PROP_Xyz@@info:}@@, and the property will be searched in the
current outline entry and in the hierarchy above it. If you have the
@@info:@file{@@constants.el@@info:}@@ package, it will also be used to resolve
constants, including natural constants like ~$h~ for Planck's
constant, and units like ~$km~ for kilometers. [fn:35] Column names
and parameters can be specified in special table lines. These are
described below, see [[Advanced features]].  All names must start with a
letter, and further consist of letters and numbers.

**** Remote references
@@info:@cindex remote references@@
@@info:@cindex references, remote@@
@@info:@cindex references, to a different table@@
@@info:@cindex name, of column or field@@
@@info:@cindex constants, in calculations@@
@@info:@cindex #+TBLNAME@@

You may also reference constants, fields and ranges from a different
table, either in the current file or even in a different file.  The
syntax is

#+begin_example
remote(NAME-OR-ID,REF)
#+end_example

@@info:@noindent@@ where NAME can be the name of a table in the current
file as set by a ~#+TBLNAME: NAME~ line before the table. It can also
be the ID of an entry, even in a different file, and the reference
then refers to the first table in that entry. REF is an absolute field
or range reference as described above for example ~@3$3~ or
~$somename~, valid in the referenced table.

*** Formula syntax for Calc
    :PROPERTIES:
    :DESCRIPTION: Using Calc to compute stuff
    :END:
@@info:@cindex formula syntax, Calc@@
@@info:@cindex syntax, of formulas@@

A formula can be any algebraic expression understood by the Emacs
@@info:@file{@@Calc@@info:}@@ package.  *Note*: @@info:@file{@@calc@@info:}@@ has the
non-standard convention that ~/~ has lower precedence than ~*~, so
that ~a/b*c~ is interpreted as ~a/(b*c)~.  Before evaluation by
~calc-eval~ (see [[info:calc:Calling%20Calc%20from%20Your%20Programs][Calling Calc from Your Lisp Programs]]), variable
substitution takes place according to the rules described above.
@@info:@cindex vectors, in table calculations@@ The range vectors can
be directly fed into the Calc vector functions like ~vmean~ and
~vsum~.

@@info:@cindex format specifier@@
@@info:@cindex mode, for @file{calc}@@
@@info:@vindex org-calc-default-modes@@

A formula can contain an optional mode string after a semicolon.  This
string consists of flags to influence Calc and other modes during
execution.  By default, Org uses the standard Calc modes (precision
12, angular units degrees, fraction and symbolic modes off).  The
display format, however, has been changed to ~(float 8)~ to keep
tables compact.  The default settings can be configured using the
variable ~org-calc-default-modes~.

#+attr_texinfo: :table-type "table" :indic "@code"
  - p20 :: set the internal Calc calculation precision to 20 digits
  - n3 s3 e2 f4 :: normal, scientific, engineering, or fixed format of
                   the result of Calc passed back to Org. Calc
                   formatting is unlimited in precision as long as the
                   Calc calculation precision is greater.
  - D R :: angle modes: degrees, radians
  - F S :: fraction and symbolic modes
  - N :: interpret all fields as numbers, use 0 for non-numbers
  - E :: keep empty fields in ranges
  - L :: literal

@@info:@noindent@@ Unless you use large integer numbers or
high-precision-calculation and -display for floating point numbers you
may alternatively provide a ~printf~ format specifier to reformat the
Calc result after it has been passed back to Org instead of letting
Calc already do the formatting.[fn:32] A few examples:

#+attr_texinfo: :table-type "table" :indic "@code"
  - $1+$2            :: Sum of first and second field
  - $1+$2;%.2f       :: Same, format result to two decimals
  - exp($2)+exp($1)  :: Math functions can be used
  - $0;%.1f          :: Reformat current cell to 1 decimal
  - ($3-32)*5/9      :: Degrees F -> C conversion
  - $c/$1/$cm        :: Hz -> cm conversion, using
       @@info:@file{@@constants.el@@info:}@@
  - tan($1);Dp3s1    :: Compute in degrees, precision 3, display SCI 1
  - sin($1);Dp3%.1e  :: Same, but use ~printf~ specifier for display
  - vmean($2..$7)    :: Compute column range mean, using vector
       function
  - vmean($2..$7);EN :: Same, but treat empty fields as 0
  - taylor($3,x=7,2) :: Taylor series of $3, at x=7, second degree

Calc also contains a complete set of logical operations.  For example

#+attr_texinfo: :table-type "table" :indic "@code"
  - if($1<20,teen,string("")) ::  "teen" if age $1 less than 20, else empty


Note that you can also use two org-specific flags ~T~ and ~t~ for
durations computations [[Duration and time values]].

You can add your own Calc functions defined in Emacs Lisp with
~defmath~ and use them in formula syntax for Calc.

*** Emacs Lisp forms as formulas
    :PROPERTIES:
    :DESCRIPTION: Writing formulas in Emacs Lisp
    :TEXINFO_MENU_TITLE: Formula syntax for Lisp
    :END:
@@info:@cindex Lisp forms, as table formulas@@

It is also possible to write a formula in Emacs Lisp.  This can be
useful for string manipulation and control structures, if Calc's
functionality is not enough.

If a formula starts with a single-quote followed by an opening
parenthesis, then it is evaluated as a Lisp form. The evaluation
should return either a string or a number. Just as with
@@info:@file{@@calc@@info:}@@ formulas, you can specify modes and a printf format
after a semicolon.

With Emacs Lisp forms, you need to be conscious about the way field
references are interpolated into the form. By default, a reference
will be interpolated as a Lisp string (in double-quotes) containing
the field. If you provide the @@info:@samp{@@N@@info:}@@ mode switch, all
referenced elements will be numbers (non-number fields will be zero)
and interpolated as Lisp numbers, without quotes. If you provide the
@@info:@samp{@@L@@info:}@@ flag, all fields will be interpolated literally, without
quotes. I.e., if you want a reference to be interpreted as a string by
the Lisp form, enclose the reference operator itself in double-quotes,
like ~"$3"~. Ranges are inserted as space-separated fields, so you can
embed them in list or vector syntax.

Here are a few examples---note how the @@info:@samp{@@N@@info:}@@ mode is used when
we do computations in Lisp.

Swap the first two characters of the content of column 1:
#+header: :exports code
#+header: :eval no
#+begin_src emacs-lisp
  '(concat (substring $1 1 2) (substring $1 0 1) (substring $1 2))
#+end_src

Add columns 1 and 2, equivalent to Calc's ~$1+$2~:
#+header: :exports code
#+header: :eval no
#+begin_src emacs-lisp
  '(+ $1 $2);N
#+end_src

Compute the sum of columns 1-4, like Calc's ~vsum($1..$4)~}:
#+header: :exports code
#+header: :eval no
#+begin_src emacs-lisp
  '(apply '+ '($1..$4));N
#+end_src


*** Duration and time values
    :PROPERTIES:
    :DESCRIPTION: How to compute duration and time values
    :END:
@@info:@cindex Duration, computing@@
@@info:@cindex Time, computing@@
@@info:@vindex org-table-duration-custom-format@@

If you want to compute time values use the ~T~ flag, either in Calc
formulas or Elisp formulas:

#+begin_example
  |  Task 1 |   Task 2 |    Total |
  |---------+----------+----------|
  |    2:12 |     1:47 | 03:59:00 |
  | 3:02:20 | -2:07:00 |     0.92 |
  #+TBLFM: @@2$3=$1+$2;T::@@3$3=$1+$2;t
#+end_example

Input duration values must be of the form ~[HH:MM[:SS]~, where seconds
are optional. With the ~T~ flag, computed durations will be displayed
as ~HH:MM:SS~ (see the first formula above). With the ~t~ flag,
computed durations will be displayed according to the value of the
variable ~org-table-duration-custom-format~, which defaults to
~'hours~ and will display the result as a fraction of hours (see the
second formula in the example above).

Negative duration values can be manipulated as well, and integers will
be considered as seconds in addition and subtraction.

*** Field and range formulas
    :PROPERTIES:
    :DESCRIPTION: Formulas for specific (ranges of) fields
    :END:
@@info:@cindex field formula@@
@@info:@cindex range formula@@
@@info:@cindex formula, for individual table field@@
@@info:@cindex formula, for range of fields@@

To assign a formula to a particular field, type it directly into the
field, preceded by ~:=~, for example ~vsum(@II..III)~. When you press
@@info:@key{@@TAB@@info:}@@ or @@info:@key{@@RET@@info:}@@ or @@info:@kbd{@@C-c C-c@@info:}@@ with the cursor
still in the field, the formula will be stored as the formula for this
field, evaluated, and the current field will be replaced with the
result.

@@info:@cindex #+TBLFM@@ 

Formulas are stored in a special line starting with ~#+TBLFM:~
directly below the table. If you type the equation in the fourth field
of the third data line in the table, the formula will look like
~@3$4=$1+$2~. When inserting/deleting/swapping column and rows with
the appropriate commands, /absolute references/ (but not relative
ones) in stored formulas are modified in order to still reference the
same field. To avoid this from happening, in particular in range
references, anchor ranges at the table borders (using ~@<~, ~@>~,
~$<~, ~$>~), or at hlines using the ~@I~ notation. Automatic
adaptation of field references does of course not happen if you edit
the table structure with normal editing commands---then you must fix
the equations yourself.

Instead of typing an equation into the field, you may also use the
following command

#+attr_texinfo: :table-type "table" :indic "@asis"
  - @@info:@kbd{@@C-u C-c =@@info:}@@ ~org-table-eval-formula~ :: Install a new
       formula for the current field.  The command prompts for a
       formula with default taken from the @@info:@samp{@@#+TBLFM:@@info:}@@ line,
       applies it to the current field, and stores it.

       @@info:@kindex C-u C-c =@@
       @@info:@findex org-table-eval-formula@@
The left-hand side of a formula can also be a special expression in
order to assign the formula to a number of different fields. There is
no keyboard shortcut to enter such range formulas. To add them, use
the formula editor (see [[Editing and debugging formulas]]) or edit the
~#+TBLFM:~ line directly.

#+attr_texinfo: :table-type "table" :indic "@code"
  - $2= :: Column formula, valid for the entire column.  This is so
           common that Org treats these formulas in a special way, see
           [[Column formulas]].
  - @@3= :: Row formula, applies to all fields in the specified row.
            ~@@>=~ means the last row.
  - @@1$2..@@4$3= :: Range formula, applies to all fields in the given
                     rectangular range.  This can also be used to
                     assign a formula to some but not all fields in a
                     row.
  - $name= :: Named field, see [[Advanced features]].


*** Column formulas
    :PROPERTIES:
    :DESCRIPTION: Formulas valid for an entire column
    :END:
@@info:@cindex column formula@@
@@info:@cindex formula, for table column@@

When you assign a formula to a simple column reference like ~$3=~, the
same formula will be used in all fields of that column, with the
following very convenient exceptions:

  -  If the table contains horizontal separator hlines with rows above
     and below, everything before the first such hline is considered
     part of the table /header/ and will not be modified by column
     formulas. Therefore a header is mandatory when you use column
     formulas and want to add hlines to group rows, like for example
     to separate a total row at the bottom from the summand rows
     above.
  -  Fields that already get a value from a field/range formula will
     be left alone by column formulas. These conditions make column
     formulas very easy to use.

To assign a formula to a column, type it directly into any field in
the column, preceded by an equal sign, like @@info:@samp{@@=$1+$2@@info:}@@. When
you press @@info:@key{@@TAB@@info:}@@ or @@info:@key{@@RET@@info:}@@ or @@info:@kbd{@@C-c C-c@@info:}@@ with
the cursor still in the field, the formula will be stored as the
formula for the current column, evaluated and the current field
replaced with the result. If the field contains only @@info:@samp{@@=@@info:}@@,
the previously stored formula for this column is used. For each
column, Org will only remember the most recently used formula. In the
@@info:@samp{@@#+TBLFM:@@info:}@@ line, column formulas will look like
@@info:@samp{@@$4=$1+$2@@info:}@@. The left-hand side of a column formula can not
be the name of column, it must be the numeric column reference or
~$>~.

Instead of typing an equation into the field, you may also use the
following command:

#+attr_texinfo: :table-type "table" :indic "@asis"
  - @@info:@kbd{@@C-c =@@info:}@@ ~org-table-eval-formula~ :: Install a new formula
       for the current column and replace current field with the
       result of the formula.  The command prompts for a formula, with
       default taken from the @@info:@samp{@@#+TBLFM@@info:}@@ line, applies it to
       the current field and stores it.  With a numeric prefix
       argument(e.g.: @@info:@kbd{@@C-5 C-c =@@info:}@@) the command will apply it
       to that many consecutive fields in the current column.

       @@info:@kindex C-c =@@
       @@info:@findex org-table-eval-formula@@
*** Lookup functions
    :PROPERTIES:
    :DESCRIPTION: Lookup functions for searching tables
    :END:
@@info:@cindex lookup functions in tables@@
@@info:@cindex table lookup functions@@

Org has three predefined Emacs Lisp functions for lookups in tables.

#+attr_texinfo: :table-type "table" :indic "@code"
  - (org-lookup-first VAL S-LIST R-LIST &optional PREDICATE) :: Searches
       for the first element ~S~ in list ~S-LIST~ for which

       @@info:@findex org-lookup-first@@

       #+header: :exports code
       #+header: :eval no
       #+begin_src emacs-lisp
         (PREDICATE VAL S)
       #+end_src
       is ~t~; returns the value from the corresponding position in
       list ~R-LIST~.  The default ~PREDICATE~ is ~equal~.  Note that
       the parameters ~VAL~ and ~S~ are passed to ~PREDICATE~ in the
       same order as the correspoding parameters are in the call to
       ~org-lookup-first~, where ~VAL~ precedes ~S-LIST~.  If ~R-LIST~
       is ~nil~, the matching element ~S~ of ~S-LIST~ is returned.
  - (org-lookup-last VAL S-LIST R-LIST &optional PREDICATE) :: Similar
       to ~org-lookup-first~ above, but searches for the /last/
       element for which ~PREDICATE~ is ~t~.

       @@info:@findex org-lookup-last@@
  - (org-lookup-all VAL S-LIST R-LIST &optional PREDICATE) :: Similar
       to ~org-lookup-first~, but searches for /all/ elements for
       which ~PREDICATE~ is ~t~, and returns /all/ corresponding
       values.  This function can not be used by itself in a formula,
       because it returns a list of values.  However, powerful lookups
       can be built when this function is combined with other Emacs
       Lisp functions.

       @@info:@findex org-lookup-all@@

If the ranges used in these functions contain empty fields, the ~E~
mode for the formula should usually be specified: otherwise empty
fields will not be included in ~S-LIST~ and/or ~R-LIST~ which can, for
example, result in an incorrect mapping from an element of ~S-LIST~ to
the corresponding element of ~R-LIST~.

These three functions can be used to implement associative arrays,
count matching cells, rank results, group data, etc.  For practical
examples see [[http://orgmode.org/worg/org-tutorials/org-lookups.html][this tutorial on Worg]].

*** Editing and debugging formulas
    :PROPERTIES:
    :DESCRIPTION: Fixing formulas
    :END:
@@info:@cindex formula editing@@
@@info:@cindex editing, of table formulas@@

@@info:@vindex org-table-use-standard-references@@ You can edit
individual formulas in the minibuffer or directly in the field.  Org
can also prepare a special buffer with all active formulas of a table.
When offering a formula for editing, Org converts references to the
standard format (like ~B3~ or ~D&~) if possible.  If you prefer to
only work with the internal format (like ~@3$2~ or ~$4~), configure
the variable ~org-table-use-standard-references~.

#+attr_texinfo: :table-type "table" :indic "@asis"
  - @@info:@kbd{@@C-c =@@info:}@@ ~org-table-eval-formula~ ::
       @@info:@itemx@@ @@info:@kbd{@@C-u C-c =@@info:}@@

       Edit the formula associated with the current column/field in the
       minibuffer.  See [[Column formulas]], and [[Field and range formulas]].

       @@info:@kindex C-c =@@
       @@info:@kindex C-u C-c =@@
       @@info:@findex org-table-eval-formula@@
  - @@info:@kbd{@@C-u C-u C-c =@@info:}@@ ~org-table-eval-formula~ :: Re-insert the
       active formula (either a field formula, or a column formula)
       into the current field, so that you can edit it directly in the
       field.  The advantage over editing in the minibuffer is that
       you can use the command @@info:@kbd{@@C-c ?@@info:}@@.

       @@info:@kindex C-u C-u C-c =@@
       @@info:@findex org-table-eval-formula@@

  - @@info:@kbd{@@C-c ?@@info:}@@ ~org-table-field-info~ :: While editing a formula
       in a table field, highlight the field(s) referenced by the
       reference at the cursor position in the formula.

       @@info:@kindex C-c ?@@
       @@info:@findex org-table-field-info@@

  - @@info:@kbd{@@C-c @}@@info:}@@ ~org-table-toggle-coordinate-overlays~ :: Toggle
       the display of row and column numbers for a table, using
       overlays (@@info:@command{@@org-table-toggle-coordinate-overlays@@info:}@@).
       These are updated each time the table is aligned; you can force
       it with @@info:@kbd{@@C-c C-c@@info:}@@.

       @@info:@kindex C-c @}@@
       @@info:@findex org-table-toggle-coordinate-overlays@@

  - @@info:@kbd{@@C-c @{@@info:}@@ ~org-table-toggle-formula-debugger~ :: Toggle
       the formula debugger on and off.  See below.

       @@info:@kindex C-c @{@@
       @@info:@findex org-table-toggle-formula-debugger@@

  - @@info:@kbd{@@C-c '@@info:}@@ ~org-table-edit-formulas~ :: Edit all formulas
       for the current table in a special buffer, where the formulas
       will be displayed one per line.  If the current field has an
       active formula, the cursor in the formula editor will mark it.
       While inside the special buffer, Org will automatically
       highlight any field or range reference at the cursor position.
       You may edit, remove and add formulas, and use the following
       commands:

       @@info:@kindex C-c '@@
       @@info:@findex org-table-edit-formulas@@

#+attr_texinfo: :table-type "table" :indic "@asis"
  - @@info:@kbd{@@C-c C-c@@info:}@@ ~org-table-fedit-finish~ :: 
       @@info:@itemx@@ @@info:@kbd{@@C-x C-s@@info:}@@

       Exit the formula editor and store the modified formulas.  With
       @@info:@kbd{@@C-u@@info:}@@ prefix, also apply the new formulas to the
       entire table.

       @@info:@kindex C-x C-s@@
       @@info:@kindex C-c C-c@@
       @@info:@findex org-table-fedit-finish@@
  - @@info:@kbd{@@C-c C-q@@info:}@@ ~org-table-fedit-abort~ :: Exit the formula
       editor without installing changes.

       @@info:@kindex C-c C-q@@
       @@info:@findex org-table-fedit-abort@@
  - @@info:@kbd{@@C-c C-r@@info:}@@ ~org-table-fedit-toggle-ref-type~ :: Toggle all
       references in the formula editor between standard (like ~B3~)
       and internal (like ~@3$2~).

       @@info:@kindex C-c C-r@@
       @@info:@findex org-table-fedit-toggle-ref-type@@
  - @@info:@key{@@TAB@@info:}@@ ~org-table-fedit-lisp-indent~ :: Pretty-print or
       indent Lisp formula at point.  When in a line containing a Lisp
       formula, format the formula according to Emacs Lisp rules.
       Another @@info:@key{@@TAB@@info:}@@ collapses the formula back again.  In
       the open formula, @@info:@key{@@TAB@@info:}@@ re-indents just like in Emacs
       Lisp mode.

       @@info:@kindex TAB@@
       @@info:@findex org-table-fedit-lisp-indent@@
  - @@info:@kbd{@@M-@@info:@key{@@TAB@@info:}@@@@info:}@@ ~lisp-complete-symbol~ :: Complete Lisp
       symbols, just like in Emacs Lisp mode.

       @@info:@kindex M-TAB@@
       @@info:@findex lisp-complete-symbol@@
  - @@info:@kbd{@@S-@@info:@key{@@up@@info:}@@@@info:}@@/@@info:@key{@@down@@info:}@@/@@info:@key{@@left@@info:}@@/@@info:@key{@@right@@info:}@@ :: Shift
       the reference at point.  For example, if the reference is ~B3~
       and you press @@info:@kbd{@@S-@@info:@key{@@right@@info:}@@@@info:}@@, it will become ~C3~.
       This also works for relative references and for hline
       references.

       @@info:@kindex S-up@@
       @@info:@kindex S-down@@
       @@info:@kindex S-left@@
       @@info:@kindex S-right@@
       @@info:@findex org-table-fedit-ref-up@@
       @@info:@findex org-table-fedit-ref-down@@
       @@info:@findex org-table-fedit-ref-left@@
       @@info:@findex org-table-fedit-ref-right@@
  - @@info:@kbd{@@M-S-@@info:@key{@@up@@info:}@@@@info:}@@ ~org-table-fedit-line-up~ ::
       @@info:@itemx@@ @@info:@kbd{@@M-S-@@info:@key{@@down@@info:}@@@@info:}@@ ~org-table-fedit-line-down~

       Move the test line for column formulas in the Org buffer up and
       down.

       @@info:@kindex M-S-down@@
       @@info:@findex org-table-fedit-line-down@@
       @@info:@kindex M-S-up@@
       @@info:@findex org-table-fedit-line-up@@

  - @@info:@kbd{@@M-@@info:@key{@@up@@info:}@@@@info:}@@ ~org-table-fedit-scroll-up~ ::
       @@info:@itemx@@ @@info:@kbd{@@M-@@info:@key{@@down@@info:}@@@@info:}@@ ~org-table-fedit-scroll-down~

       Scroll the window displaying the table.

       @@info:@kindex M-up@@
       @@info:@findex org-table-fedit-scroll-up@@
       @@info:@kindex M-down@@
       @@info:@findex org-table-fedit-scroll-down@@
  - @@info:@kbd{@@C-c @}@@info:}@@ :: Turn the coordinate grid in the table on and
       off.

       @@info:@kindex C-c @}@@
       @@info:@findex org-table-toggle-coordinate-overlays@@

Making a table field blank does not remove the formula associated with
the field, because that is stored in a different line (the
@@info:@samp{@@#+TBLFM@@info:}@@ line)---during the next recalculation the field
will be filled again.  To remove a formula from a field, you have to
give an empty reply when prompted for the formula, or to edit the
@@info:@samp{@@#+TBLFM@@info:}@@ line.

@@info:@kindex C-c C-c@@
You may edit the @@info:@samp{@@#+TBLFM@@info:}@@ directly and re-apply the changed
equations with @@info:@kbd{@@C-c C-c@@info:}@@ in that line or with the normal
recalculation commands in the table.

**** Debugging formulas

@@info:@cindex formula debugging@@
@@info:@cindex debugging, of table formulas@@

When the evaluation of a formula leads to an error, the field content
becomes the string @@info:@samp{@@#ERROR@@info:}@@. If you would like see what is
going on during variable substitution and calculation in order to find
a bug, turn on formula debugging in the ~Tbl~ menu and repeat the
calculation, for example by pressing @@info:@kbd{@@C-u C-u C-c =@@info:@key{@@RET@@info:}@@@@info:}@@
in a field. Detailed information will be displayed.

*** Updating the table    
    :PROPERTIES:
    :DESCRIPTION: Recomputing all dependent fields
    :END:
@@info:@cindex recomputing table fields@@
@@info:@cindex updating, table@@

Recalculation of a table is normally not automatic, but needs to be
triggered by a command.  See [[Advanced%20features][Advanced Features]], for a way to make
recalculation at least semi-automatic.

In order to recalculate a line of a table or the entire table, use the
following commands:

#+attr_texinfo: :table-type "table" :indic "@asis"
  - @@info:@kbd{@@C-c *@@info:}@@ ~org-table-recalculate~ :: Recalculate the
       current row by first applying the stored column formulas from
       left to right, and all field/range formulas in the current row.

       @@info:@kindex C-c *@@
       @@info:@findex org-table-recalculate@@
  - @@info:@kbd{@@C-u C-c *@@info:}@@ or @@info:@kbd{@@C-u C-c C-c@@info:}@@ :: Recompute the
       entire table, line by line.  Any lines before the first hline
       are left alone, assuming that these are part of the table
       header.

       @@info:@kindex C-u C-c *@@
       @@info:@kindex C-u C-c C-c@@
  - @@info:@kbd{@@C-u C-u C-c *@@info:}@@ ~org-table-iterate~ ::
       @@info:@itemx@@ @@info:@kbd{@@C-u C-u C-c C-c@@info:}@@
       
       Iterate the table by recomputing it until no further changes
       occur.  This may be necessary if some computed fields use the
       value of other fields that are computed /later/ in the
       calculation sequence.

       @@info:@kindex C-u C-u C-c *@@
       @@info:@kindex C-u C-u C-c C-c@@
       @@info:@findex org-table-iterate@@
  - @@info:@kbd{@@M-x org-table-recalculate-buffer-tables@@info:}@@ :: Recompute
       all tables in the current buffer.

       @@info:@findex org-table-recalculate-buffer-tables@@
  - @@info:@kbd{@@M-x org-table-iterate-buffer-tables@@info:}@@ :: Iterate all
       tables in the current buffer, in order to converge
       table-to-table dependencies.

       @@info:@findex org-table-iterate-buffer-tables@@
*** Advanced features
    :PROPERTIES:
    :DESCRIPTION: Field and column names, parameters, and automatic recalc
    :END:
If you want the recalculation of fields to happen automatically, or if
you want to be able to assign /names/ [fn:33] to fields and columns,
you need to reserve the first column of the table for special marking
characters.

#+attr_texinfo: :table-type "table" :indic "@asis"
  - @@info:@kbd{@@C-#@@info:}@@ ~org-table-rotate-recalc-marks~ :: Rotate the
       calculation mark in first column through the states @@info:@samp{@@@@info:}@@, @@info:@samp{@@#@@info:}@@, @@info:@samp{@@*@@info:}@@, @@info:@samp{@@!@@info:}@@,
       @@info:@samp{@@$@@info:}@@.  When there is an active region, change all
       marks in the region.

       @@info:@kindex C-#@@
       @@info:@findex org-table-rotate-recalc-marks@@
Here is an example of a table that collects exam results of students
and makes use of these features:

#+begin_src org
  |---+---------+--------+--------+--------+-------+------|
  |   | Student | Prob 1 | Prob 2 | Prob 3 | Total | Note |
  |---+---------+--------+--------+--------+-------+------|
  | ! |         |     P1 |     P2 |     P3 |   Tot |      |
  | # | Maximum |     10 |     15 |     25 |    50 | 10.0 |
  | ^ |         |     m1 |     m2 |     m3 |    mt |      |
  |---+---------+--------+--------+--------+-------+------|
  | # | Peter   |     10 |      8 |     23 |    41 |  8.2 |
  | # | Sam     |      2 |      4 |      3 |     9 |  1.8 |
  |---+---------+--------+--------+--------+-------+------|
  |   | Average |        |        |        |  25.0 |      |
  | ^ |         |        |        |        |    at |      |
  | $ | max=50  |        |        |        |       |      |
  |---+---------+--------+--------+--------+-------+------|
  ,#+TBLFM: $6=vsum($P1..$P3)::$7=10*$Tot/$max;%.1f::$at=vmean(@@-II..@@-I);%.1f
#+end_src

@@info:@noindent@@ *Important*: please note that for these special tables,
recalculating the table with @@info:@kbd{@@C-u C-c *@@info:}@@ will only affect
rows that are marked {{{samp(#)}}} or {{{samp(*)}}}, and fields that
have a formula assigned to the field itself.  The column formulas are
not applied in rows with empty first field.

@@info:@cindex marking characters, tables@@
The marking characters have the following meaning:
#+attr_texinfo: :table-type "table" :indic "@samp"
  - ! :: The fields in this line define names for the columns, so that
         you may refer to a column as @@info:@samp{@@$Tot@@info:}@@ instead of
         @@info:@samp{@@$6@@info:}@@.
  - ^ :: This row defines names for the fields @emph{above} the row.
         With such a definition, any formula in the table may use
         @@info:@samp{@@$m1@@info:}@@ to refer to the value @@info:@samp{@@10@@info:}@@.  Also,
         if you assign a formula to a names field, it will be stored
         as @@info:@samp{@@$name=...@@info:}@@.
  - _ :: Similar to @@info:@samp{@@^@@info:}@@, but defines names for the fields in
         the row /below/.
  - $ :: Fields in this row can define /parameters/ for formulas.  For
         example, if a field in a @@info:@samp{@@$@@info:}@@ row contains
         @@info:@samp{@@max=50@@info:}@@, then formulas in this table can refer to
         the value 50 using @@info:@samp{@@$max@@info:}@@.  Parameters work exactly
         like constants, only that they can be defined on a per-table
         basis.
  - # :: Fields in this row are automatically recalculated when
         pressing @@info:@key{@@TAB@@info:}@@ or @@info:@key{@@RET@@info:}@@ or
         @@info:@kbd{@@S-@@info:@key{@@TAB@@info:}@@@@info:}@@ in this row.  Also, this row is selected
         for a global recalculation with @@info:@kbd{@@C-u C-c *@@info:}@@.
         Unmarked lines will be left alone by this command.
  - * :: Selects this line for global recalculation with @@info:@kbd{@@C-u C-c *@@info:}@@, but not for automatic recalculation.  Use this
         when automatic recalculation slows down editing too much.
  - :: Unmarked lines are exempt from recalculation with @@info:@kbd{@@C-u C-c *@@info:}@@.  All lines that should be recalculated should be
       marked with {{{samp(#)}}} or {{{samp(*)}}}.
  - / :: Do not export this line.  Useful for lines that contain the
         narrowing @@info:@samp{@@<N>@@info:}@@ markers or column group markers.


Finally, just to whet your appetite for what can be done with the
fantastic @@info:@file{@@calc.el@@info:}@@ package, here is a table that computes
the Taylor series of degree ~n~ at location ~x~ for a couple of
functions.

#+begin_src org
  |---+-------------+---+-----+--------------------------------------|
  |   | Func        | n | x   | Result                               |
  |---+-------------+---+-----+--------------------------------------|
  | # | exp(x)      | 1 | x   | 1 + x                                |
  | # | exp(x)      | 2 | x   | 1 + x + x^2 / 2                      |
  | # | exp(x)      | 3 | x   | 1 + x + x^2 / 2 + x^3 / 6            |
  | # | x^2+sqrt(x) | 2 | x=0 | x*(0.5 / 0) + x^2 (2 - 0.25 / 0) / 2 |
  | # | x^2+sqrt(x) | 2 | x=1 | 2 + 2.5 x - 2.5 + 0.875 (x - 1)^2    |
  | * | tan(x)      | 3 | x   | 0.0175 x + 1.77e-6 x^3               |
  |---+-------------+---+-----+--------------------------------------|
  ,#+TBLFM: $5=taylor($2,$4,$3);n3
#+end_src

** Org-Plot
   :PROPERTIES:
   :DESCRIPTION: Plotting from Org tables
   :END:
@@info:@cindex graph, in tables@@
@@info:@cindex plot tables using Gnuplot@@
@@info:@cindex #+PLOT@@

Org-Plot can produce 2D and 3D graphs of information stored in org
tables using [[http://www.gnuplot.info/][Gnuplot]] and [[http://cars9.uchicago.edu/~ravel/software/gnuplot-mode.html][gnuplot-mode]]. To see this in action, ensure
that you have both Gnuplot and Gnuplot-mode installed on your system,
then call ~org-plot/gnuplot~ on the following table.

#+begin_src org
  ,#+PLOT: title:"Citas" ind:1 deps:(3) type:2d with:histograms set:"yrange [0:]"
  | Sede      | Max cites | H-index |
  |-----------+-----------+---------|
  | Chile     |    257.72 |   21.39 |
  | Leeds     |    165.77 |   19.68 |
  | Sao Paolo |     71.00 |   11.50 |
  | Stockholm |    134.19 |   14.33 |
  | Morels   |    257.56 |   17.67 |
#+end_src

Notice that Org Plot is smart enough to apply the table's headers as
labels. Further control over the labels, type, content, and appearance
of plots can be exercised through the ~#+PLOT:~ lines preceding a
table. See below for a complete list of Org-plot options. For more
information and examples see the [[http://orgmode.org/worg/org-tutorials/org-plot.html][Org-plot tutorial]].

*** Plot Options

#+attr_texinfo: :table-type "table" :indic "@code"
  - set :: Specify any @@info:@command{@@gnuplot@@info:}@@ option to be set when
           graphing.
  - title :: Specify the title of the plot.
  - ind :: Specify which column of the table to use as the ~x~ axis.
  - deps :: Specify the columns to graph as a Lisp style list,
            surrounded by parentheses and separated by spaces for
            example ~dep:(3 4)~ to graph the third and fourth columns
            (defaults to graphing all other columns aside from the
            ~ind~ column).
  - type :: Specify whether the plot will be ~2d~, ~3d~, or ~grid~.
  - with :: Specify a ~with~ option to be inserted for every col being
            plotted (e.g.: ~lines~, ~points~, ~boxes~, ~impulses~,
            etc...).  Defaults to ~lines~.
  - file :: If you want to plot to a file, specify
            ~"@var{path/to/desired/output-file}"~.
  - labels :: List of labels to be used for the ~deps~ (defaults to
              the column headers if they exist).
  - line :: Specify an entire line to be inserted in the Gnuplot
            script.
  - map :: When plotting ~3d~ or ~grid~ types, set this to ~t~ to
           graph a flat mapping rather than a ~3d~ slope.
  - timefmt ::  Specify format of Org mode timestamps as they will be
                parsed by Gnuplot.  Defaults to
                @@info:@samp{@@%Y-%m-%d-%H:%M:%S@@info:}@@.
  - script :: If you want total control, you can specify a script file
              (place the file name between double-quotes) which will
              be used to plot.  Before plotting, every instance of
              ~$datafile~ in the specified script will be replaced
              with the path to the generated data file.  Note: even if
              you set this option, you may still want to specify the
              plot type, as that can impact the content of the data
              file.

* FIXED Hyperlinks
  :PROPERTIES:
  :DESCRIPTION: Notes in context
  :ORDERED:  t
  :END:
@@info:@cindex hyperlinks@@

Like HTML, Org provides links inside a file, external links to
other files, Usenet articles, emails, and much more.

** Link format
   :PROPERTIES:
   :DESCRIPTION: How links in Org are formatted
   :END:
@@info:@cindex link format@@
@@info:@cindex format, of links@@

Org will recognize plain URL-like links and activate them as clickable
links.  The general link format, however, looks like this:

#+begin_src org
  [[link][description]] or  [[link]]
#+end_src


@@info:@noindent@@ Once a link in the buffer is complete (all brackets
present), Org will change the display so that @@info:@samp{@@description@@info:}@@
is displayed instead of ~[[link][description]]~ and @@info:@samp{@@link@@info:}@@
is displayed instead of ~[[link]]~.  Links will be highlighted
in the face ~org-link~, which by default is an underlined face.  You
can directly edit the visible part of a link.  Note that this can be
either the @@info:@samp{@@link@@info:}@@ part (if there is no description) or the
@@info:@samp{@@description@@info:}@@ part.  To edit also the invisible
@@info:@samp{@@link@@info:}@@ part, use @@info:@kbd{@@C-c C-l@@info:}@@ with the cursor on the
link.

If you place the cursor at the beginning or just behind the end of the
displayed text and press @@info:@key{@@BACKSPACE@@info:}@@, you will remove the
(invisible) bracket at that location.  This makes the link incomplete
and the internals are again displayed as plain text.  Inserting the
missing bracket hides the link internals again.  To show the internal
structure of all links, use the menu entry ~Org->Hyperlinks->Literal
links~.

** Internal links
   :PROPERTIES:
   :DESCRIPTION: Links to other places in the current file
   :END:
@@info:@cindex internal links@@
@@info:@cindex links, internal@@
@@info:@cindex targets, for links@@
@@info:@cindex property, CUSTOM_ID@@

If the link does not look like a URL, it is considered to be internal
in the current file.  The most important case is a link like
~[[#my-custom-id]]~ which will link to the entry with the
~CUSTOM_ID~ property @@info:@samp{@@my-custom-id@@info:}@@.  Such custom IDs are
very good for HTML export (see [[HTML export]]) where they produce pretty
section links.  You are responsible yourself to make sure these custom
IDs are unique in a file.

Links such as @@info:@samp{@@[[My Target]]@@info:}@@ or @@info:@samp{@@[[My Target][Find my target]]@@info:}@@ lead
to a text search in the current file.

The link can be followed with @@info:@kbd{@@C-c C-o@@info:}@@ when the cursor is on
the link, or with a mouse click (see [[Handling links]]).  Links to custom
IDs will point to the corresponding headline.  The preferred match for
a text link is a /dedicated target/: the same string in double angular
brackets.  Targets may be located anywhere; sometimes it is convenient
to put them into a comment line.  For example

#+begin_src org
  # <<My Target>>
#+end_src

@@info:@noindent@@ In HTML export (see [[HTML export]]), such targets will
become named anchors for direct access through @@info:@samp{@@http@@info:}@@
links.[fn:36]

If no dedicated target exists, Org will search for a headline that is
exactly the link text but may also include a TODO keyword and
tags.[fn:37] In non-Org files, the search will look for the words in
the link text. In the above example the search would be for ~my target~.

Following a link pushes a mark onto Org's own mark ring.  You can
return to the previous position with @@info:@kbd{@@C-c &@@info:}@@.  Using this
command several times in direct succession goes back to positions
recorded earlier.

*** Radio targets
@@info:@cindex radio targets@@
@@info:@cindex targets, radio@@
@@info:@cindex links, radio targets@@

Org can automatically turn any occurrences of certain target names in
normal text into a link. So without explicitly creating a link, the
text connects to the target radioing its position. Radio targets are
enclosed by triple angular brackets. For example, a target
@@info:@samp{@@<<<My Target>>>@@info:}@@ causes each occurrence of ~my target~ in
normal text to become activated as a link. The Org file is scanned
automatically for radio targets only when the file is first loaded
into Emacs. To update the target list during editing, press 
@@info:@kbd{@@C-c C-c@@info:}@@ with the cursor on or at a target.

** External links
   :PROPERTIES:
   :DESCRIPTION: URL-like links to the world
   :END:
@@info:@cindex links, external@@
@@info:@cindex external links@@
@@info:@cindex links, external@@
@@info:@cindex Gnus links@@
@@info:@cindex BBDB links@@
@@info:@cindex IRC links@@
@@info:@cindex URL links@@
@@info:@cindex file links@@
@@info:@cindex VM links@@
@@info:@cindex RMAIL links@@
@@info:@cindex WANDERLUST links@@
@@info:@cindex MH-E links@@
@@info:@cindex USENET links@@
@@info:@cindex SHELL links@@
@@info:@cindex Info links@@
@@info:@cindex Elisp links@@

Org supports links to files, websites, Usenet and email messages, BBDB
database entries and links to both IRC conversations and their logs.
External links are URL-like locators.  They start with a short
identifying string followed by a colon.  There can be no space after
the colon.  The following list shows examples for each link type.

#+attr_texinfo: :table-type "table" :indic "@asis"
 - ~http://www.astro.uva.nl/~dominik~          :: on the web
 - ~doi:10.1000/182~                           :: DOI for an electronic resource
 - ~file:/home/dominik/images/jupiter.jpg~     :: file, absolute path
 - ~/home/dominik/images/jupiter.jpg~          :: same as above
 - ~file:papers/last.pdf~                      :: file, relative path
 - ~./papers/last.pdf~                         :: same as above
 - ~file:/myself@some.where:papers/last.pdf~   :: file, path on remote machine
 - ~/myself@some.where:papers/last.pdf~        :: same as above
 - ~file:sometextfile::NNN~                    :: file, jump to line number
 - ~file:projects.org~                         :: another Org file
 - ~file:projects.org::some words~             :: text search in Org file[fn:38]
 - ~file:projects.org::*task title~            :: heading search in Org file
 - ~file+sys:/path/to/file~                    :: open via OS, like double-click
 - ~file+emacs:/path/to/file~                  :: force opening by Emacs
 - ~docview:papers/last.pdf::NNN~              :: open in doc-view mode at page
 - ~id:B7423F4D-2E8A-471B-8810-C40F074717E9~   :: Link to heading by ID
 - ~news:comp.emacs~                           :: Usenet link
 - ~mailto:adent@galaxy.net~                   :: Mail link
 - ~vm:folder~                                 :: VM folder link
 - ~vm:folder#id~                              :: VM message link
 - ~vm://myself@some.where.org/folder#id~      :: VM on remote machine
 - ~vm-imap:account:folder~                    :: VM IMAP folder link
 - ~vm-imap:account:folder#id~                 :: VM IMAP message link
 - ~wl:folder~                                 :: WANDERLUST folder link
 - ~wl:folder#id~                              :: WANDERLUST message link
 - ~mhe:folder~                                :: MH-E folder link
 - ~mhe:folder#id~                             :: MH-E message link
 - ~rmail:folder~                              :: RMAIL folder link
 - ~rmail:folder#id~                           :: RMAIL message link
 - ~gnus:group~                                :: Gnus group link
 - ~gnus:group#id~                             :: Gnus article link
 - ~bbdb:R.*Stallman~                          :: BBDB link (with regexp)
 - ~irc:/irc.com/#emacs/bob~                   :: IRC link
 - ~info:org#External links~                   :: Info node link
 - ~shell:ls *.org~                            :: A shell command
 - ~elisp:org-agenda~                          :: Interactive Elisp command
 - ~elisp:(find-file-other-frame "Elisp.org")~ :: Elisp form to evaluate


For customizing Org to add new link types [[Adding hyperlink types]].

A link should be enclosed in double brackets and may contain a
descriptive text to be displayed instead of the URL (see [[Link format]]),
for example:

#+begin_src org
  [[http://www.gnu.org/software/emacs/][GNU Emacs]]
#+end_src

@@info:@noindent@@ If the description is a file name or URL that points to
an image, HTML export (see [[HTML export]]) will inline the image as a
clickable button.  If there is no description at all and the link
points to an image, that image will be inlined into the exported HTML
file.

@@info:@cindex square brackets, around links@@
@@info:@cindex plain text external links@@

Org also finds external links in the normal text and activates them as
links.  If spaces must be part of the link (for example in
@@info:@samp{@@bbdb:Richard Stallman@@info:}@@), or if you need to remove
ambiguities about the end of the link, enclose them in square
brackets.

** Handling links
   :PROPERTIES:
   :DESCRIPTION: URL-like links to the world
   :END:
@@info:@cindex links, handling@@

Org provides methods to create a link in the correct syntax, to
insert it into an Org file, and to follow the link.

#+attr_texinfo: :table-type "table" :indic "@asis"
  - @@info:@kbd{@@C-c l@@info:}@@ ~org-store-link~ :: Store a link to the current
       location.  This is a /global/ command (you must create the key
       binding yourself) which can be used in any buffer to create a
       link.  The link will be stored for later insertion into an Org
       buffer (see below).  What kind of link will be created depends
       on the current buffer:

       @@info:@cindex storing links@@
       @@info:@kindex C-c l@@
       @@info:@findex org-store-link@@
    - Org mode buffers :: For Org files, if there is a
         @@info:@samp{@@<<target>>@@info:}@@ at the cursor, the link points to the
         target.  Otherwise it points to the current headline, which
         will also be the description.[fn:39]

         @@info:@vindex org-link-to-org-use-id@@
         @@info:@cindex property, CUSTOM_ID@@
         @@info:@cindex property, ID@@

         If the headline has a ~CUSTOM_ID~ property, a link to this
         custom ID will be stored.  In addition or alternatively
         (depending on the value of ~org-link-to-org-use-id~), a
         globally unique ~ID~ property will be created and/or used to
         construct a link.  So using this command in Org buffers will
         potentially create two links: a human-readable from the
         custom ID, and one that is globally unique and works even if
         the entry is moved from file to file.  Later, when inserting
         the link, you need to decide which one to use.

    - Email/News clients: VM, Rmail, Wanderlust, MH-E, Gnus :: Pretty
         much all Emacs mail clients are supported.  The link will
         point to the current article, or, in some GNUS buffers, to
         the group.  The description is constructed from the author
         and the subject.

    - Web browsers: W3 and W3M :: Here the link will be the current
         URL, with the page title as description.

    - Contacts: BBDB :: Links created in a BBDB buffer will point to
                        the current entry.
    - Chat: IRC :: For IRC links, if you set the variable
                   ~org-irc-link-to-logs~ to ~t~, a ~file:~
                   style link to the relevant point in the logs for
                   the current conversation is created. Otherwise an
                   ~irc:/~ style link to the
                   user/channel/server under the point will be stored.

                   @@info:@vindex org-irc-link-to-logs@@
                   
    - Other files :: For any other files, the link will point to the
                     file, with a search string (see [[Search options]])
                     pointing to the contents of the current line. If
                     there is an active region, the selected words
                     will form the basis of the search string. If the
                     automatically created link is not working
                     correctly or accurately enough, you can write
                     custom functions to select the search string and
                     to do the search for particular file types---see
                     [[Custom searches]]. The key binding @@info:@kbd{@@C-c l@@info:}@@
                     is only a suggestion---see
                     {{{ref(Installation)}}}.

    - Agenda view :: When the cursor is in an agenda view, the created
                     link points to the entry referenced by the
                     current line.

  - @@info:@kbd{@@C-c C-l@@info:}@@ ~org-insert-link~ :: Insert a link.[fn:40] This
       prompts for a link to be inserted into the buffer. You can just
       type a link, using text for an internal link, or one of the
       link type prefixes mentioned in the examples above. The link
       will be inserted into the buffer,[fn:41] along with a
       descriptive text. If some text was selected when this command
       is called, the selected text becomes the default description.

       @@info:@cindex link completion@@ 
       @@info:@cindex completion, of links@@
       @@info:@cindex inserting links@@
       @@info:@vindex org-keep-stored-link-after-insertion@@
       @@info:@kindex C-c C-l@@
       @@info:@findex org-insert-link@@
    - Inserting stored links :: All links stored during the current
         session are part of the history for this prompt, so you can
         access them with @@info:@key{@@up@@info:}@@ and @@info:@key{@@down@@info:}@@ (or
         @@info:@kbd{@@M-p/n@@info:}@@).

    - Completion support :: Completion with @@info:@key{@@TAB@@info:}@@ will help
         you to insert valid link prefixes like ~http:~ or
         ~ftp:~, including the prefixes defined through link
         abbreviations (see [[Link abbreviations]]). If you press
         @@info:@key{@@RET@@info:}@@ after inserting only the
         @@info:@var{prefix}@@, Org will offer specific completion
         support for some link types.[fn:42] For example, if you type
         @@info:@kbd{@@file@@info:@key{@@RET@@info:}@@@@info:}@@, file name completion (alternative
         access: @@info:@kbd{@@C-u C-c C-l@@info:}@@, see below) will be offered,
         and after @@info:@kbd{@@bbdb@@info:@key{@@RET@@info:}@@@@info:}@@ you can complete contact
         names.

  - @@info:@kbd{@@C-u C-c C-l@@info:}@@ :: When @@info:@kbd{@@C-c C-l@@info:}@@ is called with a
       @@info:@kbd{@@C-u@@info:}@@ prefix argument, a link to a file will be
       inserted and you may use file name completion to select the
       name of the file. The path to the file is inserted relative to
       the directory of the current Org file, if the linked file is in
       the current directory or in a sub-directory of it, or if the
       path is written relative to the current directory using
       @@info:@samp{@@../@@info:}@@. Otherwise an absolute path is used, if
       possible with @@info:@samp{@@~/@@info:}@@ for your home directory. You can
       force an absolute path with two @@info:@kbd{@@C-u@@info:}@@ prefixes.

       @@info:@cindex file name completion@@ 
       @@info:@cindex completion, of file names@@ 
       @@info:@kindex C-u C-c C-l@@

  - @@info:@kbd{@@C-c C-l@@info:}@@ (with cursor on existing link) :: When the
       cursor is on an existing link, @@info:@kbd{@@C-c C-l@@info:}@@ allows you to
       edit the link and description parts of the link.

       @@info:@cindex following links@@ 

    - @@info:@kbd{@@C-c C-o@@info:}@@ ~org-open-at-point~ :: Open link at
         point. This will launch a web browser for URLs (using
         @@info:@command{@@browse-url-at-point@@info:}@@), run
         VM/MH-E/Wanderlust/Rmail/Gnus/BBDB for the corresponding
         links, and execute the command in a shell link.  When the
         cursor is on an internal link, this command runs the
         corresponding search. When the cursor is on a TAG list in a
         headline, it creates the corresponding TAGS view. If the
         cursor is on a timestamp, it compiles the agenda for that
         date. Furthermore, it will visit text and remote files in
         ~file:~ links with Emacs and select a suitable
         application for local non-text files. Classification of files
         is based on file extension only. See option ~org-file-apps~.
         If you want to override the default application and visit the
         file with Emacs, use a @@info:@kbd{@@C-u@@info:}@@ prefix. If you want to
         avoid opening in Emacs, use a @@info:@kbd{@@C-u C-u@@info:}@@ prefix. If
         the cursor is on a headline, but not on a link, offer all
         links in the headline and entry text. If you want to setup
         the frame configuration for following links, customize
         ~org-link-frame-setup~.

         @@info:@vindex org-file-apps@@
         @@info:@vindex org-link-frame-setup@@ 
         @@info:@kindex C-c C-o@@
         @@info:@findex org-open-at-point@@
    - @@info:@key{@@RET@@info:}@@ :: When ~org-return-follows-link~ is set,
                        @@info:@key{@@RET@@info:}@@ will also follow the link at
                        point.

                        @@info:@vindex org-return-follows-link@@
                        @@info:@kindex RET@@
    - @@info:@key{@@mouse-2@@info:}@@ or @@info:@key{@@mouse-1@@info:}@@ :: On links,
         @@info:@kbd{@@mouse-2@@info:}@@ will open the link just as @@info:@kbd{@@C-c C-o@@info:}@@ would. Under Emacs 22 and later, @@info:@kbd{@@mouse-1@@info:}@@
         will also follow a link.

         @@info:@kindex mouse-2@@
         @@info:@kindex mouse-1@@
    - @@info:@key{@@mouse-3@@info:}@@ :: Like @@info:@kbd{@@mouse-2@@info:}@@, but force file
         links to be opened with Emacs, and internal links to be
         displayed in another window.[fn:43]

         @@info:@vindex org-display-internal-link-with-indirect-buffer@@
         @@info:@kindex mouse-3@@
    - @@info:@kbd{@@C-c C-x C-v@@info:}@@ ~org-toggle-inline-images~ ::
         @@info:@cindex inlining images@@
         @@info:@cindex images, inlining@@
         @@info:@vindex org-startup-with-inline-images@@
         @@info:@cindex ~inlineimages~, STARTUP keyword@@
         @@info:@cindex ~noinlineimages~, STARTUP keyword@@
         @@info:@kindex C-c C-x C-v@@
         @@info:@findex org-toggle-inline-images@@

         Toggle the inline display of linked images.  Normally this
         will only inline images that have no description part in the
         link, i.e., images that will also be inlined during export.
         When called with a prefix argument, also display images that
         do have a link description.  You can ask for inline images to
         be displayed at startup by configuring the variable
         ~org-startup-with-inline-images~.[fn:44]

    - @@info:@kbd{@@C-c %@@info:}@@ ~org-mark-ring-push~ ::
         @@info:@kindex C-c %@@
         @@info:@findex org-mark-ring-push@@
         @@info:@cindex mark ring@@

         Push the current position onto the mark ring, to be able to
         return easily. Commands following an internal link do this
         automatically.

    - @@info:@kbd{@@C-c &@@info:}@@ ~org-mark-ring-goto~ ::
         @@info:@kindex C-c &@@
         @@info:@findex org-mark-ring-goto@@
         @@info:@cindex links, returning to@@

         Jump back to a recorded position. A position is recorded by
         the commands following internal links, and by @@info:@kbd{@@C-c %@@info:}@@. Using this command several times in direct succession
         moves through a ring of previously recorded positions.

  - @@info:@kbd{@@C-c C-x C-n@@info:}@@ ~org-next-link~ ::
       @@info:@itemx@@ @@info:@kbd{@@C-c C-x C-p@@info:}@@ ~org-previous-link~
       @@info:@cindex links, finding next/previous@@
       
       @@info:@kindex C-c C-x C-p@@
       @@info:@findex org-previous-link@@
       @@info:@kindex C-c C-x C-n@@
       @@info:@findex org-next-link@@

       Move forward/backward to the next link in the buffer. At the
       limit of the buffer, the search fails once, and then wraps
       around. The key bindings for this are really too long; you
       might want to bind this also to @@info:@kbd{@@C-n@@info:}@@ and
       @@info:@kbd{@@C-p@@info:}@@

       #+header: :exports code
       #+header: :eval no
       #+begin_src emacs-lisp
         (add-hook 'org-load-hook
                   (lambda ()
                     (define-key org-mode-map "\C-n" 'org-next-link)
                     (define-key org-mode-map "\C-p" 'org-previous-link)))
       #+end_src

** Using links outside Org
   :PROPERTIES:
   :DESCRIPTION: Linking from my C source code?
   :END:

You can insert and follow links that have Org syntax not only in Org,
but in any Emacs buffer.  For this, you should create two global
commands, like this (please select suitable global keys yourself):

#+header: :exports code
#+header: :eval no
#+begin_src emacs-lisp
  (global-set-key "\C-c L" 'org-insert-link-global)
  (global-set-key "\C-c o" 'org-open-at-point-global)
#+end_src

** Link abbreviations
   :PROPERTIES:
   :DESCRIPTION: Shortcuts for writing complex links
   :END:
@@info:@cindex link abbreviations@@
@@info:@cindex abbreviation, links@@

Long URLs can be cumbersome to type, and often many similar links are
needed in a document.  For this you can use link abbreviations.  An
abbreviated link looks like this

#+begin_src org
[[linkword:tag][description]]
#+end_src

@@info:@vindex org-link-abbrev-alist@@

@@info:@noindent@@ where the tag is optional.  The /linkword/ must be a
word, starting with a letter, followed by letters, numbers,
@@info:@samp{@@-@@info:}@@, and @@info:@samp{@@_@@info:}@@.  Abbreviations are resolved
according to the information in the variable ~org-link-abbrev-alist~
that relates the linkwords to replacement text.  Here is an example:

#+header: :exports code
#+header: :eval no
#+begin_src emacs-lisp
  (setq org-link-abbrev-alist
    '(("bugzilla"  . "http://10.1.2.9/bugzilla/show_bug.cgi?id=")
      ("url-to-ja" . "http://translate.google.fr/translate?sl=en&tl=ja&u=%h")
      ("google"    . "http://www.google.com/search?q=")
      ("gmap"      . "http://maps.google.com/maps?q=%s")
      ("omap"      . "http://nominatim.openstreetmap.org/search?q=%s&polygon=1")
      ("ads"       . "http://adsabs.harvard.edu/cgi-bin/nph-abs_connect?author=%s&db_key=AST")))
#+end_src

If the replacement text contains the string @@info:@samp{@@%s@@info:}@@, it will be
replaced with the tag.  Using @@info:@samp{@@%h@@info:}@@ instead of @@info:@samp{@@%s@@info:}@@
will url-encode the tag (see the example above, where we need to
encode the URL parameter.)  Using @@info:@samp{@@%(my-function)@@info:}@@ will pass
the tag to a custom function, and replace it by the resulting string.

If the replacement text don't contain any specifier, it will simply be
appended to the string in order to create the link.

Instead of a string, you may also specify a function that will be
called with the tag as the only argument to create the link.

With the above setting, you could link to a specific bug with
~[[bugzilla:129]]~, search the web for @@info:@samp{@@OrgMode@@info:}@@ with
~[[google:OrgMode]]~, show the map location of the Free Software
Foundation ~[[gmap:51 Franklin Street, Boston]]~ or of Carsten office
~[[omap:Science Park 904, Amsterdam, The Netherlands]]~ and find out what
the Org author is doing besides Emacs hacking with ~[[ads:Dominik,C]]~.

If you need special abbreviations just for a single Org buffer, you
can define them in the file with

@@info:@cindex #+LINK@@
#+begin_src org
  ,#+LINK: bugzilla  http://10.1.2.9/bugzilla/show_bug.cgi?id=
  ,#+LINK: google    http://www.google.com/search?q=%s
#+end_src

@@info:@noindent@@ In-buffer completion (see [[Completion]]) can be used after
@@info:@samp{@@[@@info:}@@ to complete link abbreviations.  You may also define a
function ~org-PREFIX-complete-link~ that implements special (e.g.:
completion) support for inserting such a link with @@info:@kbd{@@C-c C-l@@info:}@@.
Such a function should not accept any arguments, and return the full
link with prefix.

** Search options
   :PROPERTIES:
   :DESCRIPTION: Linking to a specific location
   :END:
@@info:@cindex search option in file links@@
@@info:@cindex file links, searching@@

File links can contain additional information to make Emacs jump to a
particular location in the file when following a link.  This can be a
line number or a search option after a double@footnote{For backward
compatibility, line numbers can also follow a single colon.} colon.
For example, when the command @@info:@kbd{@@C-c l@@info:}@@ creates a link (see
[[Handling links]]) to a file, it encodes the words in the current line as
a search string that can be used to find this line back later when
following the link with @@info:@kbd{@@C-c C-o@@info:}@@.

Here is the syntax of the different ways to attach a search to a file
link, together with an explanation:

#+begin_src org
  [[file:~/code/main.c::255]]
  [[file:~/xx.org::My Target]]
  [[file:~/xx.org::*My Target]]
  [[file:~/xx.org::#my-custom-id]]
  [[file:~/xx.org::/regexp/]]
#+end_src

#+attr_texinfo: :indic "@code"
- @item 255 :: Jump to line 255.
- @item My Target :: Search for a link target ~<<My Target>>~, or do a text search for @@info:@samp{@@my target@@info:}@@,
     similar to the search in internal links, see [[Internal links]].
     In HTML export (see [[HTML export]]), such a file link will
     become a HTML reference to the corresponding named anchor in the
     linked file.
- @item *My Target :: In an Org file, restrict search to headlines.
- @item #my-custom-id :: Link to a heading with a ~CUSTOM_ID~ property
- @item /regexp/ :: Do a regular expression search for ~regexp~.  This
                    uses the Emacs command ~occur~ to list all matches
                    in a separate window.  If the target file is in
                    Org mode, ~org-occur~ is used to create a sparse
                    tree with the matches. @c If the target file is a
                    directory, @c ~grep~ will be used to search all
                    files in the directory.

As a degenerate case, a file link with an empty file name can be used
to search the current file.  For example, @@info:@samp{@@[[file:::find me]]@@info:}@@ does a
search for ~find me~ in the current file, just as
~[[find me]]~ would.

** Custom searches
   :PROPERTIES:
   :DESCRIPTION: When the default search is not enough
   :END:
@@info:@cindex custom search strings@@
@@info:@cindex search strings, custom@@

The default mechanism for creating search strings and for doing the
actual search related to a file link may not work correctly in all
cases.  For example, {{{bibtex}}} database files have many entries
like @@info:@samp{@@year="1993"@@info:}@@ which would not result in good search
strings, because the only unique identification for a {{{bibtex}}}
entry is the citation key.

@@info:@vindex org-create-file-search-functions@@
@@info:@vindex org-execute-file-search-functions@@

If you come across such a problem, you can write custom functions to
set the right search string for a particular file type, and to do the
search for the string in the file.  Using ~add-hook~, these functions
need to be added to the hook variables
~org-create-file-search-functions~ and
~org-execute-file-search-functions~.  See the docstring for these
variables for more information.  Org actually uses this mechanism for
{{{bibtex}}} database files, and you can use the corresponding code as
an implementation example.  See the file @@info:@file{@@org-bibtex.el@@info:}@@.

* FIXED TODO items
  :PROPERTIES:
  :DESCRIPTION: Every tree branch can be a TODO item
  :TEXINFO_MENU_TITLE: TODO Items
  :END:
@@info:@cindex TODO items@@

Org mode does not maintain TODO lists as separate documents.[fn:45]
Instead, TODO items are an integral part of the notes file, because
TODO items usually come up while taking notes! With Org mode, simply
mark any entry in a tree as being a TODO item. In this way,
information is not duplicated, and the entire context from which the
TODO item emerged is always present.

Of course, this technique for managing TODO items scatters them
throughout your notes file.  Org mode compensates for this by providing
methods to give you an overview of all the things that you have to do.

** TODO basics
   :PROPERTIES:
   :DESCRIPTION: Marking and displaying TODO entries
   :TITLE:    Basic TODO functionality
   :END:

Any headline becomes a TODO item when it starts with the word
@@info:@samp{@@TODO@@info:}@@, for example:

#+begin_src org
  ,*** TODO Write letter to Sam Fortune
#+end_src

@@info:@noindent@@ The most important commands to work with TODO entries
are:

#+attr_texinfo: :table-type "table" :indic "@asis"
- @@info:@kbd{@@C-c C-t@@info:}@@ ~org-todo~ ::
  @@info:@kindex C-c C-t@@
  @@info:@cindex cycling, of TODO states@@

  Rotate the TODO state of the current item among

  #+begin_example
   ,-> (unmarked) -> TODO -> DONE --.
   '--------------------------------'
  #+end_example

 The same rotation can also be done ``remotely'' from the timeline and
 agenda buffers with the @@info:@kbd{@@t@@info:}@@ command key (see [[Agenda commands]]).

- @@info:@kbd{@@C-u C-c C-t@@info:}@@ ::
  @@info:@kindex C-u C-c C-t@@

  Select a specific keyword using completion or (if it has been set up)
  the fast selection interface.  For the latter, you need to assign keys
  to TODO states, see [[Per-file keywords]], and [[Setting tags]], for
  more information.

  @@info:@kindex S-@key{right}@@
  @@info:@kindex S-@key{left}@@

- @@info:@kbd{@@S-@@info:@key{@@right@@info:}@@@@info:}@@ @@info:@kbd{@@S-@@info:@key{@@left@@info:}@@@@info:}@@ ::

  @@info:@vindex org-treat-S-cursor-todo-selection-as-state-change@@

     Select the following/preceding TODO state, similar to cycling.
     Useful mostly if more than two TODO states are possible (see [[TODO
     extensions]]). See also [[Conflicts]], for a discussion of the
     interaction with ~shift-selection-mode~. See also the variable
     ~org-treat-S-cursor-todo-selection-as-state-change~.

- @@info:@kbd{@@C-c / t@@info:}@@ ~org-show-todo-tree~ ::
  @@info:@kindex C-c / t@@

  @@info:@cindex sparse tree, for TODO@@
  @@info:@vindex org-todo-keywords@@

  View TODO items in a /sparse tree/ (see [[Sparse trees]]). Folds the entire
  buffer, but shows all TODO items (with not-DONE state) and the
  headings hierarchy above them. With a prefix argument (or by using
  @@info:@kbd{@@C-c / T@@info:}@@), search for a specific TODO. You will be
  prompted for the keyword, and you can also give a list of keywords
  like ~KWD1|KWD2|...~ to list entries that match any one of these
  keywords. With a numeric prefix argument N, show the tree for the
  Nth keyword in the variable ~org-todo-keywords~. With two prefix
  arguments, find all TODO states, both un-done and done.

- @@info:@kbd{@@C-c a t@@info:}@@ ~org-todo-list~ ::
  @@info:@kindex C-c a t@@

  Show the global TODO list.  Collects the TODO items (with not-DONE states)
  from all agenda files (see [[Agenda Views]]) into a single buffer.  The new
  buffer will be in ~agenda-mode~, which provides commands to examine and
  manipulate the TODO entries from the new buffer (see [[Agenda commands]]).
  See [[Global TODO list]], for more information.

- @@info:@kbd{@@S-M-@@info:@key{@@RET@@info:}@@@@info:}@@ ~org-insert-todo-heading~ ::
  @@info:@kindex S-M-@key{RET}@@

   Insert a new TODO entry below the current one.


@@info:@noindent@@
@@info:@vindex org-todo-state-tags-triggers@@
Changing a TODO state can also trigger tag changes.  See the docstring of the
option ~org-todo-state-tags-triggers~ for details.

** TODO extensions
   :PROPERTIES:
   :DESCRIPTION: Work flow and assignments
   :TITLE:    Extended use of TODO keywords
   :END:

@@info:@cindex extended TODO keywords@@

@@info:@vindex org-todo-keywords@@

By default, marked TODO entries have one of only two states: TODO and
DONE. Org mode allows you to classify TODO items in more complex ways
with /TODO keywords/ (stored in ~org-todo-keywords~). With special
setup, the TODO keyword system can work differently in different
files.

Note that /tags/ are another way to classify headlines in general and
TODO items in particular (see [[Tags]]).


*** Workflow states
    :PROPERTIES:
    :DESCRIPTION: From TODO to DONE in steps
    :TITLE:    TODO keywords as workflow states
    :END:
@@info:@cindex TODO workflow@@
@@info:@cindex workflow states as TODO keywords@@

You can use TODO keywords to indicate different /sequential/ states
in the process of working on an item, for example:[fn:50]

#+header: :exports code
#+header: :eval no
#+begin_src emacs-lisp
(setq org-todo-keywords
  '((sequence "TODO" "FEEDBACK" "VERIFY" "|" "DONE" "DELEGATED")))
#+end_src

The vertical bar separates the TODO keywords (states that /need
action/) from the DONE states (which need /no further action/).  If
you don't provide the separator bar, the last state is used as the DONE
state.

@@info:@cindex completion, of TODO keywords@@

With this setup, the command @@info:@kbd{@@C-c C-t@@info:}@@ will cycle an entry
from TODO to FEEDBACK, then to VERIFY, and finally to DONE and
DELEGATED. You may also use a numeric prefix argument to quickly
select a specific state. For example @@info:@kbd{@@C-3 C-c C-t@@info:}@@ will
change the state immediately to VERIFY. Or you can use
@@info:@kbd{@@S-@@info:@key{@@left@@info:}@@@@info:}@@ to go backward through the sequence. If you
define many keywords, you can use in-buffer completion (see [[Completion]]) or
even a special one-key selection scheme (see [[Fast access to TODO states]])
to insert these words into the buffer. Changing a TODO state can be
logged with a timestamp, see [[Tracking TODO state changes]], for
more information.

*** TODO types
    :PROPERTIES:
    :DESCRIPTION: I do this, Fred does the rest
    :TITLE:    TODO keywords as types
    :END:
@@info:@cindex TODO types@@
@@info:@cindex names as TODO keywords@@
@@info:@cindex types as TODO keywords@@

The second possibility is to use TODO keywords to indicate different
/types/ of action items.  For example, you might want to indicate
that items are for ``work'' or ``home''.  Or, when you work with several
people on a single project, you might want to assign action items
directly to persons, by using their names as TODO keywords.  This would
be set up like this:

#+header: :exports code
#+header: :eval no
#+begin_src emacs-lisp
(setq org-todo-keywords '((type "Fred" "Sara" "Lucy" "|" "DONE")))
#+end_src

In this case, different keywords do not indicate a sequence, but rather
different types.  So the normal work flow would be to assign a task to a
person, and later to mark it DONE.  Org mode supports this style by adapting
the workings of the command @@info:@kbd{@@C-c C-t@@info:}@@.[fn:46]  When used several
times in succession, it will still cycle through all names, in order to first
select the right type for a task.  But when you return to the item after some
time and execute @@info:@kbd{@@C-c C-t@@info:}@@ again, it will switch from any name directly
to DONE.  Use prefix arguments or completion to quickly select a specific
name.  You can also review the items of a specific TODO type in a sparse tree
by using a numeric prefix to @@info:@kbd{@@C-c / t@@info:}@@.  For example, to see all things
Lucy has to do, you would use @@info:@kbd{@@C-3 C-c / t@@info:}@@.  To collect Lucy's items
from all agenda files into a single buffer, you would use the numeric prefix
argument as well when creating the global TODO list: @@info:@kbd{@@C-3 C-c a t@@info:}@@.

*** Multiple sets in one file
    :PROPERTIES:
    :DESCRIPTION: Mixing it all, and still finding your way
    :TITLE:    Multiple keyword sets in one file
    :END:
@@info:@cindex TODO keyword sets@@

Sometimes you may want to use different sets of TODO keywords in
parallel.  For example, you may want to have the basic
~TODO~ / ~DONE~, but also a workflow for bug fixing, and a
separate state indicating that an item has been canceled (so it is not
DONE, but also does not require action).  Your setup would then look
like this:

#+header: :exports code
#+header: :eval no
#+begin_src emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO" "|" "DONE")
        (sequence "REPORT" "BUG" "KNOWNCAUSE" "|" "FIXED")
        (sequence "|" "CANCELED")))
#+end_src

The keywords should all be different, this helps Org mode to keep track
of which subsequence should be used for a given entry.  In this setup,
@@info:@kbd{@@C-c C-t@@info:}@@ only operates within a subsequence, so it switches from
~DONE~ to (nothing) to ~TODO~, and from ~FIXED~ to
(nothing) to ~REPORT~.  Therefore you need a mechanism to initially
select the correct sequence.  Besides the obvious ways like typing a
keyword or using completion, you may also apply the following commands:

#+attr_texinfo: :table-type "table" :indic "@asis"
@@info:@kindex C-S-@key{right}@@
@@info:@kindex C-S-@key{left}@@
@@info:@kindex C-u C-u C-c C-t@@
- @@info:@kbd{@@C-u C-u C-c C-t@@info:}@@ @@info:@kbd{@@C-S-@@info:@key{@@right@@info:}@@@@info:}@@ @@info:@kbd{@@C-S-@@info:@key{@@left@@info:}@@@@info:}@@ ::

  These keys jump from one TODO subset to the next. In the above
  example, @@info:@kbd{@@C-u C-u C-c C-t@@info:}@@ or @@info:@kbd{@@C-S-@@info:@key{@@right@@info:}@@@@info:}@@
  would jump from ~TODO~ or ~DONE~ to ~REPORT~, and any of the
  words in the second row to ~CANCELED~. Note that the
  @@info:@kbd{@@C-S-@@info:}@@ key binding conflict with ~shift-selection-mode~
  (see [[Conflicts]]).

- @@info:@kbd{@@S-@@info:@key{@@right@@info:}@@@@info:}@@ @@info:@kbd{@@S-@@info:@key{@@left@@info:}@@@@info:}@@ ::
  @@info:@kindex S-@key{right}@@
  @@info:@kindex S-@key{left}@@

  @@info:@kbd{@@S-@@info:@key{@@left@@info:}@@@@info:}@@ and @@info:@kbd{@@S-@@info:@key{@@right@@info:}@@@@info:}@@ walk through /all/
  keywords from all sets, so for example @@info:@kbd{@@S-@@info:@key{@@right@@info:}@@@@info:}@@ would switch
  from ~DONE~ to ~REPORT~ in the example above.  See also
  [[Conflicts]], for a discussion of the interaction with
  ~shift-selection-mode~.


*** Fast access to TODO states
    :PROPERTIES:
    :DESCRIPTION: Single letter selection of state
    :END:
If you would like to quickly change an entry to an arbitrary TODO state
instead of cycling through the states, you can set up keys for single-letter
access to the states.  This is done by adding the selection character after
each keyword, in parentheses.[fn:47]  For example:

#+header: :exports code
#+header: :eval no
#+begin_src emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO(t)" "|" "DONE(d)")
        (sequence "REPORT(r)" "BUG(b)" "KNOWNCAUSE(k)" "|" "FIXED(f)")
        (sequence "|" "CANCELED(c)")))
#+end_src

@@info:@vindex org-fast-tag-selection-include-todo@@

If you then press @@info:@kbd{@@C-c C-t@@info:}@@ followed by the selection key,
the entry will be switched to this state. @@info:@kbd{@@SPC@@info:}@@ can be used
to remove any TODO keyword from an entry.[fn:48]

*** Per-file keywords
    :PROPERTIES:
    :DESCRIPTION: Different files, different requirements
    :TITLE:    Setting up keywords for individual files
    :END:
@@info:@cindex keyword options@@
@@info:@cindex per-file keywords@@
@@info:@cindex #+TODO@@
@@info:@cindex #+TYP_TODO@@
@@info:@cindex #+SEQ_TODO@@

It can be very useful to use different aspects of the TODO mechanism in
different files.  For file-local settings, you need to add special lines
to the file which set the keywords and interpretation for that file
only.  For example, to set one of the two examples discussed above, you
need one of the following lines, starting in column zero anywhere in the
file:

#+begin_example
,#+TODO: TODO FEEDBACK VERIFY | DONE CANCELED
#+end_example

@@info:@noindent@@ (you may also write ~#+SEQ_TODO~ to be explicit about the
interpretation, but it means the same as ~#+TODO~), or

#+begin_example
,#+TYP_TODO: Fred Sara Lucy Mike | DONE
#+end_example

A setup for using several sets in parallel would be:

#+begin_example
,#+TODO: TODO | DONE
,#+TODO: REPORT BUG KNOWNCAUSE | FIXED
,#+TODO: | CANCELED
#+end_example

@@info:@cindex completion, of option keywords@@
@@info:@kindex M-@key{TAB}@@
@@info:@noindent@@ To make sure you are using the correct keyword, type
@@info:@samp{@@#+@@info:}@@ into the buffer and then use @@info:@kbd{@@M-@@info:@key{@@TAB@@info:}@@@@info:}@@ completion.

@@info:@cindex DONE, final TODO keyword@@
Remember that the keywords after the vertical bar (or the last keyword
if no bar is there) must always mean that the item is DONE (although you
may use a different word).  After changing one of these lines, use
@@info:@kbd{@@C-c C-c@@info:}@@ with the cursor still in the line to make the changes
known to Org mode.[fn:49]

*** Faces for TODO keywords
    :PROPERTIES:
    :DESCRIPTION: Highlighting states
    :END:
@@info:@cindex faces, for TODO keywords@@
@@info:@vindex org-todo @r{(face)}@@
@@info:@vindex org-done @r{(face)}@@
@@info:@vindex org-todo-keyword-faces@@

Org mode highlights TODO keywords with special faces: ~org-todo~
for keywords indicating that an item still has to be acted upon, and
~org-done~ for keywords indicating that an item is finished.  If
you are using more than 2 different states, you might want to use
special faces for some of them.  This can be done using the variable
~org-todo-keyword-faces~.  For example:

#+header: :exports code
#+header: :eval no
#+begin_src emacs-lisp
(setq org-todo-keyword-faces
      '(("TODO" . org-warning) ("STARTED" . "yellow")
        ("CANCELED" . (:foreground "blue" :weight bold))))
#+end_src

While using a list with face properties as shown for CANCELED /should/
work, this does not always seem to be the case.  If necessary, define a
special face and use that.  A string is interpreted as a color.  The variable
~org-faces-easy-properties~ determines if that color is interpreted as a
foreground or a background color.

*** TODO dependencies
    :PROPERTIES:
    :DESCRIPTION: When one task needs to wait for others
    :END:
@@info:@cindex TODO dependencies@@
@@info:@cindex dependencies, of TODO states@@
@@info:@vindex org-enforce-todo-dependencies@@
@@info:@cindex property, ORDERED@@

The structure of Org files (hierarchy and lists) makes it easy to define TODO
dependencies.  Usually, a parent TODO task should not be marked DONE until
all subtasks (defined as children tasks) are marked as DONE.  And sometimes
there is a logical sequence to a number of (sub)tasks, so that one task
cannot be acted upon before all siblings above it are done.  If you customize
the variable ~org-enforce-todo-dependencies~, Org will block entries
from changing state to DONE while they have children that are not DONE.
Furthermore, if an entry has a property ~ORDERED~, each of its children
will be blocked until all earlier siblings are marked DONE.  Here is an
example:

#+begin_src org
  ,* TODO Blocked until (two) is done
  ,** DONE one
  ,** TODO two
  
  ,* Parent
    :PROPERTIES:
    :ORDERED: t
    :END:
  ,** TODO a
  ,** TODO b, needs to wait for (a)
  ,** TODO c, needs to wait for (a) and (b)
#+end_src

#+attr_texinfo: :table-type "table" :indic "@asis"
- @@info:@kbd{@@C-c C-x o@@info:}@@ ~org-toggle-ordered-property~ ::
  @@info:@kindex C-c C-x o@@
  @@info:@vindex org-track-ordered-property-with-tag@@
  @@info:@cindex property, ORDERED@@

  Toggle the ~ORDERED~ property of the current entry.  A property is used
  for this behavior because this should be local to the current entry, not
  inherited like a tag.  However, if you would like to /track/ the value of
  this property with a tag for better visibility, customize the variable
  ~org-track-ordered-property-with-tag~.
- @@info:@kbd{@@C-u C-u C-u C-c C-t@@info:}@@ ::
  @@info:@kindex C-u C-u C-u C-c C-t@@

  Change TODO state, circumventing any state blocking.


@@info:@vindex org-agenda-dim-blocked-tasks@@

If you set the variable ~org-agenda-dim-blocked-tasks~, TODO entries
that cannot be closed because of such dependencies will be shown in a dimmed
font or even made invisible in agenda views (see [[Agenda Views]]).

@@info:@cindex checkboxes and TODO dependencies@@
@@info:@vindex org-enforce-todo-dependencies@@

You can also block changes of TODO states by looking at checkboxes
(see [[Checkboxes]]).  If you set the variable
~org-enforce-todo-checkbox-dependencies~, an entry that has unchecked
checkboxes will be blocked from switching to DONE.

If you need more complex dependency structures, for example dependencies
between entries in different trees or files, check out the contributed
module @@info:@file{@@org-depend.el@@info:}@@.

@@info:@page@@

** Progress logging
   :PROPERTIES:
   :DESCRIPTION: Dates and notes for progress
   :END:
@@info:@cindex progress logging@@
@@info:@cindex logging, of progress@@

Org mode can automatically record a timestamp and possibly a note when
you mark a TODO item as DONE, or even each time you change the state of
a TODO item.  This system is highly configurable, settings can be on a
per-keyword basis and can be localized to a file or even a subtree.  For
information on how to clock working time for a task, see [[Clocking work time]].

*** Closing items
    :PROPERTIES:
    :DESCRIPTION: When was this entry marked DONE?
    :END:

The most basic logging is to keep track of /when/ a certain TODO
item was finished.  This is achieved with:[fn:51]

#+header: :exports code
#+header: :eval no
#+begin_src emacs-lisp
(setq org-log-done 'time)
#+end_src

@@info:@noindent@@ Then each time you turn an entry from a TODO (not-done)
state into any of the DONE states, a line @@info:@samp{@@CLOSED: [timestamp]@@info:}@@ will be inserted just after the headline. If you turn
the entry back into a TODO item through further state cycling, that
line will be removed again. If you want to record a note along with
the timestamp, use:[fn:52]

#+header: :exports code
#+header: :eval no
#+begin_src emacs-lisp
(setq org-log-done 'note)
#+end_src

@@info:@noindent@@ You will then be prompted for a note, and that note
will be stored below the entry with a @@info:@samp{@@Closing Note@@info:}@@
heading.

In the timeline (see [[Timeline]]) and in the agenda (see [[Weekly/daily
agenda]]), you can then use the @@info:@kbd{@@l@@info:}@@ key to display the TODO
items with a @@info:@samp{@@CLOSED@@info:}@@ timestamp on each day, giving you an
overview of what has been done.


*** Tracking TODO state changes
    :PROPERTIES:
    :DESCRIPTION: When did the status change?
    :END:
@@info:@cindex drawer, for state change recording@@
@@info:@vindex org-log-states-order-reversed@@
@@info:@vindex org-log-into-drawer@@
@@info:@cindex property, LOG_INTO_DRAWER@@

When TODO keywords are used as workflow states (see [[Workflow
states]]), you might want to keep track of when a state change occurred
and maybe take a note about this change. You can either record just a
timestamp, or a time-stamped note for a change. These records will be
inserted after the headline as an itemized list, newest first.[fn:53]
When taking a lot of notes, you might want to get the notes out of the
way into a drawer (see [[Drawers]]). Customize the variable
~org-log-into-drawer~ to get this behavior---the recommended drawer
for this is called ~LOGBOOK~.[fn:54] You can also overrule the setting
of this variable for a subtree by setting a ~LOG_INTO_DRAWER~
property.

Since it is normally too much to record a note for every state, Org
mode expects configuration on a per-keyword basis for this. This is
achieved by adding special markers @@info:@samp{@@!@@info:}@@ (for a timestamp) or
@@info:@samp{@@@@@@info:}@@ (for a note with timestamp) in parentheses after each
keyword. For example, with the setting:

#+header: :exports code
#+header: :eval no
#+begin_src emacs-lisp
(setq org-todo-keywords
  '((sequence "TODO(t)" "WAIT(w@@/!)" "|" "DONE(d!)" "CANCELED(c@@)")))
#+end_src

@@info:@noindent@@
@@info:@vindex org-log-done@@

you not only define global TODO keywords and fast access keys, but
also request that a time is recorded when the entry is set to
DONE,[fn:55] and that a note is recorded when switching to WAIT or
CANCELED. The setting for WAIT is even more special: the @@info:@samp{@@!@@info:}@@
after the slash means that in addition to the note taken when entering
the state, a timestamp should be recorded when /leaving/ the WAIT
state, if and only if the /target/ state does not configure logging
for entering it. So it has no effect when switching from WAIT to DONE,
because DONE is configured to record a timestamp only. But when
switching from WAIT back to TODO, the @@info:@samp{@@/!@@info:}@@ in the WAIT
setting now triggers a timestamp even though TODO has no logging
configured.

To record a timestamp without a note for TODO keywords configured with
@@info:@samp{@@@@@info:}@@, just type @@info:@kbd{@@C-c C-c@@info:}@@ to enter a blank note
when prompted.

You can use the exact same syntax for setting logging preferences local
to a buffer:

#+begin_example
,#+TODO: TODO(t) WAIT(w@/!) | DONE(d!) CANCELED(c@)
#+end_example

@@info:@cindex property, LOGGING@@

In order to define logging settings that are local to a subtree or a
single item, define a LOGGING property in this entry.  Any non-empty
LOGGING property resets all logging settings to nil.  You may then turn
on logging for this specific tree using STARTUP keywords like
~lognotedone~ or ~logrepeat~, as well as adding state specific
settings like ~TODO(!)~.  For example:

#+begin_example
,* TODO Log each state with only a time
  :PROPERTIES:
  :LOGGING: TODO(!) WAIT(!) DONE(!) CANCELED(!)
  :END:
,* TODO Only log when switching to WAIT, and when repeating
  :PROPERTIES:
  :LOGGING: WAIT(@) logrepeat
  :END:
,* TODO No logging at all
  :PROPERTIES:
  :LOGGING: nil
  :END:
#+end_example

*** DONE Tracking your habits
    :LOGBOOK:
    - State "DONE"       from "DONE"       [2013-01-07 Mon 14:10]
    - State "DONE"       from ""           [2013-01-07 Mon 14:10]
    :END:
    :PROPERTIES:
    :DESCRIPTION: How consistent have you been?
    :END:
@@info:@cindex habits@@

Org has the ability to track the consistency of a special category of TODOs,
called "habits."  A habit has the following properties:

  1. You have enabled the ~habits~ module by customizing the variable
     ~org-modules~.

  2. The habit is a TODO item, with a TODO keyword representing an
     open state.

  3. The property ~STYLE~ is set to the value ~habit~.

  4. The TODO has a scheduled date, usually with a ~.+~ style repeat
     interval. A ~++~ style may be appropriate for habits with time
     constraints, e.g., must be done on weekends, or a ~+~ style for
     an unusual habit that can have a backlog, e.g., weekly reports.

  5. The TODO may also have minimum and maximum ranges specified by
     using the syntax @@info:@samp{@@.+2d/3d@@info:}@@, which says that you want to
     do the task at least every three days, but at most every two
     days.

  6. You must also have state logging for the ~DONE~ state enabled
     (see [[Tracking TODO state changes]]), in order for historical
     data to be represented in the consistency graph. If it is not
     enabled it is not an error, but the consistency graphs will be
     largely meaningless.


To give you an idea of what the above rules look like in action, here's an
actual habit with some history:

#+begin_example
,** TODO Shave
   SCHEDULED: <2009-10-17 Sat .+2d/4d>
   - State "DONE"       from "TODO"       [2009-10-15 Thu]
   - State "DONE"       from "TODO"       [2009-10-12 Mon]
   - State "DONE"       from "TODO"       [2009-10-10 Sat]
   - State "DONE"       from "TODO"       [2009-10-04 Sun]
   - State "DONE"       from "TODO"       [2009-10-02 Fri]
   - State "DONE"       from "TODO"       [2009-09-29 Tue]
   - State "DONE"       from "TODO"       [2009-09-25 Fri]
   - State "DONE"       from "TODO"       [2009-09-19 Sat]
   - State "DONE"       from "TODO"       [2009-09-16 Wed]
   - State "DONE"       from "TODO"       [2009-09-12 Sat]
   :PROPERTIES:
   :STYLE:    habit
   :LAST_REPEAT: [2009-10-19 Mon 00:36]
   :END:
#+end_example

What this habit says is: I want to shave at most every 2 days (given
by the ~SCHEDULED~ date and repeat interval) and at least every 4
days. If today is the 15th, then the habit first appears in the agenda
on Oct 17, after the minimum of 2 days has elapsed, and will appear
overdue on Oct 19, after four days have elapsed.

What's really useful about habits is that they are displayed along
with a consistency graph, to show how consistent you've been at
getting that task done in the past. This graph shows every day that
the task was done over the past three weeks, with colors for each day.
The colors used are:

#+attr_texinfo: :table-type "table" :indic "@asis"
  - ~Blue~ :: If the task wasn't to be done yet on that day.
  - ~Green~ :: If the task could have been done on that day.
  - ~Yellow~ :: If the task was going to be overdue the next day.
  - ~Red~ :: If the task was overdue on that day.


In addition to coloring each day, the day is also marked with an
asterisk if the task was actually done that day, and an exclamation
mark to show where the current day falls in the graph.

There are several configuration variables that can be used to change
the way habits are displayed in the agenda.

#+attr_texinfo: :table-type "table" :indic "@asis"
  - ~org-habit-graph-column~ :: The buffer column at which the
       consistency graph should be drawn. This will overwrite any text
       in that column, so it is a good idea to keep your habits'
       titles brief and to the point.

  - ~org-habit-preceding-days~ :: The amount of history, in days before
       today, to appear in consistency graphs.

  - ~org-habit-following-days~ :: The number of days after today that
       will appear in consistency graphs.

  - ~org-habit-show-habits-only-for-today~ :: If non-nil, only show
       habits in today's agenda view. This is set to true by default.


Lastly, pressing @@info:@kbd{@@K@@info:}@@ in the agenda buffer will cause habits
to temporarily be disabled and they won't appear at all. Press
@@info:@kbd{@@K@@info:}@@ again to bring them back. They are also subject to tag
filtering, if you have habits which should only be done in certain
contexts, for example.

** Priorities
   :PROPERTIES:
   :DESCRIPTION: Some things are more important than others
   :END:
@@info:@cindex priorities@@

If you use Org mode extensively, you may end up with enough TODO items that
it starts to make sense to prioritize them.  Prioritizing can be done by
placing a /priority cookie/ into the headline of a TODO item, like this:

#+begin_example
,*** TODO [#A] Write letter to Sam Fortune
#+end_example

@@info:@noindent@@
@@info:@vindex org-priority-faces@@

By default, Org mode supports three priorities: @@info:@samp{@@A@@info:}@@,
@@info:@samp{@@B@@info:}@@, and @@info:@samp{@@C@@info:}@@. @@info:@samp{@@A@@info:}@@ is the highest
priority. An entry without a cookie is treated just like priority
@@info:@samp{@@B@@info:}@@. Priorities make a difference only for sorting in the
agenda (see [[Weekly/daily agenda]]); outside the agenda, they have no
inherent meaning to Org mode. The cookies can be highlighted with
special faces by customizing the variable ~org-priority-faces~.

Priorities can be attached to any outline node; they do not need to be TODO
items.

#+attr_texinfo: :table-type "table" :indic "@asis"
  - @@info:@kbd{@@C-c@@info:}@@ ::
    @@info:@kindex C-c@@
    @@info:@kindex @kbd{C-c@@
    @@info:@findex org-priority@@

     Set the priority of the current headline (@command{org-priority}).  The
     command prompts for a priority character @@info:@samp{@@A@@info:}@@, @@info:@samp{@@B@@info:}@@ or @@info:@samp{@@C@@info:}@@.
     When you press @key{SPC} instead, the priority cookie is removed from the
     headline.  The priorities can also be changed ``remotely'' from the timeline
     and agenda buffer with the @@info:@kbd{@@@@info:}@@ command (see [[Agenda commands]]).
  
  - @@info:@kbd{@@S-@@info:@key{@@up@@info:}@@@@info:}@@, @@info:@kbd{@@S-@@info:@key{@@down@@info:}@@@@info:}@@, @@info:@command{@@org-priority-up@@info:}@@, @@info:@command{@@org-priority-down@@info:}@@ ::
    @@info:@vindex org-priority-start-cycle-with-default@@
    
    Increase/decrease priority of current headline.[fn:56] Note
    that these keys are also used to modify timestamps
    (see [[Creating timestamps]]). See also [[Conflicts]], for a
    discussion of the interaction with ~shift-selection-mode~.


@@info:@vindex org-highest-priority@@
@@info:@vindex org-lowest-priority@@
@@info:@vindex org-default-priority@@

You can change the range of allowed priorities by setting the
variables ~org-highest-priority~, ~org-lowest-priority~, and
~org-default-priority~. For an individual buffer, you may set these
values (highest, lowest, default) like this (please make sure that the
highest priority is earlier in the alphabet than the lowest priority):

@@info:@cindex #+PRIORITIES@@

#+begin_example
,#+PRIORITIES: A C B
#+end_example

** Breaking down tasks
   :PROPERTIES:
   :DESCRIPTION: Splitting a task into manageable pieces
   :END:
@@info:@cindex tasks, breaking down@@
@@info:@cindex statistics, for TODO items@@
@@info:@vindex org-agenda-todo-list-sublevels@@

It is often advisable to break down large tasks into smaller,
manageable subtasks. You can do this by creating an outline tree below
a TODO item, with detailed subtasks on the tree.[fn:57] To keep the
overview over the fraction of subtasks that are already completed,
insert either @@info:@samp{@@[/]@@info:}@@ or @@info:@samp{@@[%]@@info:}@@ anywhere in the
headline. These cookies will be updated each time the TODO status of a
child changes, or when pressing @@info:@kbd{@@C-c C-c@@info:}@@ on the cookie. For
example:

#+begin_example
,* Organize Party [33%]
,** TODO Call people [1/2]
,*** TODO Peter
,*** DONE Sarah
,** TODO Buy food
,** DONE Talk to neighbor
#+end_example

@@info:@cindex property, COOKIE_DATA@@

If a heading has both checkboxes and TODO children below it, the
meaning of the statistics cookie become ambiguous. Set the property
~COOKIE_DATA~ to either @@info:@samp{@@checkbox@@info:}@@ or @@info:@samp{@@todo@@info:}@@ to
resolve this issue.

@@info:@vindex org-hierarchical-todo-statistics@@

If you would like to have the statistics cookie count any TODO entries
in the subtree (not just direct children), configure the variable
~org-hierarchical-todo-statistics~. To do this for a single subtree,
include the word @@info:@samp{@@recursive@@info:}@@ into the value of the
~COOKIE_DATA~ property.

#+begin_example
,* Parent capturing statistics [2/20]
  :PROPERTIES:
  :COOKIE_DATA: todo recursive
  :END:
#+end_example

If you would like a TODO entry to automatically change to DONE
when all children are done, you can use the following setup:

#+header: :exports code
#+header: :eval no
#+begin_src emacs-lisp
(defun org-summary-todo (n-done n-not-done)
  "Switch entry to DONE when all subentries are done, to TODO otherwise."
  (let (org-log-done org-log-states)   ; turn off logging
    (org-todo (if (= n-not-done 0) "DONE" "TODO"))))

(add-hook 'org-after-todo-statistics-hook 'org-summary-todo)
#+end_src

Another possibility is the use of checkboxes to identify (a hierarchy
of) a large number of subtasks (see [[Checkboxes]]).

** Checkboxes
   :PROPERTIES:
   :DESCRIPTION: Tick-off lists
   :END:

@@info:@cindex checkboxes@@
@@info:@vindex org-list-automatic-rules@@

Every item in a plain list (see [[Plain lists]]) can be made into a
checkbox by starting it with the string @@info:@samp{@@[ ]@@info:}@@.[fn:58] This
feature is similar to TODO items (see [[TODO Items]]), but is more
lightweight. Checkboxes are not included into the global TODO list, so
they are often great to split a task into a number of simple steps. Or
you can use them in a shopping list. To toggle a checkbox, use
@@info:@kbd{@@C-c C-c@@info:}@@, or use the mouse (thanks to Piotr Zielinski's
@@info:@file{@@org-mouse.el@@info:}@@).

Here is an example of a checkbox list.

#+begin_example
,* TODO Organize party [2/4]
  - [-] call people [1/3]
    - [ ] Peter
    - [X] Sarah
    - [ ] Sam
  - [X] order food
  - [ ] think about what music to play
  - [X] talk to the neighbors
#+end_example

Checkboxes work hierarchically, so if a checkbox item has children
that are checkboxes, toggling one of the children checkboxes will make
the parent checkbox reflect if none, some, or all of the children are
checked.

@@info:@cindex statistics, for checkboxes@@
@@info:@cindex checkbox statistics@@
@@info:@cindex property, COOKIE_DATA@@
@@info:@vindex org-hierarchical-checkbox-statistics@@

The @@info:@samp{@@[2/4]@@info:}@@ and @@info:@samp{@@[1/3]@@info:}@@ in the first and second
line are cookies indicating how many checkboxes present in this entry
have been checked off, and the total number of checkboxes present.
This can give you an idea on how many checkboxes remain, even without
opening a folded entry. The cookies can be placed into a headline or
into (the first line of) a plain list item. Each cookie covers
checkboxes of direct children structurally below the headline/item on
which the cookie appears.[fn:59] You have to insert the cookie
yourself by typing either @@info:@samp{@@[/]@@info:}@@ or @@info:@samp{@@[%]@@info:}@@. With
@@info:@samp{@@[/]@@info:}@@ you get an @@info:@samp{@@n out of m@@info:}@@ result, as in the
examples above. With @@info:@samp{@@[%]@@info:}@@ you get information about the
percentage of checkboxes checked (in the above example, this would be
@@info:@samp{@@[50%]@@info:}@@ and @@info:@samp{@@[33%]@@info:}@@, respectively). In a headline,
a cookie can count either checkboxes below the heading or TODO states
of children, and it will display whatever was changed last. Set the
property ~COOKIE_DATA~ to either @@info:@samp{@@checkbox@@info:}@@ or
@@info:@samp{@@todo@@info:}@@ to resolve this issue.

@@info:@cindex blocking, of checkboxes@@
@@info:@cindex checkbox blocking@@
@@info:@cindex property, ORDERED@@

If the current outline node has an ~ORDERED~ property, checkboxes must
be checked off in sequence, and an error will be thrown if you try to
check off a box while there are unchecked boxes above it.

@@info:@noindent@@ The following commands work with checkboxes:

#+attr_texinfo: :table-type "table" :indic "@asis"
- @@info:@kbd{@@C-c C-c@@info:}@@ ~org-toggle-checkbox~ :: Toggle checkbox status
     or (with prefix arg) checkbox presence at point. With a single
     prefix argument, add an empty checkbox or remove the current
     one.[fn:60] With a double prefix argument, set it to
     @@info:@samp{@@[-]@@info:}@@, which is considered to be an intermediate state.

- @@info:@kbd{@@C-c C-x C-b@@info:}@@ ~org-toggle-checkbox~ :: Toggle checkbox
     status or (with prefix arg) checkbox presence at point. With
     double prefix argument, set it to @@info:@samp{@@[-]@@info:}@@, which is
     considered to be an intermediate state.

  - If there is an active region, toggle the first checkbox in the region
    and set all remaining boxes to the same status as the first.  With a prefix
    arg, add or remove the checkbox for all items in the region.

  - If the cursor is in a headline, toggle checkboxes in the region
    between this headline and the next (so /not/ the entire subtree).

  - If there is no active region, just toggle the checkbox at point.


- @@info:@kbd{@@M-S-@@info:@key{@@RET@@info:}@@@@info:}@@ ~org-insert-todo-heading~ :: Insert a new
     item with a checkbox. This works only if the cursor is already in
     a plain list item (see [[Plain lists]]).

- @@info:@kbd{@@C-c C-x o@@info:}@@ ~org-toggle-ordered-property~ ::
  @@info:@kindex C-c C-x o@@
  @@info:@vindex org-track-ordered-property-with-tag@@
  @@info:@cindex property, ORDERED@@
  
  Toggle the ~ORDERED~ property of the entry, to toggle if checkboxes
  must be checked off in sequence. A property is used for this
  behavior because this should be local to the current entry, not
  inherited like a tag. However, if you would like to /track/ the
  value of this property with a tag for better visibility,
  customize the variable ~org-track-ordered-property-with-tag~.

- @@info:@kbd{@@C-c #@@info:}@@ ~org-update-statistics-cookies~ ::
  @@info:@kindex C-c #@@

  Update the statistics cookie in the current outline entry. When
  called with a @@info:@kbd{@@C-u@@info:}@@ prefix, update the entire file.
  Checkbox statistic cookies are updated automatically if you
  toggle checkboxes with @@info:@kbd{@@C-c C-c@@info:}@@ and make new ones with
  @@info:@kbd{@@M-S-@@info:@key{@@RET@@info:}@@@@info:}@@. TODO statistics cookies update when
  changing TODO states. If you delete boxes/entries or add/change
  them by hand, use this command to get things back into sync.

* FIXED Tags
  :PROPERTIES:
  :DESCRIPTION: Tagging headlines and matching sets of tags
  :END:
@@info:@cindex tags@@
@@info:@cindex headline tagging@@
@@info:@cindex matching, tags@@
@@info:@cindex sparse tree, tag based@@

An excellent way to implement labels and contexts for
cross-correlating information is to assign /tags/ to headlines. Org
mode has extensive support for tags.

@@info:@vindex org-tag-faces@@

Every headline can contain a list of tags; they occur at the end of
the headline. Tags are normal words containing letters, numbers,
@@info:@samp{@@_@@info:}@@, and @@info:@samp{@@@@@@info:}@@. Tags must be preceded and followed
by a single colon, e.g., @@info:@samp{@@:work:@@info:}@@. Several tags can be
specified, as in @@info:@samp{@@:work:urgent:@@info:}@@. Tags will by default be in
bold face with the same color as the headline. You may specify special
faces for specific tags using the variable ~org-tag-faces~, in much
the same way as you can for TODO keywords (see [[Faces for TODO keywords]]).

** Tag inheritance
   :PROPERTIES:
   :DESCRIPTION: Tags use the tree structure of an outline
   :END:
@@info:@cindex tag inheritance@@
@@info:@cindex inheritance, of tags@@
@@info:@cindex sublevels, inclusion into tags match@@

/Tags/ make use of the hierarchical structure of outline trees. If a
heading has a certain tag, all subheadings will inherit the tag as
well. For example, in the list

#+begin_example
,* Meeting with the French group      :work:
,** Summary by Frank                  :boss:notes:
,*** TODO Prepare slides for him      :action:
#+end_example

@@info:@noindent@@ the final heading will have the tags
@@info:@samp{@@:work:@@info:}@@, @@info:@samp{@@:boss:@@info:}@@, @@info:@samp{@@:notes:@@info:}@@, and
@@info:@samp{@@:action:@@info:}@@ even though the final heading is not explicitly
marked with those tags. You can also set tags that all entries in a
file should inherit just as if these tags were defined in a
hypothetical level zero that surrounds the entire file. Use a line
like this:[fn:61]

@@info:@cindex #+FILETAGS@@
#+begin_example
,#+FILETAGS: :Peter:Boss:Secret:
#+end_example

@@info:@vindex org-use-tag-inheritance@@
@@info:@vindex org-tags-exclude-from-inheritance@@

@@info:@noindent@@ To limit tag inheritance to specific tags, or to turn
it off entirely, use the variables ~org-use-tag-inheritance~ and
~org-tags-exclude-from-inheritance~.

@@info:@vindex org-tags-match-list-sublevels@@

When a headline matches during a tags search while tag inheritance is
turned on, all the sublevels in the same tree will (for a simple match
form) match as well.[fn:62] The list of matches may then become very
long. If you only want to see the first tags match in a subtree,
configure the variable ~org-tags-match-list-sublevels~ (not
recommended).


** Setting tags
   :PROPERTIES:
   :DESCRIPTION: How to assign tags to a headline
   :END:
@@info:@cindex setting tags@@
@@info:@cindex tags, setting@@

@@info:@kindex M-@key{TAB}@@

Tags can simply be typed into the buffer at the end of a headline.
After a colon, @@info:@kbd{@@M-@@info:@key{@@TAB@@info:}@@@@info:}@@ offers completion on tags.  There is
also a special command for inserting tags:

#+attr_texinfo: :table-type "table" :indic "@asis"
- @@info:@kbd{@@C-c C-q@@info:}@@ ~org-set-tags-command~ ::
  @@info:@kindex C-c C-q@@

  @@info:@cindex completion, of tags@@
  @@info:@vindex org-tags-column@@

  Enter new tags for the current headline.  Org mode will either offer
  completion or a special single-key interface for setting tags, see
  below.  After pressing @@info:@key{@@RET@@info:}@@, the tags will be inserted and aligned
  to ~org-tags-column~.  When called with a @@info:@kbd{@@C-u@@info:}@@ prefix, all
  tags in the current buffer will be aligned to that column, just to make
  things look nice.  TAGS are automatically realigned after promotion,
  demotion, and TODO state changes (see [[TODO basics]]).

- @@info:@kbd{@@C-c C-c@@info:}@@ ~org-set-tags-command~ ::
  @@info:@kindex C-c C-c@@

  When the cursor is in a headline, this does the same as @@info:@kbd{@@C-c C-q@@info:}@@.


@@info:@vindex org-tag-alist@@

Org supports tag insertion based on a /list of tags/. By default this
list is constructed dynamically, containing all tags currently used in
the buffer. You may also globally specify a hard list of tags with the
variable ~org-tag-alist~. Finally you can set the default tags for a
given file with lines like

@@info:@cindex #+TAGS@@
#+begin_example
,#+TAGS: @@work @@home @@tennisclub
,#+TAGS: laptop car pc sailboat
#+end_example

If you have globally defined your preferred set of tags using the
variable ~org-tag-alist~, but would like to use a dynamic tag list
in a specific file, add an empty TAGS option line to that file:

#+begin_example
,#+TAGS:
#+end_example

@@info:@vindex org-tag-persistent-alist@@

If you have a preferred set of tags that you would like to use in
every file, in addition to those defined on a per-file basis by TAGS
option lines, then you may specify a list of tags with the variable
~org-tag-persistent-alist~. You may turn this off on a per-file basis
by adding a STARTUP option line to that file:

#+begin_example
,#+STARTUP: noptag
#+end_example

By default Org mode uses the standard minibuffer completion facilities
for entering tags. However, it also implements another, quicker, tag
selection method called /fast tag selection/. This allows you to
select and deselect tags with just a single key press. For this to
work well you should assign unique letters to most of your commonly
used tags. You can do this globally by configuring the variable
~org-tag-alist~ in your @@info:@file{@@.emacs@@info:}@@ file. For example, you may
find the need to tag many items in different files with
@@info:@samp{@@:@@home:@@info:}@@. In this case you can set something like:

#+header: :eval no
#+header: :exports code
#+begin_src emacs-lisp
(setq org-tag-alist '(("@@work" . ?w) ("@@home" . ?h) ("laptop" . ?l)))
#+end_src

@@info:@noindent@@ If the tag is only relevant to the file you are working
on, then you can instead set the TAGS option line as:

#+begin_example
,#+TAGS: @@work(w)  @@home(h)  @@tennisclub(t)  laptop(l)  pc(p)
#+end_example

@@info:@noindent@@ The tags interface will show the available tags in a splash
window.  If you want to start a new line after a specific tag, insert
~\n~ into the tag list, like this:

#+begin_example
,#+TAGS: @@work(w)  @@home(h)  @@tennisclub(t) \n laptop(l)  pc(p)
#+end_example

@@info:@noindent@@ or write them in two lines:

#+begin_example
,#+TAGS: @@work(w)  @@home(h)  @@tennisclub(t)
,#+TAGS: laptop(l)  pc(p)
#+end_example

@@info:@noindent@@
You can also group together tags that are mutually exclusive by using
braces, as in:

#+begin_example
,#+TAGS: @{ @@work(w)  @@home(h)  @@tennisclub(t) @}  laptop(l)  pc(p)
#+end_example

@@info:@noindent@@ you indicate that at most one of @@info:@samp{@@@@work@@info:}@@,
@@info:@samp{@@@@home@@info:}@@, and @@info:@samp{@@@@tennisclub@@info:}@@ should be selected.
Multiple such groups are allowed.

@@info:@noindent@@ Don't forget to press @@info:@kbd{@@C-c C-c@@info:}@@ with the
cursor in one of these lines to activate any changes.

@@info:@noindent@@ To set these mutually exclusive groups in the variable
~org-tags-alist~, you must use the dummy tags ~:startgroup~ and
~:endgroup~ instead of the braces. Similarly, you can use ~:newline~
to indicate a line break. The previous example would be set globally
by the following configuration:

#+header: :eval no
#+header: :exports code
#+begin_src emacs-lisp
(setq org-tag-alist '((:startgroup . nil)
                      ("@@work" . ?w) ("@@home" . ?h)
                      ("@@tennisclub" . ?t)
                      (:endgroup . nil)
                      ("laptop" . ?l) ("pc" . ?p)))
#+end_src

If at least one tag has a selection key then pressing @@info:@kbd{@@C-c C-c@@info:}@@ will
automatically present you with a special interface, listing inherited tags,
the tags of the current headline, and a list of all valid tags with
corresponding keys.[fn:63]  In this interface, you can use the following
keys:

#+attr_texinfo: :table-type "table" :indic "@asis"
- @@info:@kbd{@@a-z...@@info:}@@ ::
  @@info:@kindex a-z...@@

  Pressing keys assigned to tags will add or remove them from the list of
  tags in the current line.  Selecting a tag in a group of mutually
  exclusive tags will turn off any other tags from that group.

- @@info:@key{@@TAB@@info:}@@ ::
  @@info:@kindex @key{TAB}@@

  Enter a tag in the minibuffer, even if the tag is not in the predefined
  list.  You will be able to complete on all tags present in the buffer.
  You can also add several tags: just separate them with a comma.

- @@info:@key{@@SPC@@info:}@@ ::
  @@info:@kindex @key{SPC}@@

  Clear all tags for this line.

- @@info:@key{@@RET@@info:}@@ ::
  @@info:@kindex @key{RET}@@

  Accept the modified set.

- C-g ::

  Abort without installing changes.

- q ::

  If @@info:@kbd{@@q@@info:}@@ is not assigned to a tag, it aborts like @@info:@kbd{@@C-g@@info:}@@.

- ! ::

  Turn off groups of mutually exclusive tags.  Use this to (as an
  exception) assign several tags from such a group.

- C-c ::

  Toggle auto-exit after the next change (see below).
  If you are using expert mode, the first @@info:@kbd{@@C-c@@info:}@@ will display the
  selection window.


@@info:@noindent@@ This method lets you assign tags to a headline with
very few keys. With the above setup, you could clear the current tags
and set @@info:@samp{@@@@home@@info:}@@, @@info:@samp{@@laptop@@info:}@@ and @@info:@samp{@@pc@@info:}@@ tags
with just the following keys: @@info:@kbd{@@C-c C-c @key{SPC} h l p @key{RET}}@@info:}@@. Switching from @@info:@samp{@@@@home@@info:}@@ to
@@info:@samp{@@@@work@@info:}@@ would be done with @@info:@kbd{@@C-c C-c w@@info:@key{@@RET@@info:}@@@@info:}@@ or
alternatively with @@info:@kbd{@@C-c C-c C-c w@@info:}@@. Adding the non-predefined
tag @@info:@samp{@@Sarah@@info:}@@ could be done with 
@@info:@kbd{@@C-c C-c @key{TAB} S a r a h @key{RET} @key{RET}@@info:}@@.

@@info:@vindex org-fast-tag-selection-single-key@@

If you find that most of the time you need only a single key press to
modify your list of tags, set the variable
~org-fast-tag-selection-single-key~. Then you no longer have to press
@key{RET} to exit fast tag selection---it will immediately exit after
the first change. If you then occasionally need more keys, press
@@info:@kbd{@@C-c@@info:}@@ to turn off auto-exit for the current tag selection
process (in effect: start selection with @@info:@kbd{@@C-c C-c C-c@@info:}@@
instead of @@info:@kbd{@@C-c C-c@@info:}@@). If you set the variable to the value
~expert~, the special window is not even shown for single-key tag
selection, it comes up only when you press an extra @@info:@kbd{@@C-c@@info:}@@.


** Tag searches
   :PROPERTIES:
   :DESCRIPTION: Searching for combinations of tags
   :END:
@@info:@cindex tag searches@@
@@info:@cindex searching for tags@@

Once a system of tags has been set up, it can be used to collect related
information into special lists.

#+attr_texinfo: :table-type "table" :indic "@asis"
- @@info:@kbd{@@C-c / m@@info:}@@ ~C-c \~ ~org-match-sparse-tree~ ::

  Create a sparse tree with all headlines matching a tags search. With a
  @@info:@kbd{@@C-u@@info:}@@ prefix argument, ignore headlines that are not a TODO
  line.

- @@info:@kbd{@@C-c a m@@info:}@@ ~org-tags-view~ ::
  @@info:@kindex C-c a m@@

  Create a global list of tag matches from all agenda files.
  See [[Matching tags and properties]].

- @@info:@kbd{@@C-c a M@@info:}@@ ~org-tags-view~ ::
  @@info:@kindex C-c a M@@
  @@info:@vindex org-tags-match-list-sublevels@@

  Create a global list of tag matches from all agenda files, but check
  only TODO items and force checking subitems (see variable
  ~org-tags-match-list-sublevels~).


These commands all prompt for a match string which allows basic
Boolean logic like @@info:@samp{@@+boss+urgent-project1@@info:}@@, to find entries
with tags @@info:@samp{@@boss@@info:}@@ and @@info:@samp{@@urgent@@info:}@@, but not
@@info:@samp{@@project1@@info:}@@, or @@info:@samp{@@Kathy|Sally@@info:}@@ to find entries which
are tagged, like @@info:@samp{@@Kathy@@info:}@@ or @@info:@samp{@@Sally@@info:}@@. The full
syntax of the search string is rich and allows also matching against
TODO keywords, entry levels and properties. For a complete description
with many examples, see [[Matching tags and properties]].

* FIXED Properties and columns
  :PROPERTIES:
  :DESCRIPTION: Storing information about an entry
  :TEXINFO_MENU_TITLE: Properties and Columns
  :END:
@@info:@cindex properties@@

A property is a key-value pair associated with an entry. Properties
can be set so they are associated with a single entry, with every
entry in a tree, or with every entry in an Org mode file.

There are two main applications for properties in Org mode. First,
properties are like tags, but with a value. Imagine maintaining a file
where you document bugs and plan releases for a piece of software.
Instead of using tags like ~:release_1:~, ~:release_2:~, you can use a
property, say ~:Release:~, that in different subtrees has different
values, such as ~1.0~ or ~2.0~. Second, you can use properties to
implement (very basic) database capabilities in an Org buffer. Imagine
keeping track of your music CDs, where properties could be things such
as the album, artist, date of release, number of tracks, and so on.

Properties can be conveniently edited and viewed in column view
(see [[Column view]]).

** Property syntax
   :PROPERTIES:
   :DESCRIPTION: How properties are spelled out
   :END:
@@info:@cindex property syntax@@
@@info:@cindex drawer, for properties@@

Properties are key-value pairs. When they are associated with a single
entry or with a tree they need to be inserted into a special drawer
(see [[Drawers]]) with the name ~PROPERTIES~. Each property is specified
on a single line, with the key (surrounded by colons) first, and the
value after it. Here is an example:

#+begin_example
,* CD collection
,** Classic
,*** Goldberg Variations
    :PROPERTIES:
    :Title:     Goldberg Variations
    :Composer:  J.S. Bach
    :Artist:    Glen Gould
    :Publisher: Deutsche Grammophon
    :NDisks:    1
    :END:
#+end_example

Depending on the value of ~org-use-property-inheritance~, a property
set this way will either be associated with a single entry, or the
sub-tree defined by the entry, see [[Property inheritance]].

You may define the allowed values for a particular property
@@info:@samp{@@:Xyz:@@info:}@@ by setting a property @@info:@samp{@@:Xyz_ALL:@@info:}@@. This
special property is /inherited/, so if you set it in a level 1 entry,
it will apply to the entire tree. When allowed values are defined,
setting the corresponding property becomes easier and is less prone to
typing errors. For the example with the CD collection, we can
predefine publishers and the number of disks in a box like this:

#+begin_example
,* CD collection
  :PROPERTIES:
  :NDisks_ALL:  1 2 3 4
  :Publisher_ALL: "Deutsche Grammophon" Philips EMI
  :END:
#+end_example

If you want to set properties that can be inherited by any entry in a
file, use a line like:

@@info:@cindex property, _ALL@@
@@info:@cindex #+PROPERTY@@
#+begin_example
,#+PROPERTY: NDisks_ALL 1 2 3 4
#+end_example

If you want to add to the value of an existing property, append a ~+~
to the property name. The following results in the property ~var~
having the value ``foo=1 bar=2''.

@@info:@cindex property, +@@
#+begin_example
,#+PROPERTY: var  foo=1
,#+PROPERTY: var+ bar=2
#+end_example

It is also possible to add to the values of inherited properties. The
following results in the ~genres~ property having the value ``Classic
Baroque'' under the ~Goldberg Variations~ subtree.

@@info:@cindex property, +@@
#+begin_example
,* CD collection
,** Classic
    :PROPERTIES:
    :GENRES: Classic
    :END:
,*** Goldberg Variations
    :PROPERTIES:
    :Title:     Goldberg Variations
    :Composer:  J.S. Bach
    :Artist:    Glen Gould
    :Publisher: Deutsche Grammophon
    :NDisks:    1
    :GENRES+:   Baroque
    :END:
#+end_example
Note that a property can only have one entry per Drawer.

@@info:@vindex org-global-properties@@

Property values set with the global variable ~org-global-properties~
can be inherited by all entries in all Org files.

@@info:@noindent@@
The following commands help to work with properties:

#+attr_texinfo: :table-type "table" :indic "@asis"
- @@info:@kbd{@@M-@@info:@key{@@TAB@@info:}@@@@info:}@@ ~pcomplete~ ::
  @@info:@kindex M-@key{TAB}@@

  After an initial colon in a line, complete property keys. All keys
  used in the current file will be offered as possible completions.

- @@info:@kbd{@@C-c C-x p@@info:}@@ ~org-set-property~ ::
  @@info:@kindex C-c C-x p@@

  Set a property. This prompts for a property name and a value. If
  necessary, the property drawer is created as well.

- C-u M-x org-insert-drawer
  @@info:@cindex org-insert-drawer@@

  Insert a property drawer into the current entry. The drawer will be
  inserted early in the entry, but after the lines with planning
  information like deadlines.

- @@info:@kbd{@@C-c C-c@@info:}@@ ~org-property-action~ ::
  @@info:@kindex C-c C-c@@

  With the cursor in a property drawer, this executes property commands.

- @@info:@kbd{@@C-c C-c s@@info:}@@ ~org-set-property~ ::
  @@info:@kindex C-c C-c s@@

  Set a property in the current entry.  Both the property and the value
  can be inserted using completion.

- @@info:@kbd{@@S-@@info:@key{@@right@@info:}@@@@info:}@@ @@info:@kbd{@@S-@@info:@key{@@left@@info:}@@@@info:}@@ ~org-property-next-allowed-value~ ~org-property-previous-allowed-value~ ::
  @@info:@kindex S-@key{right}@@

  Switch property at point to the next/previous allowed value.

- @@info:@kbd{@@C-c C-c d@@info:}@@ ~org-delete-property~ ::
  @@info:@kindex C-c C-c d@@

  Remove a property from the current entry.

- @@info:@kbd{@@C-c C-c D@@info:}@@ ~org-delete-property-globally~ ::
  @@info:@kindex C-c C-c D@@

  Globally remove a property, from all entries in the current file.

- @@info:@kbd{@@C-c C-c c@@info:}@@ ~org-compute-property-at-point~ ::
  @@info:@kindex C-c C-c c@@

  Compute the property at point, using the operator and scope from the
  nearest column format definition.


** Special properties
   :PROPERTIES:
   :DESCRIPTION: Access to other Org mode features
   :END:
@@info:@cindex properties, special@@

Special properties provide an alternative access method to Org mode
features, like the TODO state or the priority of an entry, discussed
in the previous chapters. This interface exists so that you can
include these states in a column view (see [[Column view]]), or to use
them in queries. The following property names are special and (except
for ~:CATEGORY:~) should not be used as keys in the properties drawer:

@@info:@cindex property, special, ID@@
@@info:@cindex property, special, TODO@@
@@info:@cindex property, special, TAGS@@
@@info:@cindex property, special, ALLTAGS@@
@@info:@cindex property, special, CATEGORY@@
@@info:@cindex property, special, PRIORITY@@
@@info:@cindex property, special, DEADLINE@@
@@info:@cindex property, special, SCHEDULED@@
@@info:@cindex property, special, CLOSED@@
@@info:@cindex property, special, TIMESTAMP@@
@@info:@cindex property, special, TIMESTAMP_IA@@
@@info:@cindex property, special, CLOCKSUM@@
@@info:@cindex property, special, CLOCKSUM_T@@
@@info:@cindex property, special, BLOCKED@@
#+comment  guessing that ITEM is needed in this area; also, should this list be sorted?
@@info:@cindex property, special, ITEM@@
@@info:@cindex property, special, FILE@@
#+begin_example
ID           @r{A globally unique ID used for synchronization during}
             @r{iCalendar or MobileOrg export.}
TODO         @r{The TODO keyword of the entry.}
TAGS         @r{The tags defined directly in the headline.}
ALLTAGS      @r{All tags, including inherited ones.}
CATEGORY     @r{The category of an entry.}
PRIORITY     @r{The priority of the entry, a string with a single letter.}
DEADLINE     @r{The deadline time string, without the angular brackets.}
SCHEDULED    @r{The scheduling timestamp, without the angular brackets.}
CLOSED       @r{When was this entry closed?}
TIMESTAMP    @r{The first keyword-less timestamp in the entry.}
TIMESTAMP_IA @r{The first inactive timestamp in the entry.}
CLOCKSUM     @r{The sum of CLOCK intervals in the subtree.  ~org-clock-sum~}
             @r{must be run first to compute the values in the current buffer.}
CLOCKSUM_T   @r{The sum of CLOCK intervals in the subtree for today.}
             @r{~org-clock-sum-today~ must be run first to compute the}
             @r{values in the current buffer.}
BLOCKED      @r{"t" if task is currently blocked by children or siblings}
ITEM         @r{The headline of the entry.}
FILE         @r{The filename the entry is located in.}
#+end_example

** Property searches
   :PROPERTIES:
   :DESCRIPTION: Matching property values
   :END:
@@info:@cindex properties, searching@@
@@info:@cindex searching, of properties@@

To create sparse trees and special lists with selection based on properties,
the same commands are used as for tag searches (see [[Tag searches]]).

#+attr_texinfo: :table-type "table" :indic "@asis"
- @@info:@kbd{@@C-c / m@@info:}@@ ~C-c \~ ~org-match-sparse-tree~ ::
  @@info:@kindex C-c / m@@

  Create a sparse tree with all matching entries. With a @@info:@kbd{@@C-u@@info:}@@
  prefix argument, ignore headlines that are not a TODO line.

- @@info:@kbd{@@C-c a m@@info:}@@ ~org-tags-view~ ::
  @@info:@kindex C-c a m@@

  Create a global list of tag/property matches from all agenda files.
  See [[Matching tags and properties]].

- @@info:@kbd{@@C-c a M@@info:}@@ ~org-tags-view~ ::
  @@info:@kindex C-c a M@@
  @@info:@vindex org-tags-match-list-sublevels@@

  Create a global list of tag matches from all agenda files, but check
  only TODO items and force checking of subitems (see variable
  ~org-tags-match-list-sublevels~).


The syntax for the search string is described in [[Matching tags and
properties]].

There is also a special command for creating sparse trees based on a
single property:

#+attr_texinfo: :table-type "table" :indic "@asis"
- @@info:@kbd{@@C-c / p@@info:}@@ ::
  @@info:@kindex C-c / p@@

  Create a sparse tree based on the value of a property. This first
  prompts for the name of a property, and then for a value. A sparse
  tree is created with all entries that define this property with the
  given value. If you enclose the value in curly braces, it is
  interpreted as a regular expression and matched against the property
  values.


** Property inheritance
   :PROPERTIES:
   :DESCRIPTION: Passing values down a tree
   :END:
@@info:@cindex properties, inheritance@@
@@info:@cindex inheritance, of properties@@

@@info:@vindex org-use-property-inheritance@@

The outline structure of Org mode documents lends itself to an
inheritance model of properties: if the parent in a tree has a certain
property, the children can inherit this property. Org mode does not
turn this on by default, because it can slow down property searches
significantly and is often not needed. However, if you find
inheritance useful, you can turn it on by setting the variable
~org-use-property-inheritance~. It may be set to ~t~ to make all
properties inherited from the parent, to a list of properties that
should be inherited, or to a regular expression that matches inherited
properties. If a property has the value @@info:@samp{@@nil@@info:}@@, this is
interpreted as an explicit undefine of the property, so that
inheritance search will stop at this value and return ~nil~.

Org mode has a few properties for which inheritance is hard-coded, at
least for the special applications for which they are used:

@@info:@cindex property, COLUMNS@@

#+attr_texinfo: :table-type "table" :indic "@asis"
- ~COLUMNS~ ::

  The ~:COLUMNS:~ property defines the format of column view (see [[Column
  view]]). It is inherited in the sense that the level where a ~:COLUMNS:~
  property is defined is used as the starting point for a column view
  table, independently of the location in the subtree from where columns
  view is turned on.

- ~CATEGORY~ ::
  @@info:@cindex property, CATEGORY@@

  For agenda view, a category set through a ~:CATEGORY:~ property
  applies to the entire subtree.

- ~ARCHIVE~ ::
  @@info:@cindex property, ARCHIVE@@

  For archiving, the ~:ARCHIVE:~ property may define the archive
  location for the entire subtree (see [[Moving subtrees]]).

- ~LOGGING~ ::
  @@info:@cindex property, LOGGING@@

  The LOGGING property may define logging settings for an entry or a
  subtree (see [[Tracking TODO state changes]]).


** Column view
   :PROPERTIES:
   :DESCRIPTION: Tabular viewing and editing
   :END:

A great way to view and edit properties in an outline tree is /column
view/. In column view, each outline node is turned into a table row.
Columns in this table provide access to properties of the entries. Org
mode implements columns by overlaying a tabular structure over the
headline of each item. While the headlines have been turned into a
table row, you can still change the visibility of the outline tree.
For example, you get a compact table by switching to CONTENTS view
(@@info:@kbd{@@S-@key{TAB} S-@key{TAB}@@info:}@@, or simply @@info:@kbd{@@c@@info:}@@ while
column view is active), but you can still open, read, and edit the
entry below each headline. Or, you can switch to column view after
executing a sparse tree command and in this way get a table only for
the selected items. Column view also works in agenda buffers (see
[[Agenda Views]]) where queries have collected selected items, possibly
from a number of files.

*** Defining columns
    :PROPERTIES:
    :DESCRIPTION: The COLUMNS format property
    :END:
@@info:@cindex column view, for properties@@
@@info:@cindex properties, column view@@

Setting up a column view first requires defining the columns.  This is
done by defining a column format line.

**** Scope of column definitions
     :PROPERTIES:
     :DESCRIPTION: Where defined, where valid?
     :END:

To define a column format for an entire file, use a line like:

@@info:@cindex #+COLUMNS@@
#+begin_example
,#+COLUMNS: %25ITEM %TAGS %PRIORITY %TODO
#+end_example

To specify a format that only applies to a specific tree, add a
~:COLUMNS:~ property to the top node of that tree, for example:

#+begin_example
,** Top node for columns view
   :PROPERTIES:
   :COLUMNS: %25ITEM %TAGS %PRIORITY %TODO
   :END:
#+end_example

If a ~:COLUMNS:~ property is present in an entry, it defines columns
for the entry itself, and for the entire subtree below it. Since the
column definition is part of the hierarchical structure of the
document, you can define columns on level 1 that are general enough
for all sublevels, and more specific columns further down, when you
edit a deeper part of the tree.

**** Column attributes
     :PROPERTIES:
     :DESCRIPTION: Appearance and content of a column
     :END:
A column definition sets the attributes of a column.  The general
definition looks like this:

#+begin_example
 %[@var{width}]@var{property}[(@var{title})][@{@var{summary-type}@}]
#+end_example

@@info:@noindent@@ Except for the percent sign and the property name, all
items are optional. The individual parts have the following meaning:

#+begin_example
@var{width}           @r{An integer specifying the width of the column in characters.}
                @r{If omitted, the width will be determined automatically.}
@var{property}        @r{The property that should be edited in this column.}
                @r{Special properties representing meta data are allowed here}
                @r{as well (see [[Special properties]])}
@var{title}           @r{The header text for the column.  If omitted, the property}
                @r{name is used.}
@{@var{summary-type}@}  @r{The summary type.  If specified, the column values for}
                @r{parent nodes are computed from the children.}
                @r{Supported summary types are:}
                @{+@}       @r{Sum numbers in this column.}
                @{+;%.1f@}  @r{Like {{{samp(+)}}}, but format result with {{{samp(%.1f)}}}.}
                @{$@}       @r{Currency, short for {{{samp(+;%.2f)}}}.}
                @{:@}       @r{Sum times, HH:MM, plain numbers are hours.}
                @{X@}       @r{Checkbox status, {{{samp([X])}}} if all children are {{{samp([X])}}}.}
                @{X/@}      @r{Checkbox status, {{{samp([n/m])}}}.}
                @{X%@}      @r{Checkbox status, {{{samp([n%])}}}.}
                @{min@}     @r{Smallest number in column.}
                @{max@}     @r{Largest number.}
                @{mean@}    @r{Arithmetic mean of numbers.}
                @{:min@}    @r{Smallest time value in column.}
                @{:max@}    @r{Largest time value.}
                @{:mean@}   @r{Arithmetic mean of time values.}
                @{@@min@}    @r{Minimum age (in days/hours/mins/seconds).}
                @{@@max@}    @r{Maximum age (in days/hours/mins/seconds).}
                @{@@mean@}   @r{Arithmetic mean of ages (in days/hours/mins/seconds).}
                @{est+@}    @r{Add low-high estimates.}
#+end_example

@@info:@noindent@@ Be aware that you can only have one summary type for
any property you include. Subsequent columns referencing the same
property will all display the same summary information.

The ~est+~ summary type requires further explanation. It is used for
combining estimates, expressed as low-high ranges. For example,
instead of estimating a particular task will take 5 days, you might
estimate it as 5-6 days if you're fairly confident you know how much
work is required, or 1-10 days if you don't really know what needs to
be done. Both ranges average at 5.5 days, but the first represents a
more predictable delivery.

When combining a set of such estimates, simply adding the lows and
highs produces an unrealistically wide result. Instead, ~est+~ adds
the statistical mean and variance of the sub-tasks, generating a final
estimate from the sum. For example, suppose you had ten tasks, each of
which was estimated at 0.5 to 2 days of work. Straight addition
produces an estimate of 5 to 20 days, representing what to expect if
everything goes either extremely well or extremely poorly. In
contrast, ~est+~ estimates the full job more realistically, at 10-15
days.

Here is an example for a complete columns definition, along with allowed
values.

#+begin_example
:COLUMNS:  %25ITEM %9Approved(Approved?)@{X@} %Owner %11Status \@footnote{Please note that the COLUMNS definition must be on a single line---it is wrapped here only because of formatting constraints.}
                   %10Time_Estimate@{:@} %CLOCKSUM %CLOCKSUM_T
:Owner_ALL:    Tammy Mark Karl Lisa Don
:Status_ALL:   "In progress" "Not started yet" "Finished" ""
:Approved_ALL: "[ ]" "[X]"
#+end_example

@@info:@noindent@@ The first column, @@info:@samp{@@%25ITEM@@info:}@@, means the first
25 characters of the item itself, i.e., of the headline. You probably
always should start the column definition with the @@info:@samp{@@ITEM@@info:}@@
specifier. The other specifiers create columns @@info:@samp{@@Owner@@info:}@@ with
a list of names as allowed values, for @@info:@samp{@@Status@@info:}@@ with four
different possible values, and for a checkbox field
@@info:@samp{@@Approved@@info:}@@. When no width is given after the @@info:@samp{@@%@@info:}@@
character, the column will be exactly as wide as it needs to be in
order to fully display all values. The @@info:@samp{@@Approved@@info:}@@ column
does have a modified title (@@info:@samp{@@Approved?@@info:}@@, with a question
mark). Summaries will be created for the @@info:@samp{@@Time_Estimate@@info:}@@
column by adding time duration expressions like HH:MM, and for the
@@info:@samp{@@Approved@@info:}@@ column, by providing an @@info:@samp{@@[X]@@info:}@@ status if
all children have been checked. The @@info:@samp{@@CLOCKSUM@@info:}@@ and
@@info:@samp{@@CLOCKSUM_T@@info:}@@ columns are special, they lists the sums of
CLOCK intervals in the subtree, either for all clocks or just for
today.


*** Using column view
    :PROPERTIES:
    :DESCRIPTION: How to create and use column view
    :END:


**** Turning column view on and off
#+attr_texinfo: :table-type "table" :indic "@asis"
- @@info:@kbd{@@C-c C-x C-c@@info:}@@ ~org-columns~ ::
  @@info:@kindex C-c C-x C-c@@
  @@info:@vindex org-columns-default-format@@

  Turn on column view. If the cursor is before the first headline in the
  file, column view is turned on for the entire file, using the
  ~#+COLUMNS~ definition. If the cursor is somewhere inside the outline,
  this command searches the hierarchy, up from point, for a ~:COLUMNS:~
  property that defines a format. When one is found, the column view
  table is established for the tree starting at the entry that contains
  the ~:COLUMNS:~ property. If no such property is found, the format is
  taken from the ~#+COLUMNS~ line or from the variable
  ~org-columns-default-format~, and column view is established for the
  current entry and its subtree.

- @@info:@kbd{@@r@@info:}@@ ~org-columns-redo~ ::
  @@info:@kindex r@@

  Recreate the column view, to include recent changes made in the
  buffer.

- @@info:@kbd{@@g@@info:}@@ ~org-columns-redo~ ::
  @@info:@kindex g@@

  Same as @@info:@kbd{@@r@@info:}@@.

- @@info:@kbd{@@q@@info:}@@ ~org-columns-quit~ ::
  @@info:@kindex q@@

  Exit column view.


**** Editing values
#+attr_texinfo: :table-type "table" :indic "@asis"
- @@info:@key{@@left@@info:}@@ @@info:@key{@@right@@info:}@@ @@info:@key{@@up@@info:}@@ @@info:@key{@@down@@info:}@@ ::

  Move through the column view from field to field.

-  @@info:@kbd{@@S-@@info:@key{@@left@@info:}@@@@info:}@@ @@info:@kbd{@@S-@@info:@key{@@right@@info:}@@@@info:}@@ ::
  @@info:@kindex S-@key{left}@@
  @@info:@kindex S-@key{right}@@

  Switch to the next/previous allowed value of the field. For this, you
  have to have specified allowed values for a property.

- @@info:@kbd{@@1..9@@info:}@@ ::
  @@info:@kindex 1..9@@

  Directly select the Nth allowed value, @@info:@kbd{@@0@@info:}@@ selects the 10th
  value.

- @@info:@kbd{@@n@@info:}@@ @@info:@kbd{@@p@@info:}@@ ~org-columns-next-allowed-value~ ~org-columns-previous-allowed-value~ ::
  @@info:@kindex n@@

  Same as @@info:@kbd{@@S-@@info:@key{@@left@@info:}@@@@info:}@@ @@info:@kbd{@@S-@@info:@key{@@right@@info:}@@@@info:}@@

- @@info:@kbd{@@e@@info:}@@ ~org-columns-edit-value~ ::
  @@info:@kindex e@@

  Edit the property at point. For the special properties, this will
  invoke the same interface that you normally use to change that
  property. For example, when editing a TAGS property, the tag
  completion or fast selection interface will pop up.

- @@info:@kbd{@@C-c C-c@@info:}@@ ~org-columns-set-tags-or-toggle~ ::
  @@info:@kindex C-c C-c@@

  When there is a checkbox at point, toggle it.

- @@info:@kbd{@@v@@info:}@@ ~org-columns-show-value~ ::
  @@info:@kindex v@@

  View the full value of this property. This is useful if the width of
  the column is smaller than that of the value.

- @@info:@kbd{@@a@@info:}@@ ~org-columns-edit-allowed~ ::
  @@info:@kindex a@@

  Edit the list of allowed values for this property.  If the list is found
  in the hierarchy, the modified values is stored there.  If no list is
  found, the new value is stored in the first entry that is part of the
  current column view.


**** Modifying the table structure

- @@info:@kbd{@@<@@info:}@@ @@info:@kbd{@@>@@info:}@@ ~org-columns-narrow~ ~org-columns-widen~ ::
  @@info:@kindex <@@

  Make the column narrower/wider by one character.

- @@info:@kbd{@@S-M-@@info:@key{@@right@@info:}@@@@info:}@@ ~org-columns-new~ ::
  @@info:@kindex S-M-@key{right}@@

  Insert a new column, to the left of the current column.

- @@info:@kbd{@@S-M-@@info:@key{@@left@@info:}@@@@info:}@@ ~org-columns-delete~ ::
  @@info:@kindex S-M-@key{left}@@
  
  Delete the current column.


*** Capturing column view
    :PROPERTIES:
    :DESCRIPTION: A dynamic block for column view
    :END:

Since column view is just an overlay over a buffer, it cannot be
exported or printed directly. If you want to capture a column view,
use a ~columnview~ dynamic block (see [[Dynamic blocks]]). The frame of
this block looks like this:

@@info:@cindex #+BEGIN, columnview@@
#+begin_example
,* FIXME The column view
,#+BEGIN: columnview :hlines 1 :id "label"

,#+END:
#+end_example

@@info:@noindent@@ This dynamic block has the following parameters:

#+attr_texinfo: :table-type "table" :indic "@code"
- ~:id~ ::

  This is the most important parameter. Column view is a feature that is
  often localized to a certain (sub)tree, and the capture block might be
  at a different location in the file. To identify the tree whose view
  to capture, you can use 4 values:

  @@info:@cindex property, ID@@
  #+begin_example
  local     @r{use the tree in which the capture block is located}
  global    @r{make a global view, including all headings in the file}
  "file:@var{path-to-file}"
            @r{run column view at the top of this file}
  "@var{ID}"      @r{call column view in the tree that has an ~:ID:~}
            @r{property with the value /label/.  You can use}
            @r{{{{kbd(M-x org-id-copy)}}} to create a globally unique ID for}
            @r{the current entry and copy it to the kill-ring.}
  #+end_example

- ~:hlines~ ::

  When ~t~, insert an hline after every line. When a number
  ~N~, insert an hline before each headline with level ~<= @var{N}~.

- ~:vlines~ ::

  When set to ~t~, force column groups to get vertical lines.

- ~:maxlevel~ ::

  When set to a number, don't capture entries below this level.

- ~:skip-empty-rows~ ::

  When set to ~t~, skip rows where the only non-empty specifier of the
  column view is ~ITEM~.



@@info:@noindent@@ The following commands insert or update the dynamic
block:

#+attr_texinfo: :table-type "table" :indic "@asis"
- @@info:@kbd{@@C-c C-x i@@info:}@@ ~org-insert-columns-dblock~ ::
  @@info:@kindex C-c C-x i@@

  Insert a dynamic block capturing a column view. You will be prompted
  for the scope or ID of the view.

- @@info:@kbd{@@C-c C-c@@info:}@@ @@info:@kbd{@@C-c C-x C-u@@info:}@@ ~org-dblock-update~ ::
  @@info:@kindex C-c C-c@@

  Update dynamic block at point. The cursor needs to be in the ~#+BEGIN~
  line of the dynamic block.

- @@info:@kbd{@@C-u C-c C-x C-u@@info:}@@ ~org-update-all-dblocks~ ::
  @@info:@kindex C-u C-c C-x C-u@@

  Update all dynamic blocks (see [[Dynamic blocks]]). This is useful if you
  have several clock table blocks, column-capturing blocks or other
  dynamic blocks in a buffer.


You can add formulas to the column view table and you may add plotting
instructions in front of the table---these will survive an update of the
block.  If there is a ~#+TBLFM:~ after the table, the table will
actually be recalculated automatically after an update.

An alternative way to capture and process property values into a table
is provided by Eric Schulte's @@info:@file{@@org-collector.el@@info:}@@ which is a
contributed package.[fn:64] It provides a general API to collect
properties from entries in a certain scope, and arbitrary Lisp
expressions to process these values before inserting them into a table
or a dynamic block.

** Property API
   :PROPERTIES:
   :DESCRIPTION: Properties for Lisp programmers
   :END:
@@info:@cindex properties, API@@
@@info:@cindex API, for properties@@

There is a full API for accessing and changing properties. This API
can be used by Emacs Lisp programs to work with properties and to
implement features based on them. For more information see [[Using the
property API]].

* FIXED Dates and times
  :PROPERTIES:
  :DESCRIPTION: Making items useful for planning
  :TEXINFO_MENU_TITLE: Dates and Times
  :END:
@@info:@cindex dates@@
@@info:@cindex times@@
@@info:@cindex timestamp@@
@@info:@cindex date stamp@@

To assist project planning, TODO items can be labeled with a date and/or
a time.  The specially formatted string carrying the date and time
information is called a /timestamp/ in Org mode.  This may be a
little confusing because timestamp is often used as indicating when
something was created or last changed.  However, in Org mode this term
is used in a much wider sense.

** Timestamps
   :PROPERTIES:
   :DESCRIPTION: Assigning a time to a tree entry
   :TITLE:    Timestamps, deadlines, and scheduling
   :END:
@@info:@cindex timestamps@@
@@info:@cindex ranges, time@@
@@info:@cindex date stamps@@
@@info:@cindex deadlines@@
@@info:@cindex scheduling@@

A timestamp is a specification of a date (possibly with a time or a
range of times) in a special format, either @@info:@samp{@@<2003-09-16 Tue>@@info:}@@[fn:65] or @@info:@samp{@@<2003-09-16 Tue 09:39>@@info:}@@ or
@@info:@samp{@@<2003-09-16 Tue 12:00-12:30>@@info:}@@.[fn:66] A timestamp can
appear anywhere in the headline or body of an Org tree entry. Its
presence causes entries to be shown on specific dates in the agenda
(see [[Weekly/daily agenda]]). We distinguish:

#+attr_texinfo: :table-type "table" :indic "@asis"
- Plain timestamp; Event; Appointment ::
  @@info:@cindex timestamp@@
  @@info:@cindex appointment@@

  A simple timestamp just assigns a date/time to an item. This is just
  like writing down an appointment or event in a paper agenda. In the
  timeline and agenda displays, the headline of an entry associated with
  a plain timestamp will be shown exactly on that date.

  #+begin_example
  ,* Meet Peter at the movies
    <2006-11-01 Wed 19:15>
  ,* Discussion on climate change
    <2006-11-02 Thu 20:00-22:00>
  #+end_example

- Timestamp with repeater interval ::
  @@info:@cindex timestamp, with repeater interval@@

  A timestamp may contain a /repeater interval/, indicating that it
  applies not only on the given date, but again and again after a
  certain interval of N days (d), weeks (w), months (m), or years (y).
  The following will show up in the agenda every Wednesday:

  #+begin_example
  ,* Pick up Sam at school
    <2007-05-16 Wed 12:30 +1w>
  #+end_example

- Diary-style sexp entries ::

  For more complex date specifications, Org mode supports using the
  special sexp diary entries implemented in the Emacs calendar/diary
  package.[fn:67] For example, with optional time:

  #+begin_example
  ,* 22:00-23:00 The nerd meeting on every 2nd Thursday of the month
    <%%(org-float t 4 2)>
  #+end_example

- Time/Date range ::
  @@info:@cindex timerange@@
  @@info:@cindex date range@@

  Two timestamps connected by @@info:@samp{@@--@@info:}@@ denote a range.  The headline
  will be shown on the first and last day of the range, and on any dates
  that are displayed and fall in the range.  Here is an example:

  #+begin_example
  ,** Meeting in Amsterdam
     <2004-08-23 Mon>--<2004-08-26 Thu>
  #+end_example

- Inactive timestamp ::
  @@info:@cindex timestamp, inactive@@
  @@info:@cindex inactive timestamp@@

  Just like a plain timestamp, but with square brackets instead of
  angular ones.  These timestamps are inactive in the sense that they do
  /not/ trigger an entry to show up in the agenda.

  #+begin_example
  ,* Gillian comes late for the fifth time
    [2006-11-01 Wed]
  #+end_example


** Creating timestamps
   :PROPERTIES:
   :DESCRIPTION: Commands to insert timestamps
   :END:
For Org mode to recognize timestamps, they need to be in the specific
format. All commands listed below produce timestamps in the correct
format.

#+attr_texinfo: :table-type "table" :indic "@asis"
- @@info:@kbd{@@C-c .@@info:}@@ ~org-time-stamp~ ::
  @@info:@kindex C-c .@@

  Prompt for a date and insert a corresponding timestamp. When the
  cursor is at an existing timestamp in the buffer, the command is used
  to modify this timestamp instead of inserting a new one. When this
  command is used twice in succession, a time range is inserted.

- @@info:@kbd{@@C-c !@@info:}@@ ~org-time-stamp-inactive~ ::
  @@info:@kindex C-c !@@

  Like @@info:@kbd{@@C-c .@@info:}@@, but insert an inactive timestamp that will not
  cause an agenda entry.

- @@info:@kbd{@@C-u C-c .@@info:}@@ @@info:@kbd{@@C-u C-c !@@info:}@@
  @@info:@kindex C-u C-c .@@
  @@info:@kindex C-u C-c .@@
  @@info:@kindex C-u C-c !@@
  @@info:@vindex org-time-stamp-rounding-minutes@@

  Like @@info:@kbd{@@C-c .@@info:}@@ and @@info:@kbd{@@C-c !@@info:}@@, but use the alternative
  format which contains date and time. The default time can be rounded
  to multiples of 5 minutes, see the option
  ~org-time-stamp-rounding-minutes~.

- @@info:@kbd{@@C-c C-c@@info:}@@ ::
  @@info:@kindex C-c C-c@@

  Normalize timestamp, insert/fix day name if missing or wrong.

- @@info:@kbd{@@C-c <@@info:}@@ ~org-date-from-calendar~ ::
  @@info:@kindex C-c <@@

  Insert a timestamp corresponding to the cursor date in the Calendar.

- @@info:@kbd{@@C-c >@@info:}@@ ~org-goto-calendar~ ::
  @@info:@kindex C-c >@@

  Access the Emacs calendar for the current date. If there is a
  timestamp in the current line, go to the corresponding date instead.

- @@info:@kbd{@@C-c C-o@@info:}@@ ~org-open-at-point~ ::
  @@info:@kindex C-c C-o@@

  Access the agenda for the date given by the timestamp or -range at
  point (see [[Weekly/daily agenda]]).

- @@info:@kbd{@@S-@@info:@key{@@left@@info:}@@@@info:}@@ @@info:@kbd{@@S-@@info:@key{@@right@@info:}@@@@info:}@@ ~org-timestamp-down-day~ ~org-timestamp-up-day~ ::
  @@info:@kindex S-@key{left}@@

  Change date at cursor by one day.  These key bindings conflict with
  shift-selection and related modes (see [[Conflicts]]).

- @@info:@kbd{@@S-@@info:@key{@@up@@info:}@@@@info:}@@ @@info:@kbd{@@S-@@info:@key{@@down@@info:}@@@@info:}@@ ~org-timestamp-up~ ~org-timestamp-down-down~ ::
  @@info:@kindex S-@key{up}@@

  Change the item under the cursor in a timestamp. The cursor can be on
  a year, month, day, hour or minute. When the timestamp contains a time
  range like @@info:@samp{@@15:30-16:30@@info:}@@, modifying the first time will also
  shift the second, shifting the time block with constant length. To
  change the length, modify the second time. Note that if the cursor is
  in a headline and not at a timestamp, these same keys modify the
  priority of an item. (see [[Priorities]]). The key bindings also conflict
  with shift-selection and related modes (see [[Conflicts]]).

- @@info:@kbd{@@C-c C-y@@info:}@@ ~org-evaluate-time-range~ ::
  @@info:@kindex C-c C-y@@
  @@info:@cindex evaluate time range@@

  Evaluate a time range by computing the difference between start and
  end. With a prefix argument, insert result after the time range (in a
  table: into the following column).


*** The date/time prompt
    :PROPERTIES:
    :DESCRIPTION: How Org mode helps you enter dates and times
    :END:
@@info:@cindex date, reading in minibuffer@@
@@info:@cindex time, reading in minibuffer@@

@@info:@vindex org-read-date-prefer-future@@

When Org mode prompts for a date/time, the default is shown in default
date/time format, and the prompt therefore seems to ask for a specific
format. But it will in fact accept date/time information in a variety
of formats. Generally, the information should start at the beginning
of the string. Org mode will find whatever information is in there and
derive anything you have not specified from the /default date and
time/. The default is usually the current date and time, but when
modifying an existing timestamp, or when entering the second stamp of
a range, it is taken from the stamp in the buffer. When filling in
information, Org mode assumes that most of the time you will want to
enter a date in the future: if you omit the month/year and the given
day/month is /before/ today, it will assume that you mean a future
date.[fn:68] If the date has been automatically shifted into the
future, the time prompt will show this with @@info:@samp{@@(=>F).@@info:}@@

For example, let's assume that today is *June 13, 2006*. Here is how
various inputs will be interpreted, the items filled in by Org mode
are in *bold*.

#+begin_example
3-2-5         @result{} 2003-02-05
2/5/3         @result{} 2003-02-05
14            @result{} @b{2006}-@b{06}-14
12            @result{} @b{2006}-@b{07}-12
2/5           @result{} @b{2007}-02-05
Fri           @result{} nearest Friday (default date or later)
sep 15        @result{} @b{2006}-09-15
feb 15        @result{} @b{2007}-02-15
sep 12 9      @result{} 2009-09-12
12:45         @result{} @b{2006}-@b{06}-@b{13} 12:45
22 sept 0:34  @result{} @b{2006}-09-22 0:34
w4            @result{} ISO week for of the current year @b{2006}
2012 w4 fri   @result{} Friday of ISO week 4 in 2012
2012-w04-5    @result{} Same as above
#+end_example

Furthermore you can specify a relative date by giving, as the /first/
thing in the input: a plus/minus sign, a number and a letter ([dwmy])
to indicate change in days, weeks, months, or years. With a single
plus or minus, the date is always relative to today. With a double
plus or minus, it is relative to the default date. If instead of a
single letter, you use the abbreviation of day name, the date will be
the Nth such day, e.g.:

#+begin_example
+0            @result{} today
.             @result{} today
+4d           @result{} four days from today
+4            @result{} same as above
+2w           @result{} two weeks from today
++5           @result{} five days from default date
+2tue         @result{} second Tuesday from now.
#+end_example

@@info:@vindex parse-time-months@@
@@info:@vindex parse-time-weekdays@@

The function understands English month and weekday abbreviations. If
you want to use unabbreviated names and/or other languages, configure
the variables ~parse-time-months~ and ~parse-time-weekdays~.

@@info:@vindex org-read-date-force-compatible-dates@@

Not all dates can be represented in a given Emacs implementation. By
default Org mode forces dates into the compatibility range 1970--2037
which works on all Emacs implementations. If you want to use dates
outside of this range, read the docstring of the variable
~org-read-date-force-compatible-dates~.

You can specify a time range by giving start and end times or by
giving a start time and a duration (in HH:MM format). Use one or two
dash(es) as the separator in the former case and use '+' as the
separator in the latter case, e.g.:

#+begin_example
11am-1:15pm    @result{} 11:00-13:15
11am--1:15pm   @result{} same as above
11am+2:15      @result{} same as above
#+end_example

@@info:@cindex calendar, for selecting date@@
@@info:@vindex org-popup-calendar-for-date-prompt@@

Parallel to the minibuffer prompt, a calendar is popped up.[fn:69]
When you exit the date prompt, either by clicking on a date in the
calendar, or by pressing @@info:@key{@@RET@@info:}@@, the date selected in the
calendar will be combined with the information entered at the prompt.
You can control the calendar fully from the minibuffer:

@@info:@kindex <@@
@@info:@kindex >@@
@@info:@kindex M-v@@
@@info:@kindex C-v@@
@@info:@kindex mouse-1@@
@@info:@kindex S-@key{right}@@
@@info:@kindex S-@key{left}@@
@@info:@kindex S-@key{down}@@
@@info:@kindex S-@key{up}@@
@@info:@kindex M-S-@key{right}@@
@@info:@kindex M-S-@key{left}@@
@@info:@kindex @key{RET}@@
#+begin_example
@key{RET}           @r{Choose date at cursor in calendar.}
mouse-1        @r{Select date by clicking on it.}
S-@key{right}/@key{left}     @r{One day forward/backward.}
S-@key{down}/@key{up}     @r{One week forward/backward.}
M-S-@key{right}/@key{left}   @r{One month forward/backward.}
> / <          @r{Scroll calendar forward/backward by one month.}
M-v / C-v      @r{Scroll calendar forward/backward by 3 months.}
#+end_example

@@info:@vindex org-read-date-display-live@@

The actions of the date/time prompt may seem complex, but I assure you they
will grow on you, and you will start getting annoyed by pretty much any other
way of entering a date/time out there.  To help you understand what is going
on, the current interpretation of your input will be displayed live in the
minibuffer.[fn:70]

*** Custom time format
    :PROPERTIES:
    :DESCRIPTION: Making dates look different
    :END:
@@info:@cindex custom date/time format@@
@@info:@cindex time format, custom@@
@@info:@cindex date format, custom@@

@@info:@vindex org-display-custom-times@@
@@info:@vindex org-time-stamp-custom-formats@@

Org mode uses the standard ISO notation for dates and times as it is
defined in ISO 8601. If you cannot get used to this and require
another representation of date and time to keep you happy, you can get
it by customizing the variables ~org-display-custom-times~ and
~org-time-stamp-custom-formats~.

#+attr_texinfo: :table-type "table" :indic "@asis"
- @@info:@kbd{@@C-c C-x C-t@@info:}@@ ~org-toggle-time-stamp-overlays~ ::
  @@info:@kindex C-c C-x C-t@@

  Toggle the display of custom formats for dates and times.


@@info:@noindent@@
Org mode needs the default format for scanning, so the custom date/time
format does not /replace/ the default format---instead it is put
/over/ the default format using text properties.  This has the
following consequences:


- You cannot place the cursor onto a timestamp anymore, only before or
  after.

- The @@info:@kbd{@@S-@@info:@key{@@up@@info:}@@@@info:}@@ @@info:@kbd{@@S-@@info:@key{@@down@@info:}@@@@info:}@@ keys can no longer be
  used to adjust each component of a timestamp. If the cursor is at
  the beginning of the stamp, @@info:@kbd{@@S-@@info:@key{@@up@@info:}@@@@info:}@@
  @@info:@kbd{@@S-@@info:@key{@@down@@info:}@@@@info:}@@ will change the stamp by one day, just like
  @@info:@kbd{@@S-@@info:@key{@@left@@info:}@@@@info:}@@ @@info:@kbd{@@S-@@info:@key{@@right@@info:}@@@@info:}@@. At the end of the
  stamp, the time will be changed by one minute.

-  If the timestamp contains a range of clock times or a repeater,
   these will not be overlaid, but remain in the buffer as they were.

-  When you delete a timestamp character-by-character, it will only
   disappear from the buffer after /all/ (invisible) characters
   belonging to the ISO timestamp have been removed.

- If the custom timestamp format is longer than the default and you
  are using dates in tables, table alignment will be messed up.  If
  the custom format is shorter, things do work as expected.

** Deadlines and scheduling
   :PROPERTIES:
   :DESCRIPTION: Planning your work
   :END:

A timestamp may be preceded by special keywords to facilitate planning:

#+attr_texinfo: :table-type "table" :indic "@asis"
- ~DEADLINE~ ::
  @@info:@cindex DEADLINE keyword@@

  Meaning: the task (most likely a TODO item, though not necessarily) is
  supposed to be finished on that date.

  @@info:@vindex org-deadline-warning-days@@

  On the deadline date, the task will be listed in the agenda. In
  addition, the agenda for /today/ will carry a warning about the
  approaching or missed deadline, starting ~org-deadline-warning-days~
  before the due date, and continuing until the entry is marked DONE. An
  example:

  #+begin_example
  ,*** TODO write article about the Earth for the Guide
      DEADLINE: <2004-02-29 Sun>
      The editor in charge is [[bbdb:Ford Prefect]]
  #+end_example

  You can specify a different lead time for warnings for a specific
  deadlines using the following syntax. Here is an example with a
  warning period of 5 days ~DEADLINE: <2004-02-29 Sun -5d>~.

- ~SCHEDULED~ ::
  @@info:@cindex SCHEDULED keyword@@

  Meaning: you are planning to start working on that task on the given
  date.

  @@info:@vindex org-agenda-skip-scheduled-if-done@@

  The headline will be listed under the given date.[fn:71] In addition,
  a reminder that the scheduled date has passed will be present in the
  compilation for /today/, until the entry is marked DONE, i.e., the
  task will automatically be forwarded until completed.

  #+begin_example
  ,*** TODO Call Trillian for a date on New Years Eve.
      SCHEDULED: <2004-12-25 Sat>
  #+end_example

  @@info:@noindent@@
  *Important:* Scheduling an item in Org mode should /not/ be
  understood in the same way that we understand /scheduling a meeting/.
  Setting a date for a meeting is just a simple appointment, you should
  mark this entry with a simple plain timestamp, to get this item shown
  on the date where it applies.  This is a frequent misunderstanding by
  Org users.  In Org mode, /scheduling/ means setting a date when you
  want to start working on an action item.


You may use timestamps with repeaters in scheduling and deadline
entries.  Org mode will issue early and late warnings based on the
assumption that the timestamp represents the /nearest instance/ of
the repeater.  However, the use of diary sexp entries like

~<%%(org-float t 42)>~

in scheduling and deadline timestamps is limited.  Org mode does not
know enough about the internals of each sexp function to issue early and
late warnings.  However, it will show the item on each day where the
sexp entry matches.

*** Inserting deadline/schedule
    :PROPERTIES:
    :DESCRIPTION: Planning items
    :TITLE:    Inserting deadlines or schedules
    :END:

The following commands allow you to quickly insert a deadline or to schedule
an item:[fn:72]

#+attr_texinfo: :table-type "table" :indic "@asis"

- @@info:@kbd{@@C-c C-d@@info:}@@ ~org-deadline~ ::
  @@info:@kindex C-c C-d@@

  Insert @@info:@samp{@@DEADLINE@@info:}@@ keyword along with a stamp. The insertion
  will happen in the line directly following the headline. Any CLOSED
  timestamp will be removed. When called with a prefix arg, an existing
  deadline will be removed from the entry. Depending on the variable
  ~org-log-redeadline~, a note will be taken when changing an existing
  deadline.[fn:73]

- @@info:@kbd{@@C-c C-s@@info:}@@ ~org-schedule~ ::
  @@info:@kindex C-c C-s@@

  Insert @@info:@samp{@@SCHEDULED@@info:}@@ keyword along with a stamp. The insertion
  will happen in the line directly following the headline. Any
  @@info:@samp{@@CLOSED@@info:}@@ timestamp will be removed. When called with a
  prefix argument, remove the scheduling date from the entry. Depending
  on the variable ~org-log-reschedule~, a note will be taken when
  changing an existing scheduling time.[fn:74]

- @@info:@kbd{@@C-c C-x C-k@@info:}@@ ~org-mark-entry-for-agenda-action~ ::
  @@info:@kindex C-c C-x C-k@@
  @@info:@kindex k a@@
  @@info:@kindex k s@@

  Mark the current entry for agenda action. After you have marked the
  entry like this, you can open the agenda or the calendar to find an
  appropriate date. With the cursor on the selected date, press 
  @@info:@kbd{@@k s@@info:}@@ or @@info:@kbd{@@k d@@info:}@@ to schedule the marked item.

- @@info:@kbd{@@C-c / d@@info:}@@ ~org-check-deadlines~ ::
  @@info:@kindex C-c / d@@
  @@info:@cindex sparse tree, for deadlines@@
  @@info:@vindex org-deadline-warning-days@@

  Create a sparse tree with all deadlines that are either past-due, or
  which will become due within ~org-deadline-warning-days~. With
  @@info:@kbd{@@C-u@@info:}@@ prefix, show all deadlines in the file. With a numeric
  prefix, check that many days. For example, @@info:@kbd{@@C-1 C-c / d@@info:}@@
  shows all deadlines due tomorrow.

- @@info:@kbd{@@C-c / b@@info:}@@ ~org-check-before-date~ ::
  @@info:@kindex C-c / b@@

  Sparse tree for deadlines and scheduled items before a given date.

- @@info:@kbd{@@C-c / a@@info:}@@ ~org-check-after-date~ ::
  @@info:@kindex C-c / a@@
  
  Sparse tree for deadlines and scheduled items after a given date.


Note that ~org-schedule~ and ~org-deadline~ supports setting the date
by indicating a relative time: e.g. +1d will set the date to the next
day after today, and --1w will set the date to the previous week
before any current timestamp.

*** Repeated tasks
    :PROPERTIES:
    :DESCRIPTION: Items that show up again and again
    :END:
@@info:@cindex tasks, repeated@@
@@info:@cindex repeated tasks@@

Some tasks need to be repeated again and again.  Org mode helps to
organize such tasks using a so-called repeater in a DEADLINE, SCHEDULED,
or plain timestamp.  In the following example
#+begin_example
,** TODO Pay the rent
   DEADLINE: <2005-10-01 Sat +1m>
#+end_example
@@info:@noindent@@ the ~+1m~ is a repeater; the intended interpretation is
that the task has a deadline on <2005-10-01> and repeats itself every
(one) month starting from that time. You can use yearly, monthly,
weekly, daily and hourly repeat cookies by using the ~y/w/m/d/h~
letters. If you need both a repeater and a special warning period in a
deadline entry, the repeater should come first and the warning period
last: ~DEADLINE: <2005-10-01 Sat +1m -3d>~.

@@info:@vindex org-todo-repeat-to-state@@

Deadlines and scheduled items produce entries in the agenda when they
are over-due, so it is important to be able to mark such an entry as
completed once you have done so. When you mark a DEADLINE or a
SCHEDULE with the TODO keyword DONE, it will no longer produce entries
in the agenda. The problem with this is, however, that then also the
/next/ instance of the repeated entry will not be active. Org mode
deals with this in the following way: When you try to mark such an
entry DONE (using @@info:@kbd{@@C-c C-t@@info:}@@), it will shift the base date of
the repeating timestamp by the repeater interval, and immediately set
the entry state back to TODO.[fn:75] In the example above, setting the
state to DONE would actually switch the date like this:

#+begin_example
,** TODO Pay the rent
   DEADLINE: <2005-11-01 Tue +1m>
#+end_example

@@info:@vindex org-log-repeat@@ 

A timestamp will be added under the deadline, to keep a record that
you actually acted on the previous instance of this deadline.[fn:76]

As a consequence of shifting the base date, this entry will no longer be
visible in the agenda when checking past dates, but all future instances
will be visible.

With the @@info:@samp{@@+1m@@info:}@@ cookie, the date shift will always be exactly one
month.  So if you have not paid the rent for three months, marking this
entry DONE will still keep it as an overdue deadline.  Depending on the
task, this may not be the best way to handle it.  For example, if you
forgot to call your father for 3 weeks, it does not make sense to call
him 3 times in a single day to make up for it.  Finally, there are tasks
like changing batteries which should always repeat a certain time
/after/ the last time you did it.  For these tasks, Org mode has
special repeaters  @@info:@samp{@@++@@info:}@@ and @@info:@samp{@@.+@@info:}@@.  For example:

#+begin_example
,** TODO Call Father
   DEADLINE: <2008-02-10 Sun ++1w>
   Marking this DONE will shift the date by at least one week,
   but also by as many weeks as it takes to get this date into
   the future.  However, it stays on a Sunday, even if you called
   and marked it done on Saturday.
,** TODO Check the batteries in the smoke detectors
   DEADLINE: <2005-11-01 Tue .+1m>
   Marking this DONE will shift the date to one month after
   today.
#+end_example

You may have both scheduling and deadline information for a specific
task---just make sure that the repeater intervals on both are the
same.

An alternative to using a repeater is to create a number of copies of
a task subtree, with dates shifted in each copy. The command
@@info:@kbd{@@C-c C-x c@@info:}@@ was created for this purpose, it is described in
[[Structure editing]].

** Clocking work time
   :PROPERTIES:
   :DESCRIPTION: Tracking how long you spend on a task
   :END:
@@info:@cindex clocking time@@
@@info:@cindex time clocking@@

Org mode allows you to clock the time you spend on specific tasks in a
project.  When you start working on an item, you can start the clock.  When
you stop working on that task, or when you mark the task done, the clock is
stopped and the corresponding time interval is recorded.  It also computes
the total time spent on each subtree of a project.[fn:77]  And it remembers a
history or tasks recently clocked, to that you can jump quickly between a
number of tasks absorbing your time.

To save the clock history across Emacs sessions, use
#+header: :eval no
#+header: :exports code
#+begin_src emacs-lisp
(setq org-clock-persist 'history)
(org-clock-persistence-insinuate)
#+end_src
When you clock into a new task after resuming Emacs, the incomplete
clock will be found (see [[Resolving idle time]]) and you will be prompted
about what to do with it.[fn:78]

*** Clocking commands
    :PROPERTIES:
    :DESCRIPTION: Starting and stopping a clock
    :END:

#+attr_texinfo: :table-type "table" :indic "@kbd"
- @@info:@kbd{@@C-c C-x C-i@@info:}@@ ~org-clock-in~ ::
  @@info:@kindex C-c C-x C-i@@
  @@info:@vindex org-clock-into-drawer@@
  @@info:@vindex org-clock-continuously@@
  @@info:@cindex property, LOG_INTO_DRAWER@@

  Start the clock on the current item (clock-in). This inserts the CLOCK
  keyword together with a timestamp. If this is not the first clocking
  of this item, the multiple CLOCK lines will be wrapped into a
  ~:LOGBOOK:~ drawer (see also the variable ~org-clock-into-drawer~).
  You can also overrule the setting of this variable for a subtree by
  setting a ~CLOCK_INTO_DRAWER~ or ~LOG_INTO_DRAWER~ property. When
  called with a @@info:@kbd{@@C-u@@info:}@@ prefix argument, select the task from a
  list of recently clocked tasks. With two @@info:@kbd{@@C-u C-u@@info:}@@ prefixes,
  clock into the task at point and mark it as the default task; the
  default task will then always be available with letter @@info:@kbd{@@d@@info:}@@
  when selecting a clocking task. With three @@info:@kbd{@@C-u C-u C-u@@info:}@@
  prefixes, force continuous clocking by starting the clock when the
  last clock stopped.@*

  @@info:@cindex property: CLOCK_MODELINE_TOTAL@@
  @@info:@cindex property: LAST_REPEAT@@
  @@info:@vindex org-clock-modeline-total@@

  While the clock is running, the current clocking time is shown in the
  mode line, along with the title of the task. The clock time shown will
  be all time ever clocked for this task and its children. If the task
  has an effort estimate (see [[Effort estimates]]), the mode line displays
  the current clocking time against it.[fn:81] If the task is a
  repeating one (see [[Repeated tasks]]), only the time since the last reset
  of the task will be shown.[fn:79] More control over what time is shown
  can be exercised with the ~CLOCK_MODELINE_TOTAL~ property. It may have
  the values ~current~ to show only the current clocking instance,
  ~today~ to show all time clocked on this tasks today (see also the
  variable ~org-extend-today-until~), ~all~ to include all time, or
  ~auto~ which is the default.[fn:80]@* Clicking with @@info:@kbd{@@mouse-1@@info:}@@
  onto the mode line entry will pop up a menu with clocking options.

- @@info:@kbd{@@C-c C-x C-o@@info:}@@ ~org-clock-out~ ::
  @@info:@kindex C-c C-x C-o@@
  @@info:@vindex org-log-note-clock-out@@

  Stop the clock (clock-out).  This inserts another timestamp at the same
  location where the clock was last started.  It also directly computes
  the resulting time in inserts it after the time range as
  @@info:@samp{@@=>HH:MM@@info:}@@.  See the variable ~org-log-note-clock-out~ for the
  possibility to record an additional note together with the clock-out
  timestamp.[fn:82]

- @@info:@kbd{@@C-c C-x C-x@@info:}@@ ~org-clock-in-last~ ::
  @@info:@kindex C-c C-x C-x@@
@@info:@vindex org-clock-continuously@@

Reclock the last clocked task. With one @@info:@kbd{@@C-u@@info:}@@ prefix
argument, select the task from the clock history. With two
@@info:@kbd{@@C-u@@info:}@@ prefixes, force continuous clocking by starting the
clock when the last clock stopped.

- @@info:@kbd{@@C-c C-x C-e@@info:}@@ ~org-clock-modify-effort-estimate~ ::
  @@info:@kindex C-c C-x C-e@@

  Update the effort estimate for the current clock task.
- @@info:@kbd{@@C-c C-c@@info:}@@ @@info:@kbd{@@C-c C-y@@info:}@@ ~org-evaluate-time-range~ ::
  @@info:@kindex C-c C-c@@
  @@info:@kindex C-c C-y@@
  @@info:@kindex C-c C-c@@

  Recompute the time interval after changing one of the timestamps. This
  is only necessary if you edit the timestamps directly. If you change
  them with @@info:@kbd{@@S-@@info:@key{@@cursor@@info:}@@@@info:}@@ keys, the update is automatic.

- @@info:@kbd{@@C-S-@@info:@key{@@up@@info:}@@@@info:}@@ @@info:@kbd{@@C-S-@@info:@key{@@down@@info:}@@@@info:}@@ ~org-clock-timestamps-up/down~ ::
  @@info:@kindex C-S-@key{up/down}@@

  On ~CLOCK~ log lines, increase/decrease both timestamps so that the
  clock duration keeps the same.

- @@info:@kbd{@@S-M-@@info:@key{@@up@@info:}@@@@info:}@@ {{{kbdkey{S-M-,down})}}} ~org-timestamp-up/down~ ::
  @@info:@kindex S-M-@key{up/down}@@

  On ~CLOCK~ log lines, increase/decrease the timestamp at point and the
  one of the previous (or the next clock) timestamp by the same
  duration. For example, if you hit @@info:@kbd{@@S-M-@@info:@key{@@up@@info:}@@@@info:}@@ to increase a
  clocked-out timestamp by five minutes, then the clocked-in timestamp
  of the next clock will be increased by five minutes.

- @@info:@kbd{@@C-c C-t@@info:}@@ ~org-todo~ ::
  @@info:@kindex C-c C-t@@

  Changing the TODO state of an item to DONE automatically stops the
  clock if it is running in this same item.

- @@info:@kbd{@@C-c C-x C-q@@info:}@@ ~org-clock-cancel~ ::
  @@info:@kindex C-c C-x C-q@@

  Cancel the current clock. This is useful if a clock was started by
  mistake, or if you ended up working on something else.

- @@info:@kbd{@@C-c C-x C-j@@info:}@@ ~org-clock-goto~ ::
  @@info:@kindex C-c C-x C-j@@

  Jump to the headline of the currently clocked in task. With a
  @@info:@kbd{@@C-u@@info:}@@ prefix arg, select the target task from a list of
  recently clocked tasks.

- @@info:@kbd{@@C-c C-x C-d@@info:}@@ ~org-clock-display~ ::
  @@info:@kindex C-c C-x C-d@@
  @@info:@vindex org-remove-highlights-with-change@@

  Display time summaries for each subtree in the current buffer. This
  puts overlays at the end of each headline, showing the total time
  recorded under that heading, including the time of any subheadings.
  You can use visibility cycling to study the tree, but the overlays
  disappear when you change the buffer (see variable
  ~org-remove-highlights-with-change~) or press @@info:@kbd{@@C-c C-c@@info:}@@.


The @@info:@kbd{@@l@@info:}@@ key may be used in the timeline (see [[Timeline]]) and in
the agenda (see [[Weekly/daily agenda]]) to show which tasks have been
worked on or closed during a day.

*Important:* note that both ~org-clock-out~ and ~org-clock-in-last~
can have a global keybinding and will not modify the window
disposition.

*** The clock table
    :PROPERTIES:
    :DESCRIPTION: Detailed reports
    :END:
@@info:@cindex clocktable, dynamic block@@
@@info:@cindex report, of clocked time@@

Org mode can produce quite complex reports based on the time clocking
information.  Such a report is called a /clock table/, because it is
formatted as one or several Org tables.

#+attr_texinfo: :table-type "table" :indic "@asis"
- @@info:@kbd{@@C-c C-x C-r@@info:}@@ ~org-clock-report~ ::
  @@info:@kindex C-c C-x C-r@@

  Insert a dynamic block (see [[Dynamic blocks]]) containing a clock report
  as an Org mode table into the current file. When the cursor is at an
  existing clock table, just update it. When called with a prefix
  argument, jump to the first clock report in the current document and
  update it. The clock table always includes also trees with ~:ARCHIVE:~
  tag.

- @@info:@kbd{@@C-c C-c@@info:}@@ @@info:@kbd{@@C-c C-x C-u@@info:}@@ ~org-dblock-update~ ::
  @@info:@kindex C-c C-c@@

  Update dynamic block at point.  The cursor needs to be in the
  ~#+BEGIN~ line of the dynamic block.

- @@info:@kbd{@@C-u C-c C-x C-u@@info:}@@ ::
  @@info:@kindex C-u C-c C-x C-u@@

  Update all dynamic blocks (see [[Dynamic blocks]]). This is useful if you
  have several clock table blocks in a buffer.

- @@info:@kbd{@@S-@@info:@key{@@left)}} {{{kbdkey(S-@@info:}@@@@info:}@@ ~org-clocktable-try-shift~ ::

  Shift the current ~:block~ interval and update the table. The cursor
  needs to be in the ~#+BEGIN: clocktable~ line for this command. If
  ~:block~ is ~today~, it will be shifted to ~today-1~ etc.


Here is an example of the frame for a clock table as it is inserted
into the buffer with the @@info:@kbd{@@C-c C-x C-r@@info:}@@ command:

@@info:@cindex #+BEGIN, clocktable@@
#+begin_example
,#+BEGIN: clocktable :maxlevel 2 :emphasize nil :scope file
,#+END: clocktable
#+end_example
@@info:@noindent@@
@@info:@vindex org-clocktable-defaults@@
The @@info:@samp{@@BEGIN@@info:}@@ line and specify a number of options to define the scope,
structure, and formatting of the report.  Defaults for all these options can
be configured in the variable ~org-clocktable-defaults~.

@@info:@noindent@@ First there are options that determine which clock entries are to
be selected:
#+begin_example
:maxlevel    @r{Maximum level depth to which times are listed in the table.}
             @r{Clocks at deeper levels will be summed into the upper level.}
:scope       @r{The scope to consider.  This can be any of the following:}
             nil        @r{the current buffer or narrowed region}
             file       @r{the full current buffer}
             subtree    @r{the subtree where the clocktable is located}
             tree@var{N}      @r{the surrounding level @var{N} tree, for example ~tree3~}
             tree       @r{the surrounding level 1 tree}
             agenda     @r{all agenda files}
             ("file"..) @r{scan these files}
             file-with-archives    @r{current file and its archives}
             agenda-with-archives  @r{all agenda files, including archives}
:block       @r{The time block to consider.  This block is specified either}
             @r{absolute, or relative to the current time and may be any of}
             @r{these formats:}
             2007-12-31    @r{New year eve 2007}
             2007-12       @r{December 2007}
             2007-W50      @r{ISO-week 50 in 2007}
             2007-Q2       @r{2nd quarter in 2007}
             2007          @r{the year 2007}
             today, yesterday, today-@var{N}          @r{a relative day}
             thisweek, lastweek, thisweek-@var{N}     @r{a relative week}
             thismonth, lastmonth, thismonth-@var{N}  @r{a relative month}
             thisyear, lastyear, thisyear-@var{N}     @r{a relative year}
             @r{Use @kbd{S-@key{left}/@key{right}} keys to shift the time interval.}
:tstart      @r{A time string specifying when to start considering times.}
:tend        @r{A time string specifying when to stop considering times.}
:step        @r{~week~ or ~day~, to split the table into chunks.}
             @r{To use this, ~:block~ or ~:tstart~, ~:tend~ are needed.}
:stepskip0   @r{Do not show steps that have zero time.}
:fileskip0   @r{Do not show table sections from files which did not contribute.}
:tags        @r{A tags match to select entries that should contribute.  See}
             @r{[[Matching tags and properties]] for the match syntax.}
#+end_example

Then there are options which determine the formatting of the table.  There
options are interpreted by the function ~org-clocktable-write-default~,
but you can specify your own function using the ~:formatter~ parameter.
#+begin_example
:emphasize   @r{When ~t~, emphasize level one and level two items.}
:lang        @r{Language@footnote{Language terms can be set through the variable ~org-clock-clocktable-language-setup~.} to use for descriptive cells like "Task".}
:link        @r{Link the item headlines in the table to their origins.}
:narrow      @r{An integer to limit the width of the headline column in}
             @r{the org table.  If you write it like {{{samp(50!)}}}, then the}
             @r{headline will also be shortened in export.}
:indent      @r{Indent each headline field according to its level.}
:tcolumns    @r{Number of columns to be used for times.  If this is smaller}
             @r{than ~:maxlevel~, lower levels will be lumped into one column.}
:level       @r{Should a level number column be included?}
:compact     @r{Abbreviation for ~:level nil :indent t :narrow 40! :tcolumns 1~}
             @r{All are overwritten except if there is an explicit ~:narrow~}
:timestamp   @r{A timestamp for the entry, when available.  Look for SCHEDULED,}
             @r{DEADLINE, TIMESTAMP and TIMESTAMP_IA, in this order.}
:properties  @r{List of properties that should be shown in the table.  Each}
             @r{property will get its own column.}
:inherit-props @r{When this flag is ~t~, the values for ~:properties~ will be inherited.}
:formula     @r{Content of a ~#+TBLFM~ line to be added and evaluated.}
             @r{As a special case, {{{samp(:formula %)}}} adds a column with % time.}
             @r{If you do not specify a formula here, any existing formula}
             @r{below the clock table will survive updates and be evaluated.}
:formatter   @r{A function to format clock data and insert it into the buffer.}
#+end_example
To get a clock summary of the current level 1 tree, for the current
day, you could write
#+begin_example
,#+BEGIN: clocktable :maxlevel 2 :block today :scope tree1 :link t
,#+END: clocktable
#+end_example
@@info:@noindent@@
and to use a specific time range you could write:[fn:83]
#+begin_example
,#+BEGIN: clocktable :tstart "<2006-08-10 Thu 10:00>"
                    :tend "<2006-08-10 Thu 12:00>"
,#+END: clocktable
#+end_example
A summary of the current subtree with % times would be:
#+begin_example
,#+BEGIN: clocktable :scope subtree :link t :formula %
,#+END: clocktable
#+end_example
A horizontally compact representation of everything clocked during last week
would be:
#+begin_example
,#+BEGIN: clocktable :scope agenda :block lastweek :compact t
,#+END: clocktable
#+end_example

*** Resolving idle time
    :PROPERTIES:
    :DESCRIPTION: Resolving time when you've been idle
    :TITLE:    Resolving idle time and continuous clocking
    :END:

@@info:@cindex resolve idle time@@
@@info:@cindex idle, resolve, dangling@@

If you clock in on a work item, and then walk away from your
computer---perhaps to take a phone call---you often need to
``resolve'' the time you were away by either subtracting it from the
current clock, or applying it to another one.

@@info:@vindex org-clock-idle-time@@

By customizing the variable ~org-clock-idle-time~ to some integer,
such as 10 or 15, Emacs can alert you when you get back to your
computer after being idle for that many minutes, and ask what you want
to do with the idle time.[fn:84] There will be a question waiting for you
when you get back, indicating how much idle time has passed
(constantly updated with the current amount), as well as a set of
choices to correct the discrepancy:

#+attr_texinfo: :table-type "table" :indic "@kbd"
- @@info:@kbd{@@k@@info:}@@ ::
  @@info:@kindex k@@

  To keep some or all of the minutes and stay clocked in, press
  @@info:@kbd{@@k@@info:}@@. Org will ask how many of the minutes to keep. Press
  @@info:@key{@@RET@@info:}@@ to keep them all, effectively changing nothing, or
  enter a number to keep that many minutes.

- @@info:@kbd{@@K@@info:}@@ ::
  @@info:@kindex K@@

  If you use the shift key and press @@info:@kbd{@@K@@info:}@@, it will keep however
  many minutes you request and then immediately clock out of that task.
  If you keep all of the minutes, this is the same as just clocking out
  of the current task.

- @@info:@kbd{@@s@@info:}@@ ::
  @@info:@kindex s@@

  To keep none of the minutes, use @@info:@kbd{@@s@@info:}@@ to subtract all the away
  time from the clock, and then check back in from the moment you
  returned.

- @@info:@kbd{@@S@@info:}@@ ::
  @@info:@kindex S@@

  To keep none of the minutes and just clock out at the start of the
  away time, use the shift key and press @@info:@kbd{@@S@@info:}@@. Remember that
  using shift will always leave you clocked out, no matter which option
  you choose.

- @@info:@kbd{@@C@@info:}@@ ::
  @@info:@kindex C@@

  To cancel the clock altogether, use @@info:@kbd{@@C@@info:}@@. Note that if instead
  of canceling you subtract the away time, and the resulting clock
  amount is less than a minute, the clock will still be canceled rather
  than clutter up the log with an empty entry.


What if you subtracted those away minutes from the current clock, and
now want to apply them to a new clock? Simply clock in to any task
immediately after the subtraction. Org will notice that you have
subtracted time ``on the books'', so to speak, and will ask if you
want to apply those minutes to the next task you clock in on.

There is one other instance when this clock resolution magic occurs.
Say you were clocked in and hacking away, and suddenly your cat chased
a mouse who scared a hamster that crashed into your UPS's power
button! You suddenly lose all your buffers, but thanks to auto-save
you still have your recent Org mode changes, including your last clock
in.

If you restart Emacs and clock into any task, Org will notice that you
have a dangling clock which was never clocked out from your last
session. Using that clock's starting time as the beginning of the
unaccounted-for period, Org will ask how you want to resolve that
time. The logic and behavior is identical to dealing with away time
due to idleness; it is just happening due to a recovery event rather
than a set amount of idle time.

You can also check all the files visited by your Org agenda for
dangling clocks at any time using @@info:@kbd{@@M-x org-resolve-clocks RET@@info:}@@
 (or @@info:@kbd{@@C-c C-x C-z@@info:}@@).

*** Continuous clocking
@@info:@cindex continuous clocking@@
@@info:@vindex org-clock-continuously@@

You may want to start clocking from the time when you clocked out the
previous task. To enable this systematically, set
~org-clock-continuously~ to ~t~. Each time you clock in, Org retrieves
the clock-out time of the last clocked entry for this session, and
start the new clock from there.

If you only want this from time to time, use three universal prefix
arguments with ~org-clock-in~ and two @@info:@kbd{@@C-u C-u@@info:}@@ with
~org-clock-in-last~.

** Effort estimates
   :PROPERTIES:
   :DESCRIPTION: Planning work effort in advance
   :END:
@@info:@cindex effort estimates@@
@@info:@cindex property, Effort@@
@@info:@vindex org-effort-property@@

If you want to plan your work in a very detailed way, or if you need
to produce offers with quotations of the estimated work effort, you
may want to assign effort estimates to entries. If you are also
clocking your work, you may later want to compare the planned effort
with the actual working time, a great way to improve planning
estimates. Effort estimates are stored in a special property
@@info:@samp{@@Effort@@info:}@@.[fn:85] You can set the effort for an entry with
the following commands:

#+attr_texinfo: :table-type "table" :indic "@kbd"
- @@info:@kbd{@@C-c C-x e@@info:}@@ ~org-set-effort~ ::
  @@info:@kindex C-c C-x e@@

  Set the effort estimate for the current entry. With a numeric prefix
  argument, set it to the Nth allowed value (see below). This command is
  also accessible from the agenda with the @@info:@kbd{@@e@@info:}@@ key.

- @@info:@kbd{@@C-c C-x C-e@@info:}@@ ~org-clock-modify-effort-estimate~ ::
  @@info:@kindex C-c C-x C-e@@

  Modify the effort estimate of the item currently being clocked.


Clearly the best way to work with effort estimates is through column
view (see [[Column view]]). You should start by setting up discrete values
for effort estimates, and a ~COLUMNS~ format that displays these
values together with clock sums (if you want to clock your time). For
a specific buffer you can use:

#+begin_example
,#+PROPERTY: Effort_ALL 0 0:10 0:30 1:00 2:00 3:00 4:00 5:00 6:00 7:00
,#+COLUMNS: %40ITEM(Task) %17Effort(Estimated Effort)@{:@} %CLOCKSUM
#+end_example

@@info:@vindex org-global-properties@@
@@info:@vindex org-columns-default-format@@

@@info:@noindent@@ or, even better, you can set up these values globally
by customizing the variables ~org-global-properties~ and
~org-columns-default-format~. In particular if you want to use this
setup also in the agenda, a global setup may be advised.

The way to assign estimates to individual items is then to switch to
column mode, and to use @@info:@kbd{@@S-@@info:@key{@@right@@info:}@@@@info:}@@ and
@@info:@kbd{@@S-@@info:@key{@@left@@info:}@@@@info:}@@ to change the value. The values you enter will
immediately be summed up in the hierarchy. In the column next to it,
any clocked time will be displayed.

@@info:@vindex org-agenda-columns-add-appointments-to-effort-sum@@

If you switch to column view in the daily/weekly agenda, the effort column
will summarize the estimated work effort for each day, and you can use this to find space in your schedule.  To get
an overview of the entire part of the day that is committed, you can set the
option ~org-agenda-columns-add-appointments-to-effort-sum~.[fn:86] The
appointments on a day that take place over a specified time interval will
then also be added to the load estimate of the day.

Effort estimates can be used in secondary agenda filtering that is
triggered with the @@info:@kbd{@@/@@info:}@@ key in the agenda (see [[Agenda
commands]]). If you have these estimates defined consistently, two or
three key presses will narrow down the list to stuff that fits into an
available time slot.

** Relative timer
   :PROPERTIES:
   :DESCRIPTION: Notes with a running timer
   :TITLE:    Taking notes with a relative timer
   :END:
@@info:@cindex relative timer@@

When taking notes during, for example, a meeting or a video viewing, it can
be useful to have access to times relative to a starting time.  Org provides
such a relative timer and make it easy to create timed notes.

#+attr_texinfo: :table-type "table" :indic "@asis"
- @@info:@kbd{@@C-c C-x .@@info:}@@ ~org-timer~ ::
  @@info:@kindex C-c C-x .@@

  Insert a relative time into the buffer.  The first time you use this, the
  timer will be started.  When called with a prefix argument, the timer is
  restarted.

- @@info:@kbd{@@C-c C-x -@@info:}@@ ~org-timer-item~ ::
  @@info:@kindex C-c C-x -@@

  Insert a description list item with the current relative time.  With a prefix
  argument, first reset the timer to 0.

- @@info:@kbd{@@M-@@info:@key{@@RET@@info:}@@@@info:}@@ ~org-insert-heading~ ::
  @@info:@kindex M-@key{RET}@@

  Once the timer list is started, you can also use @@info:@kbd{@@M-@@info:@key{@@RET@@info:}@@@@info:}@@
  to insert new timer items.

#+comment  for key sequences with a comma, command name macros fail :(

- @@info:@kbd{@@C-c C-x@@info:}@@ ::
  @@info:@kindex C-c C-x@@
  @@info:@kindex C-c C-x@@

  Pause the timer, or continue it if it is already paused
  (@@info:@command{@@org-timer-pause-or-continue@@info:}@@).
#+comment  removed the sentence because it is redundant to the following item

- @@info:@kbd{@@C-u C-c C-x@@info:}@@ ::
  @@info:@kindex C-u C-c C-x@@
  @@info:@kindex C-u C-c C-x@@

  Stop the timer. After this, you can only start a new timer, not
  continue the old one. This command also removes the timer from the
  mode line.

- @@info:@kbd{@@C-c C-x 0@@info:}@@ ~org-timer-start~ ::
  @@info:@kindex C-c C-x 0@@

  Reset the timer without inserting anything into the buffer. By
  default, the timer is reset to 0. When called with a @@info:@kbd{@@C-u@@info:}@@
  prefix, reset the timer to specific starting offset. The user is
  prompted for the offset, with a default taken from a timer string at
  point, if any, So this can be used to restart taking notes after a
  break in the process. When called with a double prefix argument
  @@info:@kbd{@@C-u C-u@@info:}@@, change all timer strings in the active region by a
  certain amount. This can be used to fix timer strings if the timer was
  not started at exactly the right moment.

** Countdown timer
   :PROPERTIES:
   :DESCRIPTION: Starting a countdown timer for a task
   :END:
@@info:@cindex Countdown timer@@
@@info:@kindex C-c C-x ;@@
@@info:@kindex ;@@

Calling ~org-timer-set-timer~ from an Org mode buffer runs a countdown
timer. Use @@info:@kbd{@@;@@info:}@@ from agenda buffers, @@info:@key{@@C-c C-x ;@@info:}@@
everywhere else.

~org-timer-set-timer~ prompts the user for a duration and displays a
countdown timer in the modeline.  ~org-timer-default-timer~ sets the
default countdown value.  Giving a prefix numeric argument overrides this
default value.

* FIXED Capture - Refile - Archive
  :PROPERTIES:
  :DESCRIPTION: The ins and outs for projects
  :END:
@@info:@cindex capture@@

An important part of any organization system is the ability to quickly
capture new ideas and tasks, and to associate reference material with
them. Org does this using a process called /capture/. It also can
store files related to a task (/attachments/) in a special directory.
Once in the system, tasks and projects need to be moved around. Moving
completed project trees to an archive file keeps the system compact
and fast.

** Capture
   :PROPERTIES:
   :DESCRIPTION: Capturing new stuff
   :END:
@@info:@cindex capture@@

Org's method for capturing new items is heavily inspired by John
Wiegley excellent remember package. Up to version 6.36 Org used a
special setup for @@info:@file{@@remember.el@@info:}@@.  The file @@info:@file{@@org-remember.el@@info:}@@
is still part of Org mode for backward compatibility with existing
setups. You can find the documentation for org-remember at
[[http://orgmode.org/org-remember.pdf]].

The new capturing setup described here is preferred and should be used by new
users.  To convert your ~org-remember-templates~, run the following command:
@@info:@kbd{@@M-x org-capture-import-remember-templates@@info:@key{@@RET@@info:}@@@@info:}@@

@@info:@noindent@@ and then customize the new variable with 
@@info:@kbd{@@M-x customize-variable org-capture-templates@@info:}@@, check the result, and
save the customization. You can then use both remember and capture
until you are familiar with the new mechanism.

Capture lets you quickly store notes with little interruption of your work
flow.  The basic process of capturing is very similar to remember, but Org
does enhance it with templates and more.

*** Setting up capture
    :PROPERTIES:
    :DESCRIPTION: Where notes will be stored
    :END:

The following customization sets a default target file for notes, and defines
a global key for capturing new material.[fn:87]

@@info:@vindex org-default-notes-file@@
#+header: :eval no
#+header: :exports code
#+begin_src emacs-lisp
(setq org-default-notes-file (concat org-directory "/notes.org"))
(define-key global-map "\C-cc" 'org-capture)
#+end_src

*** Using capture
    :PROPERTIES:
    :DESCRIPTION: Commands to invoke and terminate capture
    :END:

#+attr_texinfo: :table-type "table" :indic "@asis"
- @@info:@kbd{@@C-c c@@info:}@@ ~org-capture~ ::
  @@info:@kindex C-c c@@
  @@info:@cindex date tree@@

  Call the command ~org-capture~. Note that this keybinding is global
  and not active by default - you need to install it. If you have
  templates defined (see [[Capture templates)]], it will offer these
  templates for selection or use a new Org outline node as the default
  template. It will insert the template into the target file and switch
  to an indirect buffer narrowed to this new node. You may then insert
  the information you want.

- @@info:@kbd{@@C-c C-c@@info:}@@ ~org-capture-finalize~ ::
  @@info:@kindex C-c C-c@@

  Once you have finished entering information into the capture buffer,
  @@info:@kbd{@@C-c C-c@@info:}@@ will return you to the window configuration before
  the capture process, so that you can resume your work without further
  distraction. When called with a prefix argument, finalize and then
  jump to the captured item.

- @@info:@kbd{@@C-c C-w@@info:}@@ ~org-capture-refile~ ::
  @@info:@kindex C-c C-w@@

  Finalize the capture process by refiling the note to a different place
  (see [[Refile and copy]]). Please realize that this is a normal refiling
  command that will be executed---so the cursor position at the moment
  you run this command is important. If you have inserted a tree with a
  parent and children, first move the cursor back to the parent. Any
  prefix argument given to this command will be passed on to the
  ~org-refile~ command.

- @@info:@kbd{@@C-c C-k@@info:}@@ ~org-capture-kill~ ::
  @@info:@kindex C-c C-k@@

  Abort the capture process and return to the previous state.


You can also call ~org-capture~ in a special way from the agenda,
using the @@info:@kbd{@@k c@@info:}@@ key combination. With this access, timestamps
inserted by the selected capture template will default to the cursor
date in the agenda, rather than to the current date.

To find the locations of the last stored capture, use ~org-capture~ with
prefix commands:

#+attr_texinfo: :table-type "table" :indic "@asis"
- @@info:@kbd{@@C-u C-c c@@info:}@@ ::
  @@info:@kindex C-u C-c c@@

  Visit the target location of a capture template. You get to select the
  template in the usual way.

- @@info:@kbd{@@C-u C-u C-c c@@info:}@@ ::
  @@info:@kindex C-u C-u C-c c@@

  Visit the last stored capture item in its buffer.


@@info:@vindex org-capture-bookmark@@
@@info:@cindex org-capture-last-stored@@

You can also jump to the bookmark ~org-capture-last-stored~, which
will automatically be created unless you set ~org-capture-bookmark~ to
~nil~.

To insert the capture at point in an Org buffer, call ~org-capture~
with a ~C-0~ prefix argument.

*** Capture templates
    :PROPERTIES:
    :DESCRIPTION: Define the outline of different note types
    :END:
@@info:@cindex templates, for Capture@@

You can use templates for different types of capture items, and for
different target locations. The easiest way to create such templates
is through the customize interface.

#+attr_texinfo: :table-type "table" :indic "@asis"
- @@info:@kbd{@@C-c c C@@info:}@@ ::
  @@info:@kindex C-c c C@@

  Customize the variable ~org-capture-templates~.


Before we give the formal description of template definitions, let's
look at an example. Say you would like to use one template to create
general TODO entries, and you want to put these entries under the
heading @@info:@samp{@@Tasks@@info:}@@ in your file @@info:@file{@@~/org/gtd.org@@info:}@@.
Also, a date tree in the file @@info:@file{@@journal.org@@info:}@@ should capture
journal entries. A possible configuration would look like:

#+header: :eval no
#+header: :exports code
#+begin_src emacs-lisp
(setq org-capture-templates
 '(("t" "Todo" entry (file+headline "~/org/gtd.org" "Tasks")
        "* TODO %?\n  %i\n  %a")
   ("j" "Journal" entry (file+datetree "~/org/journal.org")
        "* %?\nEntered on %U\n  %i\n  %a")))
#+end_src

@@info:@noindent@@ If you then press @@info:@kbd{@@C-c c t@@info:}@@, Org will prepare
the template for you like this:

#+begin_example
,* TODO
  [[file:@var{link to where you initiated capture}]]
#+end_example

@@info:@noindent@@ During expansion of the template, ~%a~ has been
replaced by a link to the location from where you called the capture
command. This can be extremely useful for deriving tasks from emails,
for example. You fill in the task definition, press ~C-c C-c~ and Org
returns you to the same place where you started the capture process.

To define special keys to capture to a particular template without
going through the interactive template selection, you can create your
key binding like this:

#+header: :eval no
#+header: :exports code
#+begin_src emacs-lisp
(define-key global-map "\C-cx"
   (lambda () (interactive) (org-capture nil "x")))
#+end_src

**** Template elements
     :PROPERTIES:
     :DESCRIPTION: What is needed for a complete template entry
     :END:

Now lets look at the elements of a template definition.  Each entry in
~org-capture-templates~ is a list with the following items:

#+attr_texinfo: :table-type "table" :indic "@asis"
- ~keys~ ::

  The keys that will select the template, as a string, characters
  only, for example "a" for a template to be selected with a
  single key, or "BTW" for selection with two keys.  When using
  several keys, keys using the same prefix key must be sequential
  in the list and preceded by a 2-element entry explaining the
  prefix key, for example:

  #+header: :eval no
  #+header: :exports code
  #+begin_src emacs-lisp
    ("b" "Templates for marking stuff to buy")
  #+end_src

  @@info:@noindent@@ If you do not define a template for the @@info:@kbd{@@C@@info:}@@
  key, this key will be used to open the customize buffer for this
  complex variable.

- ~description~ ::

  A short string describing the template, which will be shown during
  selection.

- ~type~ ::

  The type of entry, a symbol.  Valid values are:

  - ~entry~ ::

    An Org mode node, with a headline. Will be filed as the child of the
    target entry or as a top-level entry. The target file should be an Org
    mode file.

  - ~item~ ::

    A plain list item, placed in the first plain list at the target
    location. Again the target file should be an Org file.

  - ~checkitem~ ::

    A checkbox item. This only differs from the plain list item by the
    default template.

  - ~table-line~ ::

    A new line in the first table at the target location. Where exactly
    the line will be inserted depends on the properties ~:prepend~ and
    ~:table-line-pos~ (see below).

  - plain ::

    Text to be inserted as it is.

- target ::
  @@info:@vindex org-default-notes-file@@

  Specification of where the captured item should be placed.  In Org mode
  files, targets usually define a node.  Entries will become children of this
  node.  Other types will be added to the table or list in the body of this
  node.  Most target specifications contain a file name.  If that file name is
  the empty string, it defaults to ~org-default-notes-file~.  A file can
  also be given as a variable, function, or Emacs Lisp form.

  Valid values are:

  - ~(file "path/to/file")~ ::

    Text will be placed at the beginning or end of that file.

  - ~(id "id of existing org entry")~ ::

    Filing as child of this entry, or in the body of the entry.

  - ~(file+headline "path/to/file" "node headline")~ ::

    Fast configuration if the target heading is unique in the file.

  - ~(file+olp "path/to/file" "Level 1 heading" "Level 2" ...)~ ::

    For non-unique headings, the full path is safer.

  - ~(file+regexp  "path/to/file" "regexp to find location")~ ::

    Use a regular expression to position the cursor.

  - ~(file+datetree "path/to/file")~ ::

    Will create a heading in a date tree for today's date.

  - ~(file+datetree+prompt "path/to/file")~ ::

    Will create a heading in a date tree, but will prompt for the date.

  - ~(file+function "path/to/file" function-finding-location)~ ::

    A function to find the right location in the file.

  - ~(clock)~ ::

    File to the entry that is currently being clocked.

  - ~(function function-finding-location)~ ::

    Most general way, write your own function to find both
    file and location.

- ~template~ ::

  The template for creating the capture item. If you leave this empty,
  an appropriate default template will be used. Otherwise this is a
  string with escape codes, which will be replaced depending on time and
  context of the capture call. The string with escapes may be loaded
  from a template file, using the special syntax 
  ~(file "path/to/template")~. See below for more details.

- ~properties~ ::

  The rest of the entry is a property list of additional options.
  Recognized properties are:

  - ~:prepend~ ::

    Normally new captured information will be appended at the target
    location (last child, last table line, last list item...). Setting
    this property will change that.

  - ~:immediate-finish~ ::

    When set, do not offer to edit the information, just file it away
    immediately. This makes sense if the template only needs information
    that can be added automatically.

  - ~:empty-lines~ ::

    Set this to the number of lines to insert before and after the new
    item. The default is 0, and the only other common value is 1.

  - ~:clock-in~ ::

    Start the clock in this item.

  - ~:clock-keep~ ::

    Keep the clock running when filing the captured entry.

  - ~:clock-resume~ ::

    If starting the capture interrupted a clock, restart that clock when
    finished with the capture. Note that ~:clock-keep~ has precedence over
    ~:clock-resume~. When setting both to ~t~, the current clock will run
    and the previous one will not be resumed.

  - ~:unnarrowed~ ::

    Do not narrow the target buffer, simply show the full buffer. Default
    is to narrow it so that you only see the new material.

  - ~:table-line-pos~ ::

    Specification of the location in the table where the new line should
    be inserted. It should be a string like "II-3" meaning that the new
    line should become the third line before the second horizontal
    separator line.

  - ~:kill-buffer~ ::

    If the target file was not yet visited when capture was invoked, kill
    the buffer again after capture is completed.


**** Template expansion
     :PROPERTIES:
     :DESCRIPTION: Filling in information about time and context
     :END:

In the template itself, special @@info:@kbd{@@%@@info:}@@-escapes allow dynamic
insertion of content.[fn:88] The templates are expanded in the order given
here:

#+begin_example
%[@var{file}]     @r{Insert the contents of the file given by @var{file}.}
%(@var{sexp})     @r{Evaluate Elisp @var{sexp} and replace with the result.}
            @r{The sexp must return a string.}
%<...>      @r{The result of format-time-string on the ... format specification.}
%t          @r{Timestamp, date only.}
%T          @r{Timestamp, with date and time.}
%u, %U      @r{Like the above, but inactive timestamps.}
%i          @r{Initial content, the region when capture is called while the}
            @r{region is active.}
            @r{The entire text will be indented like ~%i~ itself.}
%a          @r{Annotation, normally the link created with ~org-store-link~.}
%A          @r{Like ~%a~, but prompt for the description part.}
%l          @r{Like %a, but only insert the literal link.}
%c          @r{Current kill ring head.}
%x          @r{Content of the X clipboard.}
%k          @r{Title of the currently clocked task.}
%K          @r{Link to the currently clocked task.}
%n          @r{User name (taken from ~user-full-name~).}
%f          @r{File visited by current buffer when org-capture was called.}
%F          @r{Full path of the file or directory visited by current buffer.}
%:keyword   @r{Specific information for certain link types, see below.}
%^g         @r{Prompt for tags, with completion on tags in target file.}
%^G         @r{Prompt for tags, with completion all tags in all agenda files.}
%^t         @r{Like ~%t~, but prompt for date.  Similarly ~%^T~, ~%^u~, ~%^U~.}
            @r{You may define a prompt like ~%^@{Birthday@~t}.}
%^C         @r{Interactive selection of which kill or clip to use.}
%^L         @r{Like ~%^C~, but insert as link.}
%^@{@var{prop}@}p   @r{Prompt the user for a value for property @var{prop}.}
%^@{@var{prompt}@}  @r{prompt the user for a string and replace this sequence with it.}
            @r{You may specify a default value and a completion table with}
            @r{%^@{prompt|default|completion2|completion3...@}.}
            @r{The arrow keys access a prompt-specific history.}
%\n         @r{Insert the text entered at the nth %^@{@var{prompt}@}, where ~n~ is}
            @r{a number, starting from 1.}
%?          @r{After completing the template, position cursor here.}
#+end_example

@@info:@noindent@@ For specific link types, the following keywords will be
defined:[fn:89]

@@info:@vindex org-from-is-user-regexp@@

| Link type                       | Available keywords                | Notes                                  |
|---------------------------------+-----------------------------------+----------------------------------------|
| bbdb                            | ~%:name %:company~                |                                        |
| irc                             | ~%:server %:port %:nick~          |                                        |
| vm, vm-imap, wl, mh, mew, rmail | ~%:type %:subject %:message-id~   |                                        |
|                                 | ~%:from %:fromname %:fromaddress~ |                                        |
|                                 | ~%:to %:toname %:toaddress~       |                                        |
|                                 | ~%:date~                          | message date header field              |
|                                 | ~%:date-timestamp~                | date as active timestamp               |
|                                 | ~%:date-timestamp-inactive~       | date as inactive timestamp             |
|                                 | ~%:fromto~                        | either "to NAME" or "from NAME"[fn:90] |
| gnus                            | ~%:group~                         | for messages, also all email fields    |
| w3, w3m                         | ~%:url~                           |                                        |
| info                            | ~%:file %:node~                   |                                        |
| calendar                        | ~%:date~                          |                                        |

@@info:@noindent@@ To place the cursor after template expansion use:

#+attr_texinfo: :table-type "table" :indic "asis"
- ~%?~ :: 

   After completing the template, position cursor here.



**** Templates in contexts
     :PROPERTIES:
     :DESCRIPTION: Only show a template in a specific context
     :END:

@@info:@vindex org-capture-templates-contexts@@

To control whether a capture template should be accessible from a
specific context, you can customize ~org-capture-templates-contexts~.
Let's say, for example, that you have a capture template "p" for
storing Gnus emails containing patches. Then you would configure this
option like this:

#+header: :eval no
#+header: :exports code
#+begin_src emacs-lisp
(setq org-capture-templates-contexts
      '(("p" (in-mode . "message-mode"))))
#+end_src

You can also tell that the command key "p" should refer to another
template.  In that case, add this command key like this:

#+header: :eval no
#+header: :exports code
#+begin_src emacs-lisp
(setq org-capture-templates-contexts
      '(("p" "q" (in-mode . "message-mode"))))
#+end_src

See the docstring of the variable ~org-capture-templates-contexts~ for
more information.


** Attachments
   :PROPERTIES:
   :DESCRIPTION: Add files to tasks
   :END:
@@info:@cindex attachments@@
@@info:@vindex org-attach-directory@@

It is often useful to associate reference material with an outline
node/task. Small chunks of plain text can simply be stored in the
subtree of a project. Hyperlinks (see [[Hyperlinks]]) can establish
associations with files that live elsewhere on your computer or in the
cloud, like emails or source code files belonging to a project.
Another method is /attachments/, which are files located in a
directory belonging to an outline node. Org uses directories named by
the unique ID of each entry. These directories are located in the
@@info:@file{@@data@@info:}@@ directory which lives in the same directory where
your Org file lives.[fn:91] If you initialize this directory with
~git init~, Org will automatically commit changes when it sees them.
The attachment system has been contributed to Org by John Wiegley.

In cases where it seems better to do so, you can also attach a
directory of your choice to an entry. You can also make children
inherit the attachment directory from a parent, so that an entire
subtree uses the same attached directory.

@@info:@noindent@@ The following commands deal with attachments:

#+attr_texinfo: :table-type "table" :indic "@asis"

- @@info:@kbd{@@C-c C-a@@info:}@@ ~org-attach~ ::
  @@info:@kindex C-c C-a@@

  The dispatcher for commands related to the attachment system. After
  these keys, a list of commands is displayed and you must press an
  additional key to select a command:

  - @@info:@kbd{@@a@@info:}@@ ~org-attach-attach~ ::
    @@info:@kindex C-c C-a a@@
    @@info:@vindex org-attach-method@@

    Select a file and move it into the task's attachment directory. The
    file will be copied, moved, or linked, depending on
    ~org-attach-method~. Note that hard links are not supported on all
    systems.

  - @@info:@kbd{@@c@@info:}@@/@@info:@kbd{@@m@@info:}@@/@@info:@kbd{@@l@@info:}@@ ::
    @@info:@kindex C-c C-a c@@
    @@info:@kindex C-c C-a m@@
    @@info:@kindex C-c C-a l@@

    Attach a file using the copy/move/link method. Note that hard links
    are not supported on all systems.

  - @@info:@kbd{@@n@@info:}@@ ~org-attach-new~ ::
    @@info:@kindex C-c C-a n@@

    Create a new attachment as an Emacs buffer.

  - @@info:@kbd{@@z@@info:}@@ ~org-attach-sync~ ::
    @@info:@kindex C-c C-a z@@

    Synchronize the current task with its attachment directory, in case
    you added attachments yourself.

  - @@info:@kbd{@@o@@info:}@@ ~org-attach-open~ ::
    @@info:@kindex C-c C-a o@@
    @@info:@vindex org-file-apps@@

    Open current task's attachment. If there is more than one, prompt for
    a file name first. Opening will follow the rules set by
    ~org-file-apps~. For more details, see the information on following
    hyperlinks (see [[Handling links]]).

  - @@info:@kbd{@@O@@info:}@@ ~org-attach-open-in-emacs~ ::
    @@info:@kindex C-c C-a O@@

    Also open the attachment, but force opening the file in Emacs.

  - @@info:@kbd{@@f@@info:}@@ ~org-attach-reveal~ ::
    @@info:@kindex C-c C-a f@@

    Open the current task's attachment directory.

  - @@info:@kbd{@@F@@info:}@@ ~org-attach-reveal-in-emacs~ ::
    @@info:@kindex C-c C-a F@@

    Also open the directory, but force using @command{dired} in Emacs.

  - @@info:@kbd{@@d@@info:}@@ ~org-attach-delete-one~ ::
    @@info:@kindex C-c C-a d@@

    Select and delete a single attachment.

  - @@info:@kbd{@@D@@info:}@@ ~org-attach-delete-all~ ::
    @@info:@kindex C-c C-a D@@

    Delete all of a task's attachments. A safer way is to open the
    directory in @@info:@command{@@dired@@info:}@@ and delete from there.

  - @@info:@kbd{@@s@@info:}@@ ~org-attach-set-directory~ ::
    @@info:@kindex C-c C-a s@@
    @@info:@cindex property, ATTACH_DIR@@

    Set a specific directory as the entry's attachment directory. This
    works by putting the directory path into the ~ATTACH_DIR~ property.

  - @@info:@kbd{@@i@@info:}@@ ~org-attach-set-inherit~ ::
    @@info:@kindex C-c C-a i@@
    @@info:@cindex property, ATTACH_DIR_INHERIT@@

    Set the ~ATTACH_DIR_INHERIT~ property, so that children will use the
    same directory for attachments as the parent does.



** RSS Feeds
   :PROPERTIES:
   :DESCRIPTION: Getting input from RSS feeds
   :END:
@@info:@cindex RSS feeds@@
@@info:@cindex Atom feeds@@

Org can add and change entries based on information found in RSS feeds and
Atom feeds.  You could use this to make a task out of each new podcast in a
podcast feed.  Or you could use a phone-based note-creating service on the
web to import tasks into Org.  To access feeds, configure the variable
~org-feed-alist~.  The docstring of this variable has detailed
information.  Here is an example:

#+header: :eval no
#+header: :exports code
#+begin_src emacs-lisp
(setq org-feed-alist
     '(("Slashdot"
         "http://rss.slashdot.org/Slashdot/slashdot"
         "~/txt/org/feeds.org" "Slashdot Entries")))
#+end_src

@@info:@noindent@@ will configure that new items from the feed provided by
~rss.slashdot.org~ will result in new entries in the file
@@info:@file{@@~/org/feeds.org@@info:}@@ under the heading ~Slashdot Entries~,
whenever the following command is used:

#+attr_texinfo: :table-type "table" :indic "@asis"
- @@info:@kbd{@@C-c C-x g@@info:}@@ ~org-feed-update-all~ ::
  @@info:@kindex C-c C-x g@@

  Collect items from the feeds configured in ~org-feed-alist~ and act
  upon them.

- @@info:@kbd{@@C-c C-x G@@info:}@@ ~org-feed-goto-inbox~ ::
  @@info:@kindex C-c C-x G@@

  Prompt for a feed name and go to the inbox configured for this feed.


Under the same headline, Org will create a drawer
@@info:@samp{@@FEEDSTATUS@@info:}@@ in which it will store information about the
status of items in the feed, to avoid adding the same item several
times. You should add @@info:@samp{@@FEEDSTATUS@@info:}@@ to the list of drawers in
that file:

#+begin_example
,#+DRAWERS: LOGBOOK PROPERTIES FEEDSTATUS
#+end_example

For more information, including how to read atom feeds, see
@@info:@file{@@org-feed.el@@info:}@@ and the docstring of ~org-feed-alist~.


** Protocols
   :PROPERTIES:
   :DESCRIPTION: External (e.g., browser) access to Emacs and Org
   :TITLE:    Protocols for external access
   :END:

@@info:@cindex protocols, for external access@@
@@info:@cindex emacsserver@@

You can set up Org for handling protocol calls from outside
applications that are passed to Emacs through the
@@info:@file{@@emacsserver@@info:}@@. For example, you can configure bookmarks in
your web browser to send a link to the current page to Org and create
a note from it using capture (see [[Capture]]). Or you could create a
bookmark that will tell Emacs to open the local source file of a
remote website you are looking at with the browser. See
[[http://orgmode.org/worg/org-contrib/org-protocol.php]] for detailed
documentation and setup instructions.


** Refile and copy
   :PROPERTIES:
   :DESCRIPTION: Moving/copying a tree from one place to another
   :END:
@@info:@cindex refiling notes@@
@@info:@cindex copying notes@@

When reviewing the captured data, you may want to refile or to copy some of
the entries into a different list, for example into a project.  Cutting,
finding the right location, and then pasting the note is cumbersome.  To
simplify this process, you can use the following special command:

#+attr_texinfo: :table-type "table" :indic "@asis"
- @@info:@kbd{@@C-c M-w@@info:}@@ ~org-copy~ ::
  @@info:@kindex C-c M-w@@
  @@info:@findex org-copy@@

  Copying works like refiling, except that the original note is not deleted.

- @@info:@kbd{@@C-c C-w@@info:}@@ ~org-refile~ ::
  @@info:@kindex C-c C-w@@
  @@info:@findex org-refile@@
  @@info:@vindex org-reverse-note-order@@
  @@info:@vindex org-refile-targets@@
  @@info:@vindex org-refile-use-outline-path@@
  @@info:@vindex org-outline-path-complete-in-steps@@
  @@info:@vindex org-refile-allow-creating-parent-nodes@@
  @@info:@vindex org-log-refile@@
  @@info:@vindex org-refile-use-cache@@

  Refile the entry or region at point. This command offers possible
  locations for refiling the entry and lets you select one with
  completion. The item (or all items in the region) is filed below the
  target heading as a subitem. Depending on ~org-reverse-note-order~, it
  will be either the first or last subitem.

  By default, all level 1 headlines in the current buffer are considered
  to be targets, but you can have more complex definitions across a
  number of files. See the variable ~org-refile-targets~ for details. If
  you would like to select a location via a file-path-like completion
  along the outline path, see the variables
  ~org-refile-use-outline-path~ and
  ~org-outline-path-complete-in-steps~. If you would like to be able to
  create new nodes as new parents for refiling on the fly, check the
  variable ~org-refile-allow-creating-parent-nodes~. When the variable
  ~org-log-refile~ is set, a timestamp or a note will be recorded when
  an entry has been refiled.[fn:92]

- @@info:@kbd{@@C-u C-c C-w@@info:}@@ ::
  @@info:@kindex C-u C-c C-w@@

  Use the refile interface to jump to a heading.

- @@info:@kbd{@@C-u C-u C-c C-w@@info:}@@ ~org-refile-goto-last-stored~ ::
  @@info:@kindex C-u C-u C-c C-w@@

  Jump to the location where ~org-refile~ last moved a tree to.

- @@info:@kbd{@@C-2 C-c C-w@@info:}@@ ::
  @@info:@kindex C-2 C-c C-w@@

  Refile as the child of the item currently being clocked.

- @@info:@kbd{@@C-0 C-c C-w@@info:}@@ or @@info:@kbd{@@C-u C-u C-u C-c C-w@@info:}@@ ~org-refile-cache-clear~ ::
  @@info:@kindex C-u C-u C-u C-c C-w@@
  @@info:@kindex C-0 C-c C-w@@

  Clear the target cache.  Caching of refile targets can be turned on by
  setting ~org-refile-use-cache~.  To make the command see new possible
  targets, you have to clear the cache with this command.



** Archiving
   :PROPERTIES:
   :DESCRIPTION: What to do with finished products
   :END:
@@info:@cindex archiving@@

When a project represented by a (sub)tree is finished, you may want to
move the tree out of the way and to stop it from contributing to the
agenda. Archiving is important to keep your working files compact and
global searches like the construction of agenda views fast.

#+attr_texinfo: :table-type "table" :indic "@asis"
- @@info:@kbd{@@C-c C-x C-a@@info:}@@ ~org-archive-subtree-default~ ::
  @@info:@kindex C-c C-x C-a@@
  @@info:@vindex org-archive-default-command@@

  Archive the current entry using the command specified in the variable
  ~org-archive-default-command~.


*** Moving subtrees
    :PROPERTIES:
    :DESCRIPTION: Moving a tree to an archive file
    :TITLE:    Moving a tree to an archive file
    :END:
@@info:@cindex external archiving@@

The most common archiving action is to move a project tree to another file,
the archive file.

#+attr_texinfo: :table-type "table" :indic "@asis"
- @@info:@kbd{@@C-c C-x C-s@@info:}@@ or short @@info:@kbd{@@C-c $@@info:}@@ ~org-archive-subtree~ ::
  @@info:@kindex C-c C-x C-s@@
  @@info:@kindex C-c $@@
  @@info:@vindex org-archive-location@@

  Archive the subtree starting at the cursor position to the location
  given by ~org-archive-location~.

- @@info:@kbd{@@C-u C-c C-x C-s@@info:}@@ ::
  @@info:@kindex C-u C-c C-x C-s@@

  Check if any direct children of the current headline could be moved to
  the archive. To do this, each subtree is checked for open TODO
  entries. If none are found, the command offers to move it to the
  archive location. If the cursor is /not/ on a headline when this
  command is invoked, the level 1 trees will be checked.


@@info:@cindex archive locations@@

The default archive location is a file in the same directory as the
current file, with the name derived by appending @@info:@file{@@_archive@@info:}@@
to the current file name. You can also choose what heading to file
archived items under, with the possibility to add them to a datetree
in a file. For information and examples on how to specify the file and
the heading, see the documentation string of the variable
~org-archive-location~.

There is also an in-buffer option for setting this variable, for
example:[fn:93]

@@info:@cindex #+ARCHIVE@@
#+begin_example
,#+ARCHIVE: %s_done::
#+end_example

@@info:@cindex property, ARCHIVE@@

@@info:@noindent@@ If you would like to have a special ARCHIVE location
for a single entry or a (sub)tree, give the entry an ~:ARCHIVE:~
property with the location as the value (see [[Properties and Columns]]).

@@info:@vindex org-archive-save-context-info@@

When a subtree is moved, it receives a number of special properties
that record context information like the file from where the entry
came, its outline path the archiving time etc. Configure the variable
~org-archive-save-context-info~ to adjust the amount of information
added.


*** Internal archiving
    :PROPERTIES:
    :DESCRIPTION: Switch off a tree but keep it in the file
    :END:

If you want to just switch off (for agenda views) certain subtrees
without moving them to a different file, you can use the ~ARCHIVE
tag~.

A headline that is marked with the ARCHIVE tag (see [[Tags]]) stays at
its location in the outline tree, but behaves in the following way:

- It does not open when you attempt to do so with a visibility cycling
  command (see [[Visibility cycling]]). You can force cycling archived
  subtrees with @@info:@kbd{@@C-@@info:@key{@@TAB@@info:}@@@@info:}@@, or by setting the option
  ~org-cycle-open-archived-trees~. Also normal outline commands like
  ~show-all~ will open archived subtrees.

  @@info:@vindex org-cycle-open-archived-trees@@

- During sparse tree construction (see [[Sparse trees]]), matches in
  archived subtrees are not exposed, unless you configure the option
  ~org-sparse-tree-open-archived-trees~.

  @@info:@vindex org-sparse-tree-open-archived-trees@@

- During agenda view construction (see [[Agenda Views]]), the content of
  archived trees is ignored unless you configure the option
  ~org-agenda-skip-archived-trees~, in which case these trees will
  always be included.  In the agenda you can press @@info:@kbd{@@v a@@info:}@@ to
  get archives temporarily included.

  @@info:@vindex org-agenda-skip-archived-trees@@

- Archived trees are not exported (see [[Exporting]]), only the headline
  is. Configure the details using the variable
  ~org-export-with-archived-trees~.

  @@info:@vindex org-export-with-archived-trees@@

- Archived trees are excluded from column view unless the variable
  ~org-columns-skip-archived-trees~ is configured to ~nil~.

  @@info:@vindex org-columns-skip-archived-trees@@


The following commands help manage the ARCHIVE tag:

#+attr_texinfo: :table-type "table" :indic "@asis"
- @@info:@kbd{@@C-c C-x a@@info:}@@ ~org-toggle-archive-tag~ ::
  @@info:@kindex C-c C-x a@@

  Toggle the ARCHIVE tag for the current headline. When the tag is set,
  the headline changes to a shadowed face, and the subtree below it is
  hidden.

- @@info:@kbd{@@C-u C-c C-x a@@info:}@@ ::
  @@info:@kindex C-u C-c C-x a@@

  Check if any direct children of the current headline should be
  archived. To do this, each subtree is checked for open TODO entries.
  If none are found, the command offers to set the ARCHIVE tag for the
  child. If the cursor is /not/ on a headline when this command is
  invoked, the level 1 trees will be checked.

- @@info:@kbd{@@C-@@info:@key{@@TAB@@info:}@@@@info:}@@ ~org-force-cycle-archived~ ::

  Cycle a tree even if it is tagged with ARCHIVE.

- @@info:@kbd{@@C-c C-x A@@info:}@@ ~org-archive-to-archive-sibling~ ::
  @@info:@kindex C-c C-x A@@

  Move the current entry to the /Archive Sibling/. This is a sibling of
  the entry with the heading @@info:@samp{@@Archive@@info:}@@ and the tag
  @@info:@samp{@@ARCHIVE@@info:}@@. The entry becomes a child of that sibling and in
  this way retains a lot of its original context, including inherited
  tags and approximate position in the outline.

* FIXED Agenda views
  :PROPERTIES:
  :DESCRIPTION: Collecting information into views
  :TEXINFO_MENU_TITLE: Agenda Views
  :END:

Due to the way Org works, TODO items, time-stamped items, and tagged
headlines can be scattered throughout a file or even a number of
files. To get an overview of open action items, or of events that are
important for a particular date, this information must be collected,
sorted and displayed in an organized way.

Org can select items based on various criteria and display them
in a separate buffer.  Seven different view types are provided:

- an /agenda/ that is like a calendar and shows information for
  specific dates,

- a /TODO list/ that covers all unfinished action items,

- a /match view/, showings headlines based on the tags, properties,
  and TODO state associated with them,

- a /timeline view/ that shows all events in a single Org file, in
  time-sorted view,

- a /text search view/ that shows all entries from multiple files that
  contain specified keywords,

- a /stuck projects view/ showing projects that currently don't move
  along, and

- /custom views/ that are special searches and combinations of
  different views.


@@info:@noindent@@ The extracted information is displayed in a special
/agenda buffer/. This buffer is read-only, but provides commands to
visit the corresponding locations in the original Org files, and even
to edit these files remotely.

@@info:@vindex org-agenda-window-setup@@
@@info:@vindex org-agenda-restore-windows-after-quit@@

Two variables control how the agenda buffer is displayed and whether
the window configuration is restored when the agenda exits:
~org-agenda-window-setup~ and ~org-agenda-restore-windows-after-quit~.
** Agenda files
   :PROPERTIES:
   :DESCRIPTION: Files being searched for agenda information
   :END:
@@info:@cindex agenda files@@
@@info:@cindex files for agenda@@
@@info:@vindex org-agenda-files@@

The information to be shown is normally collected from all /agenda
files/, the files listed in the variable ~org-agenda-files~.[fn:94] If
a directory is part of this list, all files with the extension
@@info:@file{@@.org@@info:}@@ in this directory will be part of the list.

Thus, even if you only work with a single Org file, that file should
be put into the list.[fn:95]  You can customize ~org-agenda-files~, but
the easiest way to maintain it is through the following commands

@@info:@cindex files, adding to agenda list@@
#+attr_texinfo: :table-type "table" :indic "@asis"
- @@info:@kbd{@@C-c [@@info:}@@ ~org-agenda-file-to-front~ ::
  @@info:@kindex C-c [@@

  Add current file to the list of agenda files. The file is added to the
  front of the list. If it was already in the list, it is moved to the
  front. With a prefix argument, file is added/moved to the end.

- @@info:@kbd{@@C-c ]@@info:}@@ ~org-remove-file~ ::
  @@info:@kindex C-c ]@@

  Remove current file from the list of agenda files.

- @@info:@kbd{@@C-'@@info:}@@ @@info:@kbd{@@C-@@info:}@@ ~org-cycle-agenda-files~ ::
  @@info:@kindex C-'@@
  @@info:@kindex C-@@
  @@info:@cindex cycling, of agenda files@@

  Cycle through agenda file list, visiting one file after the other.

- @@info:@kbd{@@M-x org-iswitchb@@info:}@@ ::
  @@info:@findex org-iswitchb@@

  Command to use an ~iswitchb~-like interface to switch to and between
  Org buffers.


@@info:@noindent@@ The Org menu contains the current list of files and can
be used to visit any of them.

If you would like to focus the agenda temporarily on a file not in
this list, or on just one file in the list, or even on only a subtree
in a file, then this can be done in different ways. For a single
agenda command, you may press @@info:@kbd{@@<@@info:}@@ once or several times in
the dispatcher (see [[Agenda dispatcher]]). To restrict the agenda scope
for an extended period, use the following commands:

#+attr_texinfo: :table-type "table" :indic "@asis"
- @@info:@kbd{@@C-c C-x <@@info:}@@ ~org-agenda-set-restriction-lock~ ::
  @@info:@kindex C-c C-x <@@

  Permanently restrict the agenda to the current subtree. When with a
  prefix argument, or with the cursor before the first headline in a
  file, the agenda scope is set to the entire file. This restriction
  remains in effect until removed with @@info:@kbd{@@C-c C-x >@@info:}@@, or by
  typing either @@info:@kbd{@@<@@info:}@@ or @@info:@kbd{@@>@@info:}@@ in the agenda dispatcher.
  If there is a window displaying an agenda view, the new restriction
  takes effect immediately.

- @@info:@kbd{@@C-c C-x >@@info:}@@ ~org-agenda-remove-restriction-lock~ ::
  @@info:@kindex C-c C-x >@@

  Remove the permanent restriction created by @@info:@kbd{@@C-c C-x <@@info:}@@.


@@info:@noindent@@ When working with @@info:@file{@@speedbar.el@@info:}@@, you can use
the following commands in the Speedbar frame:

#+attr_texinfo: :table-type "table" :indic "@asis"
- @@info:@kbd{@@<@@info:}@@ in the speedbar frame ~org-speedbar-set-agenda-restriction~ ::
  @@info:@kindex <@@

  Permanently restrict the agenda to the item---either an Org file or a
  subtree in such a file---at the cursor in the Speedbar frame. If there
  is a window displaying an agenda view, the new restriction takes
  effect immediately.

- @@info:@kbd{@@>@@info:}@@ in the speedbar frame ~org-agenda-remove-restriction-lock~ ::
  @@info:@kindex >@@

  Lift the restriction.



** Agenda dispatcher
   :PROPERTIES:
   :DESCRIPTION: Keyboard access to agenda views
   :TITLE:    The agenda dispatcher
   :END:
@@info:@cindex agenda dispatcher@@
@@info:@cindex dispatching agenda commands@@

The views are created through a dispatcher, which should be bound to a
global key---for example @@info:@kbd{@@C-c a@@info:}@@ (see [[Activation]]). In the
following we will assume that @@info:@kbd{@@C-c a@@info:}@@ is indeed how the
dispatcher is accessed and list keyboard access to commands
accordingly. After pressing @@info:@kbd{@@C-c a@@info:}@@, an additional letter is
required to execute a command. The dispatcher offers the following
default commands:

#+attr_texinfo: :table-type "table" :indic "@asis"
- @@info:@kbd{@@a@@info:}@@ ::
  @@info:@kindex C-c a a@@

  Create the calendar-like agenda (see [[Weekly/daily agenda]]).

- @@info:@kbd{@@t@@info:}@@ or @@info:@kbd{@@T@@info:}@@ ::
  @@info:@kindex C-c a t@@
  @@info:@kindex C-c a T@@

  Create a list of all TODO items (see [[Global TODO list]]).

- @@info:@kbd{@@m@@info:}@@ or @@info:@kbd{@@M@@info:}@@ ::
  @@info:@kindex C-c a m@@
  @@info:@kindex C-c a M@@

  Create a list of headlines matching a TAGS expression (see [[Matching tags and properties]]).

- @@info:@kbd{@@L@@info:}@@ ::
  @@info:@kindex C-c a L@@

  Create the timeline view for the current buffer (see [[Timeline]]).

- @@info:@kbd{@@s@@info:}@@ ::
  @@info:@kindex C-c a s@@

  Create a list of entries selected by a boolean expression of keywords
  and/or regular expressions that must or must not occur in the entry.

- @@info:@kbd{@@/@@info:}@@ ::
  @@info:@kindex C-c a /@@
  @@info:@vindex org-agenda-text-search-extra-files@@

  Search for a regular expression in all agenda files and additionally
  in the files listed in ~org-agenda-text-search-extra-files~. This uses
  the Emacs command ~multi-occur~. A prefix argument can be used to
  specify the number of context lines for each match, default is
  1.

- @@info:@kbd{@@#@@info:}@@ or @@info:@kbd{@@!@@info:}@@ ::
  @@info:@kindex C-c a #@@
  @@info:@kindex C-c a !@@
  Create a list of stuck projects (see [[Stuck projects]]).

- @@info:@kbd{@@<@@info:}@@ ::
  @@info:@kindex C-c a <@@

  Restrict an agenda command to the current buffer.[fn:96] After
  pressing @@info:@kbd{@@<@@info:}@@, you still need to press the character selecting
  the command.

- @@info:@kbd{@@< <@@info:}@@ ::
  @@info:@kindex C-c a < <@@

  If there is an active region, restrict the following agenda command to
  the region. Otherwise, restrict it to the current subtree.[fn:97]
  After pressing @@info:@kbd{@@< <@@info:}@@, you still need to press the character
  selecting the command.

- @@info:@kbd{@@*@@info:}@@ ::
  @@info:@kindex C-c a *@@
  @@info:@vindex org-agenda-sticky@@

  Toggle sticky agenda views. By default, Org maintains only a single
  agenda buffer and rebuilds it each time you change the view, to make
  sure everything is always up to date. If you switch between views
  often and the build time bothers you, you can turn on sticky agenda
  buffers (make this the default by customizing the variable
  ~org-agenda-sticky~). With sticky agendas, the dispatcher only
  switches to the selected view, you need to update it by hand with
  @@info:@kbd{@@r@@info:}@@ or @@info:@kbd{@@g@@info:}@@. You can toggle sticky agenda view any
  time with ~org-toggle-sticky-agenda~.


You can also define custom commands that will be accessible through
the dispatcher, just like the default commands. This includes the
possibility to create extended agenda buffers that contain several
blocks together, for example the weekly agenda, the global TODO list
and a number of special tags matches. See [[Custom agenda views]].


** Built-in agenda views
   :PROPERTIES:
   :DESCRIPTION: What is available out of the box?
   :TITLE: The built-in agenda views
   :END:
In this section we describe the built-in views.


** Presentation and sorting
   :PROPERTIES:
   :DESCRIPTION: How agenda items are prepared for display
   :END:
@@info:@cindex presentation, of agenda items@@
@@info:@vindex org-agenda-prefix-format@@
@@info:@vindex org-agenda-tags-column@@

Before displaying items in an agenda view, Org mode visually prepares
the items and sorts them. Each item occupies a single line. The line
starts with a /prefix/ that contains the /category/ (see [[Categories]])
of the item and other important information. You can customize in
which column tags will be displayed through ~org-agenda-tags-column~.
You can also customize the prefix using the option
~org-agenda-prefix-format~. This prefix is followed by a cleaned-up
version of the outline headline associated with the item.

*** Categories
    :PROPERTIES:
    :DESCRIPTION: Not all tasks are equal
    :END:

@@info:@cindex category@@
@@info:@cindex #+CATEGORY@@

The category is a broad label assigned to each agenda item. By
default, the category is simply derived from the file name, but you
can also specify it with a special line in the buffer, like
this:[fn:100]

#+begin_example
,#+CATEGORY: Thesis
#+end_example

@@info:@noindent@@
@@info:@cindex property, CATEGORY@@

If you would like to have a special CATEGORY for a single entry or a
(sub)tree, give the entry a ~:CATEGORY:~ property with the special
category you want to apply as the value.

@@info:@noindent@@ The display in the agenda buffer looks best if the
category is not longer than 10 characters.

@@info:@noindent@@ You can set up icons for category by customizing the
~org-agenda-category-icon-alist~ variable.
@@info:@vindex org-agenda-category-icon-alist@@

*** Time-of-day specifications
    :PROPERTIES:
    :DESCRIPTION: How the agenda knows the time
    :END:
@@info:@cindex time-of-day specification@@

Org mode checks each agenda item for a time-of-day specification.  The
time can be part of the timestamp that triggered inclusion into the
agenda, for example as in @@info:@samp{@@<2005-05-10 Tue 19:00>@@info:}@@.  Time
ranges can be specified with two timestamps, like:

#+begin_example
{{{samp(<2005-05-10 Tue 20:30>--<2005-05-10 Tue 22:15>)}}}.
#+end_example

In the headline of the entry itself, a time(range) may also appear as
plain text (like @@info:@samp{@@12:45@@info:}@@ or a @@info:@samp{@@8:30-1pm@@info:}@@). If the
agenda integrates the Emacs diary (see [[Weekly/daily agenda]]), time
specifications in diary entries are recognized as well.

For agenda display, Org mode extracts the time and displays it in a
standard 24 hour format as part of the prefix.  The example times in
the previous paragraphs would end up in the agenda like this:

#+begin_example
    8:30-13:00 Arthur Dent lies in front of the bulldozer
   12:45...... Ford Prefect arrives and takes Arthur to the pub
   19:00...... The Vogon reads his poem
   20:30-22:15 Marvin escorts the Hitchhikers to the bridge
#+end_example

@@info:@cindex time grid@@

If the agenda is in single-day mode, or for the display of today, the
timed entries are embedded in a time grid, like

#+begin_example
    8:00...... ------------------
    8:30-13:00 Arthur Dent lies in front of the bulldozer
   10:00...... ------------------
   12:00...... ------------------
   12:45...... Ford Prefect arrives and takes Arthur to the pub
   14:00...... ------------------
   16:00...... ------------------
   18:00...... ------------------
   19:00...... The Vogon reads his poem
   20:00...... ------------------
   20:30-22:15 Marvin escorts the Hitchhikers to the bridge
#+end_example

@@info:@vindex org-agenda-use-time-grid@@
@@info:@vindex org-agenda-time-grid@@

The time grid can be turned on and off with the variable
~org-agenda-use-time-grid~, and can be configured with
~org-agenda-time-grid~.

*** Sorting of agenda items
    :PROPERTIES:
    :DESCRIPTION: The order of things
    :END:
@@info:@cindex sorting, of agenda items@@
@@info:@cindex priorities, of agenda items@@

Before being inserted into a view, the items are sorted.  How this is
done depends on the type of view.

- For the daily/weekly agenda, the items for each day are sorted.  The
  default order is to first collect all items containing an explicit
  time-of-day specification.  These entries will be shown at the
  beginning of the list, as a /schedule/ for the day.  After that,
  items remain grouped in categories, in the sequence given by
  ~org-agenda-files~. Within each category, items are sorted by
  priority (see [[Priorities]]), which is composed of the base priority
  (2000 for priority @@info:@samp{@@A@@info:}@@, 1000 for @@info:@samp{@@B@@info:}@@, and 0 for
  @@info:@samp{@@C@@info:}@@), plus additional increments for overdue scheduled or deadline items.

  @@info:@vindex org-agenda-files@@

- For the TODO list, items remain in the order of categories, but
  within each category, sorting takes place according to priority (see
  [[Priorities]]).  The priority used for sorting derives from the
  priority cookie, with additions depending on how close an item is to
  its due or scheduled date.

- For tags matches, items are not sorted at all, but just appear in
  the sequence in which they are found in the agenda files.


@@info:@vindex org-agenda-sorting-strategy@@

Sorting can be customized using the variable
~org-agenda-sorting-strategy~, and may also include criteria based on
the estimated effort of an entry (see [[Effort estimates]]).




** Agenda commands
   :PROPERTIES:
   :DESCRIPTION: Remote editing of Org trees
   :TITLE:    Commands in the agenda buffer
   :END:
@@info:@cindex commands, in agenda buffer@@

Entries in the agenda buffer are linked back to the Org file or diary
file where they originate.  You are not allowed to edit the agenda
buffer itself, but commands are provided to show and jump to the
original entry location, and to edit the Org files ``remotely'' from
the agenda buffer.  In this way, all information is stored only once,
removing the risk that your agenda and note files may diverge.

Some commands can be executed with mouse clicks on agenda lines.  For
the other commands, the cursor needs to be in the desired line.

*** FIXME Motion2
@@info:@cindex motion commands in agenda@@

#+attr_texinfo: :table-type "table" :indic "@asis"

- @@info:@kbd{@@n@@info:}@@ ~org-agenda-next-line~ ::
  @@info:@kindex n@@
 
  Next line (same as @@info:@key{@@down@@info:}@@ and @@info:@kbd{@@C-n@@info:}@@).

- @@info:@kbd{@@p@@info:}@@ ~org-agenda-previous-line~ ::
  @@info:@kindex p@@

  Previous line (same as @@info:@key{@@up@@info:}@@ and @@info:@kbd{@@C-p@@info:}@@).


*** View/Go to Org file
@@info:@cindex view file commands in agenda@@

#+attr_texinfo: :table-type "table" :indic "@asis"

- @@info:@key{@@SPC@@info:}@@ @@info:@key{@@mouse-3@@info:}@@ ~org-agenda-show-and-scroll-up~ ::
  @@info:@kindex @key{SPC}@@
  @@info:@kindex mouse-3@@

  Display the original location of the item in another window. With
  prefix arg, make sure that the entire entry is made visible in the
  outline, not only the heading.

- @@info:@kbd{@@L@@info:}@@ ~org-agenda-recenter~ ::
  @@info:@kindex L@@

  Display original location and recenter that window.

- @@info:@key{@@TAB@@info:}@@ @@info:@key{@@mouse-2@@info:}@@ ~org-agenda-goto~ ::
  @@info:@kindex @key{TAB}@@
  @@info:@kindex mouse-2@@

  Go to the original location of the item in another window.

- @@info:@key{@@RET@@info:}@@ ~org-agenda-switch-to~ ::
  @@info:@kindex @key{RET}@@

  Go to the original location of the item and delete other windows.

- @@info:@kbd{@@F@@info:}@@ ~org-agenda-follow-mode~ ::
  @@info:@kindex F@@
  @@info:@vindex org-agenda-start-with-follow-mode@@

  Toggle Follow mode. In Follow mode, as you move the cursor through the
  agenda buffer, the other window always shows the corresponding
  location in the Org file. The initial setting for this mode in new
  agenda buffers can be set with the variable
  ~org-agenda-start-with-follow-mode~.

- @@info:@kbd{@@C-c C-x b@@info:}@@ ~org-agenda-tree-to-indirect-buffer~ ::
  @@info:@kindex C-c C-x b@@

  Display the entire subtree of the current item in an indirect buffer.
  With a numeric prefix argument N, go up to level N and then take that
  tree. If N is negative, go up that many levels. With a @@info:@kbd{@@C-u@@info:}@@
  prefix, do not remove the previously used indirect buffer.

- @@info:@kbd{@@C-c C-o@@info:}@@ ~org-agenda-open-link~ ::
  @@info:@kindex C-c C-o@@

  Follow a link in the entry. This will offer a selection of any links
  in the text belonging to the referenced Org node. If there is only one
  link, it will be followed without a selection prompt.


*** Change display
@@info:@cindex change agenda display@@

#+attr_texinfo: :table-type "table" :indic "@asis"
- @@info:@kbd{@@A@@info:}@@ ::
  @@info:@kindex A@@
  @@info:@cindex display changing, in agenda@@

  Interactively select another agenda view and append it to the current
  view.

- @@info:@kbd{@@o@@info:}@@ ::
  @@info:@kindex o@@

  Delete other windows.

- @@info:@kbd{@@v d@@info:}@@ or short @@info:@kbd{@@d@@info:}@@ ~org-agenda-day-view~ ::
  @@info:@kindex v d@@
  @@info:@kindex d@@
  @@info:@vindex org-agenda-span@@

  Switch to day view. When switching to day view, this setting becomes
  the default for subsequent agenda refreshes. A numeric prefix argument
  may be used to jump directly to a specific day of the year. For
  example, @@info:@kbd{@@32 d@@info:}@@ jumps to February 1st. When setting day view,
  a year may be encoded in the prefix argument as well. For example,
  @@info:@kbd{@@200712 d@@info:}@@ will jump to January 12, 2007. If such a year
  specification has only one or two digits, it will be mapped to the
  interval 1938-2037.

- @@info:@kbd{@@v w@@info:}@@ or short @@info:@kbd{@@w@@info:}@@ ~org-agenda-week-view~ ::
  @@info:@kindex v w@@
  @@info:@kindex w@@
  @@info:@vindex org-agenda-span@@

  Switch to week view. When switching week view, this setting becomes
  the default for subsequent agenda refreshes. A numeric prefix argument
  may be used to jump directly to a specific day of the ISO week. For
  example @@info:@kbd{@@9 w@@info:}@@ to ISO week number 9. When setting week view, a
  year may be encoded in the prefix argument as well. For example,
  @@info:@kbd{@@200712 w@@info:}@@ will jump to week 12 in 2007. If such a year
  specification has only one or two digits, it will be mapped to the
  interval 1938-2037.

- @@info:@kbd{@@v m@@info:}@@ ~org-agenda-month-view~ ::
  @@info:@kindex v m@@
  @@info:@vindex org-agenda-span@@

  Switch to month view. Because month views are slow to create, they do
  not become the default for subsequent agenda refreshes. A numeric
  prefix argument may be used to jump directly to a specific day of the
  month. When setting month view, a year may be encoded in the prefix
  argument as well. For example, @@info:@kbd{@@200712 m@@info:}@@ will jump to
  December, 2007. If such a year specification has only one or two
  digits, it will be mapped to the interval 1938-2037.

- @@info:@kbd{@@v y@@info:}@@ ~org-agenda-year-view~ ::
  @@info:@kindex v y@@
  @@info:@vindex org-agenda-span@@

  Switch to year view. Because year views are slow to create, they do
  not become the default for subsequent agenda refreshes. A numeric
  prefix argument may be used to jump directly to a specific day of the
  year.

- @@info:@kbd{@@v@@info:@key{@@SPC@@info:}@@@@info:}@@ ~org-agenda-reset-view~ ::
  @@info:@kindex v @key{SPC}@@
  @@info:@vindex org-agenda-span@@

  Reset ~org-agenda-span~ to the current span.

- @@info:@kbd{@@f@@info:}@@ ~org-agenda-later~ ::
  @@info:@kindex f@@

  Go forward in time to display the following ~org-agenda-current-span~
  days. For example, if the display covers a week, switch to the
  following week. With prefix arg, go forward that many times
  ~org-agenda-current-span~ days.

- @@info:@kbd{@@b@@info:}@@ ~org-agenda-earlier~ ::
  @@info:@kindex b@@

  Go backward in time to display earlier dates.

- @@info:@kbd{@@.@@info:}@@ ~org-agenda-goto-today~ ::
  @@info:@kindex .@@

  Go to today.

- @@info:@kbd{@@j@@info:}@@ ~org-agenda-goto-date~ ::
  @@info:@kindex j@@
  
  Prompt for a date and go there.

- @@info:@kbd{@@J@@info:}@@ ~org-agenda-clock-goto~ ::
  @@info:@kindex J@@

   Go to the currently clocked-in task /in the agenda buffer/.

- @@info:@kbd{@@D@@info:}@@ ~org-agenda-toggle-diary~ ::
  @@info:@kindex D@@

   Toggle the inclusion of diary entries.  See [[Weekly/daily agenda]].

- @@info:@kbd{@@v l@@info:}@@ or @@info:@kbd{@@v L@@info:}@@ or short @@info:@kbd{@@l@@info:}@@ ~org-agenda-log-mode~ ::
  @@info:@kindex v l@@
  @@info:@kindex l@@
  @@info:@kindex v L@@
  @@info:@vindex org-log-done@@
  @@info:@vindex org-agenda-log-mode-items@@

  Toggle Logbook mode. In Logbook mode, entries that were marked DONE
  while logging was on (see the variable ~org-log-done~) are shown in
  the agenda, as are entries that have been clocked on that day. You can
  configure the entry types that should be included in log mode using
  the variable ~org-agenda-log-mode-items~. When called with a
  @@info:@kbd{@@C-u@@info:}@@ prefix, show all possible logbook entries, including
  state changes. When called with two prefix args @@info:@kbd{@@C-u C-u@@info:}@@,
  show only logging information, nothing else. @@info:@kbd{@@v L@@info:}@@ is
  equivalent to @@info:@kbd{@@C-u v l@@info:}@@.

- @@info:@kbd{@@v [@@info:}@@ or short @@info:@kbd{@@[@@info:}@@ ~org-agenda-manipulate-query-add~ ::
  @@info:@kindex v [@@
  @@info:@kindex [@@

  Include inactive timestamps into the current view. Only for
  weekly/daily agenda and timeline views.

- @@info:@kbd{@@v a@@info:}@@ ~org-agenda-archives-mode~ ::
  @@info:@kindex v a@@

  Toggle Archives mode. In Archives mode, trees that are marked
  ~ARCHIVED~ are also scanned when producing the agenda. To exit
  archives mode, press @@info:@kbd{@@v a@@info:}@@ again.

- @@info:@kbd{@@v A@@info:}@@ ~org-agenda-archives-mode 'files~ ::

  Toggle Archives mode. In Archives mode, trees that are marked
  ~ARCHIVED~ are also scanned when producing the agenda, including all
  archive files. To exit archives mode, press @@info:@kbd{@@v a@@info:}@@.

- @@info:@kbd{@@v R@@info:}@@ or short @@info:@kbd{@@R@@info:}@@ ~org-agenda-clockreport-mode~ ::
  @@info:@kindex v R@@
  @@info:@kindex R@@
  @@info:@vindex org-agenda-start-with-clockreport-mode@@
  @@info:@vindex org-clock-report-include-clocking-task@@

  Toggle Clockreport mode. In Clockreport mode, the daily/weekly agenda
  will always show a table with the clocked times for the timespan and
  file scope covered by the current agenda view. The initial setting for
  this mode in new agenda buffers can be set with the variable
  ~org-agenda-start-with-clockreport-mode~. By using a prefix argument
  when toggling this mode (i.e., @@info:@kbd{@@C-u R@@info:}@@), the clock table will
  not show contributions from entries that are hidden by agenda
  filtering.[fn:101] See also the variable
  ~org-clock-report-include-clocking-task~.

- @@info:@kbd{@@v c@@info:}@@ ::
  @@info:@kindex v c@@
  @@info:@vindex org-agenda-clock-consistency-checks@@

  Show overlapping clock entries, clocking gaps, and other clocking
  problems in the current agenda range. You can then visit clocking
  lines and fix them manually. See the variable
  ~org-agenda-clock-consistency-checks~ for information on how to
  customize the definition of what constituted a clocking problem. To
  return to normal agenda display, press @@info:@kbd{@@l@@info:}@@ to exit Logbook
  mode.

- @@info:@kbd{@@v E@@info:}@@ or short @@info:@kbd{@@E@@info:}@@ ~org-agenda-entry-text-mode~ ::
  @@info:@kindex v E@@
  @@info:@kindex E@@
  @@info:@vindex org-agenda-start-with-entry-text-mode@@
  @@info:@vindex org-agenda-entry-text-maxlines@@

  Toggle entry text mode. In entry text mode, a number of lines from the
  Org outline node referenced by an agenda line will be displayed below
  the line. The maximum number of lines is given by the variable
  ~org-agenda-entry-text-maxlines~. Calling this command with a numeric
  prefix argument will temporarily modify that number to the prefix
  value.

- @@info:@kbd{@@G@@info:}@@ ~org-agenda-toggle-time-grid~ ::
  @@info:@kindex G@@
  @@info:@vindex org-agenda-use-time-grid@@
  @@info:@vindex org-agenda-time-grid@@

  Toggle the time grid on and off. See also the variables
  ~org-agenda-use-time-grid~ and ~org-agenda-time-grid~.

- @@info:@kbd{@@r@@info:}@@ ~org-agenda-redo~ ::
  @@info:@kindex r@@

  Recreate the agenda buffer, for example to reflect the changes after
  modification of the timestamps of items with @@info:@kbd{@@S-@@info:@key{@@left@@info:}@@@@info:}@@ and
  @@info:@kbd{@@S-@@info:@key{@@right@@info:}@@@@info:}@@.  When the buffer is the global TODO list, a prefix
  argument is interpreted to create a selective list for a specific TODO
  keyword.

- @@info:@kbd{@@g@@info:}@@ ~org-agenda-redo~ ::
  @@info:@kindex g@@

  Same as @@info:@kbd{@@r@@info:}@@.

- @@info:@kbd{@@C-x C-s@@info:}@@ or short @@info:@kbd{@@s@@info:}@@ ~org-save-all-org-buffers~ ::
  @@info:@kindex C-x C-s@@
  @@info:@kindex s@@

  Save all Org buffers in the current Emacs session, and also the
  locations of IDs.

- @@info:@kbd{@@C-c C-x C-c@@info:}@@ ~org-agenda-columns~ ::
  @@info:@kindex C-c C-x C-c@@
  @@info:@vindex org-columns-default-format@@

  Invoke column view (see [[Column view]]) in the agenda buffer. The column
  view format is taken from the entry at point, or (if there is no entry
  at point), from the first entry in the agenda view. So whatever the
  format for that entry would be in the original buffer (taken from a
  property, from a ~#+COLUMNS~ line, or from the default variable
  ~org-columns-default-format~), will be used in the agenda.

- @@info:@kbd{@@C-c C-x >@@info:}@@ ~org-agenda-remove-restriction-lock~ ::
  @@info:@kindex C-c C-x >@@

  Remove the restriction lock on the agenda, if it is currently
  restricted to a file or subtree (see [[Agenda files]]).

*** Secondary filtering and query editing
@@info:@cindex filtering@@
@@info:@cindex tag filtering, in agenda@@
@@info:@cindex category filtering, in agenda@@
@@info:@cindex effort filtering, in agenda@@
@@info:@cindex query editing, in agenda@@

#+attr_texinfo: :table-type "table" :indic "@asis"
- @@info:@kbd{@@<@@info:}@@ ~org-agenda-filter-by-category~ ::
  @@info:@kindex <@@
  @@info:@vindex org-agenda-category-filter-preset@@

  Filter the current agenda view with respect to the category of the
  item at point. Pressing ~<~ another time will remove this filter. You
  can add a filter preset through the option
  ~org-agenda-category-filter-preset~ (see below).

- {{{kbd(\/)}}} ~org-agenda-filter-by-tag~ ::
  {{{kindex(/)}}}
  {{{vindex(org-agenda-tag-filter-preset)}}}

  Filter the current agenda view with respect to a tag and/or effort
  estimates. The difference between this and a custom agenda command is
  that filtering is very fast, so that you can switch quickly between
  different filters without having to recreate the
  agenda.[fn:102]

  You will be prompted for a tag selection letter; {{{key(SPC)}}} will
  mean any tag at all. Pressing {{{key(TAB)}}} at that prompt will offer
  use completion to select a tag (including any tags that do not have a
  selection character). The command then hides all entries that do not
  contain or inherit this tag. When called with prefix arg, remove the
  entries that /do/ have the tag. A second {{{kbd(/)}}} at the prompt
  will turn off the filter and unhide any hidden entries. If the first
  key you press is either {{{kbd(+)}}} or {{{kbd(-)}}}, the previous
  filter will be narrowed by requiring or forbidding the selected
  additional tag. Instead of pressing {{{kbd(+)}}} or {{{kbd(-)}}} after
  {{{kbd(/)}}}, you can also immediately use the ~\~ command.

  {{{vindex(org-sort-agenda-noeffort-is-high)}}}

  In order to filter for effort estimates, you should set up allowed
  efforts globally, for example:
  #+header: :eval no
  #+header: :exports code
  #+begin_src emacs-lisp
  (setq org-global-properties
      '(("Effort_ALL". "0 0:10 0:30 1:00 2:00 3:00 4:00")))
  #+end_src

  You can then filter for an effort by first typing an operator, one of
  {{{kbd(<)}}}, {{{kbd(>)}}}, and {{{kbd(=)}}}, and then the one-digit
  index of an effort estimate in your array of allowed values, where
  {{{kbd(0)}}} means the 10th value. The filter will then restrict to
  entries with effort smaller-or-equal, equal, or larger-or-equal than
  the selected value. If the digits 0-9 are not used as fast access keys
  to tags, you can also simply press the index digit directly without an
  operator. In this case, {{{kbd(<)}}} will be assumed. For application
  of the operator, entries without a defined effort will be treated
  according to the value of ~org-sort-agenda-noeffort-is-high~. To
  filter for tasks without effort definition, press {{{kbd(?)}}} as the
  operator.

  Org also supports automatic, context-aware tag filtering. If the
  variable ~org-agenda-auto-exclude-function~ is set to a user-defined
  function, that function can decide which tags should be excluded from
  the agenda automatically. Once this is set, the {{{kbd(/)}}} command
  then accepts {{{kbd(RET)}}} as a sub-option key and runs the auto
  exclusion logic. For example, let's say you use a ~Net~ tag to
  identify tasks which need network access, an ~Errand~ tag for errands
  in town, and a ~Call~ tag for making phone calls. You could
  auto-exclude these tags based on the availability of the Internet, and
  outside of business hours, with something like this:

  #+header: :eval no
  #+header: :exports code
  #+begin_src emacs-lisp
  (defun org-my-auto-exclude-function (tag)
    (and (cond
          ((string= tag "Net")
           (/= 0 (call-process "/sbin/ping" nil nil nil
                               "-c1" "-q" "-t1" "mail.gnu.org")))
          ((or (string= tag "Errand") (string= tag "Call"))
           (let ((hour (nth 2 (decode-time))))
             (or (< hour 8) (> hour 21)))))
         (concat "-" tag)))
  (setq org-agenda-auto-exclude-function 'org-my-auto-exclude-function)
  #+end_src

- {{{kbd(XXX)}}} ~org-agenda-filter-by-tag-refine~ ::
  {{{kindex(XXX)}}}
#+comment: Should be \
  Narrow the current agenda filter by an additional condition. When
  called with prefix arg, remove the entries that /do/ have the tag, or
  that do match the effort criterion. You can achieve the same effect by
  pressing {{{kbd(+)}}} or {{{kbd(-)}}} as the first key after the
  {{{kbd(/)}}} command.

- {{{kbd([)}}} {{{kbd(])}}} {{{kbd(@{)}}} {{{kbd(@})}}} in search view ::
  {{{kindex([)}}}
  {{{kindex(])}}}
  {{{kindex(@{)}}}
  {{{kindex(@})}}}

  Add new search words ({{{kbd([)}}} and {{{kbd(])}}}) or new regular
  expressions ({{{kbd(@{)}}} and {{{kbd(@))}}}) to the query string. The
  opening bracket/brace will add a positive search term prefixed by
  {{{samp(+)}}}, indicating that this search term /must/ occur/match in
  the entry. The closing bracket/brace will add a negative search term
  which /must not/ occur/match in the entry for it to be selected.



* Concept index                                                    :noexport:
:PROPERTIES:
:TEXINFO_MENU_TITLE: Concept Index
:END:

@printindex cp

* Key index                                                        :noexport:
  :PROPERTIES:
  :DESCRIPTION: Key bindings and where they are described
  :TEXINFO_MENU_TITLE: Key Index
  :END:

@printindex ky

* Command and function index                                       :noexport:
  :PROPERTIES:
  :DESCRIPTION: Command names and some internal functions
  :TEXINFO_MENU_TITLE: Command and Function Index
  :END:
@printindex fn

* Variable index                                                   :noexport:
  :PROPERTIES:
  :DESCRIPTION: Variables mentioned in the manual
  :TEXINFO_MENU_TITLE: Variable Index
  :END:

This is not a complete index of variables and faces, only the ones
that are mentioned in the manual. For a more complete list, use
{{{kbdkey(M-x org-customize ,RET)}}} and then click yourself through
the tree.

@printindex vr

* Copying
   :PROPERTIES:
   :copying:  t
   :END:

This manual is for Org version @@info:@value{VERSION}@@.

Copyright © 2004-2012  Free Software Foundation, Inc.

#+BEGIN_QUOTE
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover texts being ``A GNU Manual,''
and with the Back-Cover Texts as in (a) below.  A copy of the license
is included in the section entitled ``GNU Free Documentation License.''

(a) The FSF's Back-Cover Text is: ``You have the freedom to copy and
modify this GNU manual.  Buying copies from the FSF supports it in
developing GNU and promoting software freedom.''

This document is part of a collection distributed under the GNU Free
Documentation License.  If you want to distribute this document
separately from the collection, you can do so by adding a copy of the
license to the document, as described in section 6 of the license.
#+END_QUOTE

* Footnotes

[fn:1] The output from install-info (if any) is system dependent. In
particular, Debian and its derivatives use two different versions of
install-info. You may safely ignore the message:
#+begin_src example
  This is not dpkg install-info anymore, but GNU install-info
  See the man page for ginstall-info for command line arguments
#+end_src

[fn:2]  If your Emacs distribution does not come with Org,
the function ~org-version~ will not be defined.

[fn:3]  The ~master~ branch is where development takes place.

[fn:4] Export to iCalendar supports TODO and agenda items only.

[fn:5] If you don't use font-lock globally, turn it on in an Org
buffer with ~(add-hook 'org-mode-hook 'turn-on-font-lock)~.

[fn:6] Please consider subscribing to the mailing list in order to
minimize the work the mailing list moderators have to do.

[fn:7] Easy templates insert lowercase keywords and Babel dynamically
inserts ~#+results~.

[fn:8] See the variables ~org-special-ctrl-a/e~, ~org-special-ctrl-k~,
and ~org-ctrl-k-protect-subtree~ to configure special behavior of
{{{kbd(C-a)}}}, {{{kbd(C-e)}}}, and {{{kbd(C-k)}}} in headlines. Note
that clocking only works with headings indented less than 30 stars.

[fn:9]  See the option ~org-cycle-global-at-bob~.

[fn:10] The indirect buffer will contain the entire buffer, but will
be narrowed to the current tree. Editing the indirect buffer will also
change the original buffer, but without affecting visibility in that
buffer. For more information about indirect buffers,
[[info:emacs:Indirect Buffers]].


[fn:11] If you do not want the line to be split, customize the
variable ~org-M-RET-may-split-line~.

[fn:12] This does not work under XEmacs, because XEmacs uses selective
display for outlining, not text properties.

[fn:13] This depends on the option
~org-remove-highlights-with-change~.

[fn:14] See also the variables ~org-show-hierarchy-above~,
~org-show-following-heading~, ~org-show-siblings~, and
~org-show-entry-below~ for detailed control on how much context is
shown around each match.

[fn:15] When using ~*~ as a bullet, lines must be indented or they
will be seen as top-level headlines. Also, when you are hiding leading
stars to get a clean outline view, plain list items starting with a
star may be hard to distinguish from true headlines. In short: even
though ~*~ is supported, it may be better to not use it for plain list
items.

[fn:16] You can also get {{{samp(a.)}}}, {{{samp(A.)}}},
{{{samp(a))}}} and {{{samp(A))}}} by configuring
~org-alphabetical-lists~. To minimize confusion with normal text,
those are limited to one character only. Beyond that limit, bullets
will automatically fall back to numbers.

[fn:17] If there's a checkbox in the item, the cookie must be put
/before/ the checkbox. If you have activated alphabetical lists, you
can also use counters like ~[@@b]~.

[fn:18] See also ~org-empty-line-terminates-plain-lists~.

[fn:19] Org only changes the filling settings for Emacs. For XEmacs,
you should use Kyle E. Jones' {{{file(filladapt.el)}}}.

[fn:20] If you do not want the item to be split, customize the
variable ~org-M-RET-may-split-line~.

[fn:21] If you want to cycle around items that way, you may customize
~org-list-use-circular-motion~.

[fn:22] See ~org-list-use-circular-motion~ for a cyclic behavior.

[fn:23] You can filter out any of them by configuring
~org-plain-list-ordered-item-terminator~.

[fn:24] You can define additional drawers on a per-file basis with a
line like ~#+DRAWERS: HIDDEN STATE~.

[fn:25] The corresponding in-buffer options are ~fnadjust~ and
~nofnadjust~.

[fn:26] The corresponding in-buffer setting is: ~#+STARTUP: fninline~
or ~#+STARTUP: nofninline~.

[fn:27] To insert a vertical bar into a table field, use ~\\vert~ or,
inside a word ~abc\\vert@{@}def~.

[fn:28] This feature does not work on XEmacs.

[fn:29] Centering does not work inside Emacs, but it does have an
effect when exporting to HTML.

[fn:30] The computation time scales as O(N^2) because table FOO is
parsed for each field to be copied.

[fn:31] Org will understand references typed by the user as
{{{samp(B4)}}}, but it will not use this syntax when offering a
formula for editing. You can customize this behavior using the
variable ~org-table-use-standard-references~.

[fn:32] The ~printf~ reformatting is limited in precision because the
value passed to it is converted into an ~integer~ or ~double~. The
~integer~ is limited in size by truncating the signed value to 32
bits. The ~double~ is limited in precision to 64 bits overall which
leaves approximately 16 significant decimal digits.

[fn:33] Such names must start with an alphabetic character and use
only alphanumeric/underscore characters.

[fn:34] For backward compatibility you can also use special names like
~$LR5~ and ~$LR12~ to refer in a stable way to the fifth and twelfth
field in the last row of the table. However, this syntax is
deprecated, it should not be used for new documents. Use ~@>$~
instead.

[fn:35] The file {{{file(constants.el)}}} can supply the values of
constants in two different unit systems, ~SI~ and ~cgs~. Which one is
used depends on the value of the variable ~constants-unit-system~. You
can use the ~#+STARTUP~ options ~constSI~ and ~constcgs~ to set this
value for the current buffer.

[fn:36] Note that text before the first headline is usually not
exported, so the first such target should be after the first headline,
or in the line directly before the first headline.

[fn:37] To insert a link targeting a headline, in-buffer completion
can be used. Just type a star followed by a few optional letters into
the buffer and press {{{kbdkey(M-,TAB)}}}. All headlines in the
current buffer will be offered as completions.

[fn:38] The actual behavior of the search will depend on the value of
the variable ~org-link-search-must-match-exact-headline~. If its value
is ~nil~, then a fuzzy text search will be done. If it is ~t~, then
only the exact headline will be matched. If the value is
{{{samp('query-to-create)}}}, then an exact headline will be searched;
if it is not found, then the user will be queried to create it.

[fn:39] If the headline contains a timestamp, it will be removed from
the link and result in a wrong link -- you should avoid putting a
timestamp in the headline.

[fn:40] Note that you don't have to use this command to insert a link.
Links in Org are plain text, and you can type or paste them straight
into the buffer. By using this command, the links are automatically
enclosed in double brackets, and you will be asked for the optional
descriptive text.

[fn:41] After insertion of a stored link, the link will be removed
from the list of stored links. To keep it in the list later use, use a
triple {{{kbd(C-u)}}} prefix argument to {{{kbd(C-c C-l)}}}, or
configure the option ~org-keep-stored-link-after-insertion~.

[fn:42] This works by calling a special function
~org-PREFIX-complete-link~.

[fn:43] See the variable ~org-display-internal-link-with-indirect-buffer~.

[fn:44] with corresponding ~#+STARTUP~ keywords ~inlineimages~ and
~noinlineimages~.

[fn:45] Of course, you can make a document that contains only long
lists of TODO items, but this is not required.

[fn:46] This is also true for the {{{kbd(t)}}} command in the timeline
and agenda buffers.

[fn:47] All characters are allowed except ~@^!~, which have a special
meaning here.

[fn:48] Check also the variable ~org-fast-tag-selection-include-todo~,
it allows you to change the TODO state through the tags interface
([[Setting tags]]), in case you like to mingle the two concepts. Note that
this means you need to come up with unique keys across both sets of
keywords.

[fn:49] Org mode parses these lines only when Org mode is activated
after visiting a file. {{{kbd(C-c C-c)}}} with the cursor in a line
starting with {{{samp(#+)}}} is simply restarting Org mode for the
current buffer.

[fn:50] Changing the variable ~org-todo-keywords~ only becomes
effective after restarting Org mode in a buffer.

[fn:51] The corresponding in-buffer setting is: ~#+STARTUP: logdone~.

[fn:52] The corresponding in-buffer setting is: ~#+STARTUP: lognotedone~.

[fn:53] See the variable ~org-log-states-order-reversed~.

[fn:54] Note that the ~LOGBOOK~ drawer is unfolded when pressing
{{{key(SPC)}}} in the agenda to show an entry---use {{{key(C-u SPC)}}}
to keep it folded here.

[fn:55] It is possible that Org mode will record two timestamps when
you are using both ~org-log-done~ and state change logging. However,
it will never prompt for two notes---if you have configured both, the
state change recording note will take precedence and cancel the
{{{samp(Closing Note)}}}.

[fn:56] See also the option ~org-priority-start-cycle-with-default~.

[fn:57] To keep subtasks out of the global TODO list, see the
~org-agenda-todo-list-sublevels~.

[fn:58] With the exception of description lists. But you can allow it
by modifying ~org-list-automatic-rules~ accordingly.

[fn:59] Set the variable ~org-hierarchical-checkbox-statistics~ if you
want such cookies to count all checkboxes below the cookie, not just
those belonging to direct children.

[fn:60] {{{kbd(C-u C-c C-c)}}} on the /first/ item of a list with no
checkbox will add checkboxes to the rest of the list.

[fn:61] As with all these in-buffer settings, pressing 
{{{kbd(C-c C-c)}}} activates any changes in the line.

[fn:62] This is only true if the search does not involve more complex
tests including properties (see [[Property searches]]).

[fn:63] Keys will automatically be assigned to tags that have no
configured keys.

[fn:64] Contributed packages are not part of Emacs, but are
distributed with the main distribution of Org (visit
[[http://orgmode.org]]).

[fn:65] In this simplest form, the day name is optional when you type
the date yourself. However, any dates inserted or modified by Org will
add that day name, for reading convenience.

[fn:66] This is inspired by the standard ISO 8601 date/time format. To
use an alternative format, see [[Custom time format]].

[fn:67] When working with the standard diary sexp functions, you need
to be very careful with the order of the arguments. That order depends
evilly on the variable ~calendar-date-style~ (or, for older Emacs
versions, ~european-calendar-style~). For example, to specify a date
December 12, 2005, the call might look like ~(diary-date 12 1 2005)~
or ~(diary-date 1 12 2005)~ or ~(diary-date 2005 12 1)~, depending on
the settings. This has been the source of much confusion. Org mode
users can resort to special versions of these functions like
~org-date~ or ~org-anniversary~. These work just like the
corresponding ~diary-~ functions, but with stable ISO order of
arguments (year, month, day) wherever applicable, independent of the
value of ~calendar-date-style~.

[fn:68] See the variable ~org-read-date-prefer-future~. You may
set that variable to the symbol ~time~ to even make a time before now
shift the date to tomorrow.

[fn:69] If you don't need/want the calendar, configure the variable
~org-popup-calendar-for-date-prompt~.

[fn:70] If you find this distracting, turn off the display with
~org-read-date-display-live~.

[fn:71] It will still be listed on that date after it has been marked
DONE. If you don't like this, set the variable
~org-agenda-skip-scheduled-if-done~.

[fn:72] The {{{samp(SCHEDULED)}}} and {{{samp(DEADLINE)}}} dates are
inserted on the line right below the headline. Don't put any text
between this line and the headline.

[fn:73] Note the corresponding ~#+STARTUP~ keywords ~logredeadline~,
~lognoteredeadline~, and ~nologredeadline~.

[fn:74] Note the corresponding ~#+STARTUP~ keywords ~logreschedule~,
~lognotereschedule~, and ~nologreschedule~.

[fn:75] In fact, the target state is taken from, in this sequence, the
~REPEAT_TO_STATE~ property or the variable ~org-todo-repeat-to-state~.
If neither of these is specified, the target state defaults to the
first state of the TODO state sequence.

[fn:76] You can change this using the option ~org-log-repeat~, or the
~#+STARTUP~ options ~logrepeat~, ~lognoterepeat~, and ~nologrepeat~.
With ~lognoterepeat~, you will also be prompted for a note.

[fn:77] Clocking only works if all headings are indented with less
than 30 stars. This is a hardcoded limitation of ~lmax~ in
~org-clock-sum~.

[fn:78] To resume the clock under the assumption that you have worked
on this task while outside Emacs, use ~(setq org-clock-persist t)~.

[fn:79] The last reset of the task is recorded by the ~LAST_REPEAT~
property.

[fn:80] See also the variable ~org-clock-modeline-total~.

[fn:81] To add an effort estimate ``on the fly'', hook a function
doing this to ~org-clock-in-prepare-hook~.

[fn:82] The corresponding in-buffer setting is: ~#+STARTUP:
lognoteclock-out~.

[fn:83] Note that all parameters must be specified in a single
line---the line is broken here only to fit it into the manual.

[fn:84] On computers using Mac OS X, idleness is based on actual user
idleness, not just Emacs' idle time. For X11, you can install a
utility program {{{file(x11idle.c)}}}, available in the
~contrib/scripts~ directory of the Org git distribution, to get the
same general treatment of idleness. On other systems, idle time refers
to Emacs idle time only.

[fn:85] You may change the property being used with the variable
~org-effort-property~.

[fn:86] Please note the pitfalls of summing hierarchical data in a
flat list (see [[Agenda column view]]).

[fn:87] Please select your own key, {{{kbd(C-c c)}}} is only a
suggestion.

[fn:88] If you need one of these sequences literally, escape the
{{{kbd(%)}}} with a backslash.

[fn:89] If you define your own link types (see [[Adding hyperlink
types]]), any property you store with ~org-store-link-props~ can be
accessed in capture templates in a similar way.

[fn:90] This will always be the other, not the user. See the variable
~org-from-is-user-regexp~.

[fn:91] If you move entries or Org files from one directory to
another, you may want to configure ~org-attach-directory~ to contain
an absolute path.

[fn:92] Note the corresponding ~#+STARTUP~ keywords ~logrefile~,
~lognoterefile~, and ~nologrefile~.

[fn:93] For backward compatibility, the following also works: If there
are several such lines in a file, each specifies the archive location
for the text below it. The first such line also applies to any text
before its definition. However, using this method is /strongly/
deprecated as it is incompatible with the outline structure of the
document. The correct method for setting multiple archive locations in
a buffer is using properties.

[fn:94] If the value of that variable is not a list, but a single file
name, then the list of agenda files will be maintained in that
external file.

[fn:95] When using the dispatcher, pressing {{{kbd(<)}}} before
selecting a command will actually limit the command to the current
file, and ignore ~org-agenda-files~ until the next dispatcher command.

[fn:96] For backward compatibility, you can also press {{{kbd(1)}}} to
restrict to the current buffer.

[fn:97] For backward compatibility, you can also press {{{kbd(0)}}} to
restrict to the current region/subtree.

[fn:98] For backward compatibility, the universal prefix
{{{kbd(C-u)}}} causes all TODO entries to be listed before the agenda.
This feature is deprecated, use the dedicated TODO list, or a block
agenda instead (see [[Block agenda]]).

[fn:99] But see [[x-agenda-skip-entry-regexp, ,skipping
entries based on regexp]].

[fn:100] For backward compatibility, the following also works: if
there are several such lines in a file, each specifies the category
for the text below it. The first category also applies to any text
before the first CATEGORY line. However, using this method is
/strongly/ deprecated as it is incompatible with the outline structure
of the document. The correct method for setting multiple categories in
a buffer is using a property.

[fn:101] Only tags filtering will be respected here, effort filtering
is ignored.

[fn:102] Custom commands can preset a filter by binding the variable
~org-agenda-tag-filter-preset~ as an option. This filter will then be
applied to the view and persist as a basic filter through refreshes
and more secondary filtering. The filter is a global property of the
entire agenda view---in a block agenda, you should only set this in
the global options section, not in the section of an individual block.

[fn:103] The Emacs diary file is parsed for the agenda when
~org-agenda-include-diary~ is set.

[fn:104] You can provide a description for a prefix key by inserting a
cons cell with the prefix and the description.

[fn:105] You need to install Hrvoje Niksic's {{{file(htmlize.el)}}}.

[fn:106] To create PDF output, the ghostscript {{{file(ps2pdf)}}}
utility must be installed on the system. Selecting a PDF file will
also create the postscript file.

[fn:107] If you want to store standard views like the weekly agenda or
the global TODO list as well, you need to define custom commands for
them in order to be able to specify file names.

[fn:108] Quoting depends on the system you use, please check the FAQ
for examples.

[fn:109] This works automatically for the HTML backend (it requires
version 1.34 of the {{{file(htmlize.el)}}} package, which is
distributed with Org). Fontified code chunks in LaTeX can be
achieved using either the listings package or the [[http://code.google.com/p/minted][minted]] package.
Refer to ~org-export-latex-listings~ documentation for details.

[fn:110] Code in {{{samp(src)}}} blocks may also be evaluated either
interactively or on export. See see [[Working With Source Code]] for more
information on evaluating code blocks.

[fn:111] Adding ~-k~ to ~-n -r~ will /keep/ the labels in the source
code while using line numbers for the links, which might be useful to
explain those in an Org mode example code.

[fn:112] Upon exit, lines starting with {{{samp(*)}}}, {{{samp(,*)}}},
{{{samp(#+)}}} and {{{samp(,#+)}}} will get a comma prepended, to keep
them from being interpreted by Org as outline nodes or special syntax.
These commas will be stripped for editing with {{{kbd(C-c ')}}}, and
also for export.

[fn:113] You may select a different-mode with the variable
~org-edit-fixed-width-region-mode~.

[fn:114] LaTeX is a macro system based on Donald E. Knuth's @TeX{}
system. Many of the features described here as ``LaTeX'' are really
from @TeX{}, but for simplicity I am blurring this distinction.

[fn:115] You can turn this on by default by setting the variable
~org-pretty-entities~, or on a per-file base with the ~#+STARTUP~
option ~entitiespretty~.

[fn:116] Checksums are stored automatically in the file
{{{file(checksums.dat)}}}.

[fn:117] If you plan to use this regularly or on pages with
significant page views, you should install {{{file(MathJax)}}} on your
own server in order to limit the load of our server.

[fn:118] For this to work you need to be on a system with a working
LaTeX installation. You also need the {{{file(dvipng)}}} program or
the {{{file(convert)}}}, respectively available at
[[http://sourceforge.net/projects/dvipng/]] and from the
{{{file(ImageMagick)}}} suite. The LaTeX header that will be used
when processing a fragment can be configured with the variable
~org-format-latex-header~.

[fn:119] When {{{file(MathJax)}}} is used, only the environment
recognized by {{{file(MathJax)}}} will be processed. When
{{{file(dvipng)}}} is used to create images, any LaTeX environments
will be handled.

[fn:120] Org mode has a method to test if the cursor is inside such a
fragment, see the documentation of the function
~org-inside-LaTeX-fragment-p~.

[fn:121] If you want to configure many options this way, you can use
several ~#+OPTIONS~ lines.

[fn:122] To make this behavior the default, customize the variable
~org-export-run-in-background~.

[fn:123] This requires ~transient-mark-mode~ be turned on.

[fn:124] To select the current subtree, use {{{kbd(C-c @@)}}}.

[fn:125] This requires ~transient-mark-mode~ be turned on.

[fn:126] To select the current subtree, use {{{kbd(C-c @@)}}}.

[fn:127] But see the variable ~org-export-html-inline-images~.

[fn:128] Installation instructions can be found on the MathJax
website, see [[http://www.mathjax.org/resources/docs/?installation.html]].

[fn:129] If the classes on TODO keywords and tags lead to conflicts,
use the variables ~org-export-html-todo-kwd-class-prefix~ and
~org-export-html-tag-class-prefix~ to make them unique.

[fn:130] This style is defined in the constant
~org-export-html-style-default~, which you should not modify. To turn
inclusion of these defaults off, customize
~org-export-html-style-include-default~.

[fn:131] The default LaTeX output is designed for processing with
~pdftex~ or LaTeX. It includes packages that are not compatible
with ~xetex~ and possibly ~luatex~. See the variables
~org-export-latex-default-packages-alist~ and
~org-export-latex-packages-alist~.

[fn:132] This requires ~transient-mark-mode~ be turned on.

[fn:133] To select the current subtree, use {{{kbd(C-c @@)}}}.

[fn:134] Into which the values of
~org-export-latex-default-packages-alist~ and
~org-export-latex-packages-alist~ are spliced.

[fn:135] One can also take advantage of this option to pass other,
unrelated options into the figure or table environment. For an example
see the section ``Exporting org files'' in
[[http://orgmode.org/worg/org-hacks.html]].

[fn:136] This requires ~transient-mark-mode~ to be turned on.

[fn:137] To select the current subtree, use {{{kbd(C-c @@)}}}.

[fn:138] See [[http://docs.oasis-open.org/office/v1.2/OpenDocument-v1.2.html][Open Document Format for Office Applications (OpenDocument)
Version 1.2]].

[fn:139] ODT export was added in Org mode version 7.8.

[fn:140] This requires ~transient-mark-mode~ to be turned on.

[fn:141] To select the current subtree, use {{{kbd(C-c @@)}}}.

[fn:142] The column widths are interpreted as weighted ratios with the
default weight being 1.

[fn:143] Use of {{{file(ImageMagick)}}} is only desirable. However, if
you routinely produce documents that have large images or you export
your Org files that has images using a Emacs batch script, then the
use of {{{file(ImageMagick)}}} is mandatory.

[fn:144] See [[http://www.mathtoweb.com/cgi-bin/mathtoweb_home.pl][MathToWeb]].

[fn:145] Your {{{file(htmlfontify.el)}}} library must at least be at
Emacs 24.1 levels for fontification to be turned on.

[fn:146] See [[http://docs.oasis-open.org/office/v1.2/OpenDocument-v1.2.html][OpenDocument-v1.2 Specification]].

[fn:147] See the ~<table:table-template>~ element of the
OpenDocument-v1.2 specification.

[fn:148] See the attributes ~table:template-name~,
~table:use-first-row-styles~, ~table:use-last-row-styles~,
~table:use-first-column-styles~, ~table:use-last-column-styles~,
~table:use-banding-rows-styles~, and ~table:use-banding-column-styles~
of the ~<table:table>~ element in the OpenDocument-v1.2 specification.

[fn:149] Note that {{{{file(.odt)}}} files are {{{samp(zip)}}}
archives.

[fn:150] See the variables ~org-icalendar-use-deadline~ and
~org-icalendar-use-scheduled~.

[fn:151] To add inherited tags or the TODO state, configure the
variable ~org-icalendar-categories~.

[fn:152] The LOCATION property can be inherited from higher in the
hierarchy if you configure ~org-use-property-inheritance~ accordingly.

[fn:153] The files {{{{file(file-source.org)}}} and
{{{file(file-source.org.html)}}} if source and publishing directories
are equal. Note that with this kind of setup, you need to add
~:exclude "-source\\.org"~ to the project definition in
~org-publish-project-alist~ to prevent the published source files from
being considered as new org files the next time the project is
published.

[fn:154] Note that {{{samp(src)}}} blocks may be inserted using Org
mode's [[Easy Templates]] system.

[fn:155] Whenever code is evaluated there is a potential for that code
to do harm. Org mode provides safeguards to ensure that code is only
evaluated after explicit confirmation from the user. For information
on these safeguards (and on how to disable them) see [[Code evaluation
security]].

[fn:156] The ~org-babel-no-eval-on-ctrl-c-ctrl-c~ variable can be used
to remove code evaluation from the {{{kbd(C-c C-c)}}} key binding.

[fn:157] Note that evaluation of header arguments is guaranteed to
take place in the original Org mode file, while there is no such
guarantee for evaluation of the code block body.

[fn:158] The example requires that property inheritance be turned on
for the ~noweb-ref~ property, see [[Property inheritance]].

[fn:159]  In certain languages this also contains the error output
stream; this is an area for future work.

[fn:160] The last evaluation performed by the interpreter is obtained
in a language-specific manner: the value of the variable ~_~ in Python
and Ruby, and the value of ~.Last.value~ in R.

[fn:161] Emacs 23 and Org mode 6.29 are required.

[fn:162] Note that Emacs 23.1 can actually crash with
~org-indent-mode~.

[fn:163] Note that ~org-indent-mode~ also sets the ~wrap-prefix~
property, such that ~visual-line-mode~ (or purely setting ~word-wrap~)
wraps long lines (including headlines) correctly indented.

[fn:164] See the variable ~org-indent-indentation-per-level~.

[fn:165] Turning on ~org-indent-mode~ sets ~org-hide-leading-stars~ to
~t~ and ~org-adapt-indentation~ to ~nil~.

[fn:166] See also the variable ~org-adapt-indentation~.

[fn:167] When you need to specify a level for a property search or
refile targets, {{{samp(LEVEL=2)}}} will correspond to 3 stars, etc.

[fn:168] The {{{{file(org-R.el)}}} package has been replaced by the
Org mode functionality described in [[Working With Source Code]] and is
now obsolete.

[fn:169] By default this works only for LaTeX, HTML, and Texinfo.
Configure the variable ~orgtbl-radio-tables~ to install templates for
other modes.

[fn:170] If the {{{samp(#+TBLFM)}}} line contains an odd number of
dollar characters, this may cause problems with font-lock in LaTeX
mode. As shown in the example you can fix this by adding an extra line
inside the ~comment~ environment that is used to balance the dollar
expressions. If you are using AUC@TeX{} with the font-latex library, a
much better solution is to add the ~comment~ environment to the
variable ~LaTeX-verbatim-environments~.

[fn:171] The HTML translator uses the same code that produces tables
during HTML export.

[fn:172] Note that, when using ~org-odd-levels-only~, a level number
corresponds to order in the hierarchy, not to the number of stars.

[fn:173] If you cannot use Dropbox, or if your version of MobileOrg
does not support it, you can use a webdav server. For more
information, check out the documentation of MobileOrg and also this
[[http://orgmode.org/worg/org-faq.html#mobileorg_webdav][FAQ entry]].

[fn:174] While creating the agendas, Org mode will force ID properties
on all referenced entries, so that these entries can be uniquely
identified if /MobileOrg/ flags them for further action. If you do not
want to get these properties in so many entries, you can set the
variable ~org-mobile-force-id-on-agenda-items~ to ~nil~. Org mode will
then rely on outline paths, in the hope that these will be unique
enough.

[fn:175] The file {{{{file(mobileorg.org)}}} will be empty after this
operation.

[fn:176] Note, however, that there is a subtle difference. The view
created automatically by {{{kbdkey(M-x org-mobile-pull ,RET)}}} is
guaranteed to search all files that have been addressed by the last
pull. This might include a file that is not currently in your list of
agenda files. If you later use {{{kbd(C-c a ?)}}} to regenerate the
view, only the current agenda files will be searched.

* About orgmanual.org                                              :noexport:
This document intends to be Org mode source for the Org mode manual
and the Org mode guide. It is intended to be a major revision of the
manual, primarily to document the new exporter. It is designed to be
exported using the new exporter, written by Nicolas Goaziou, and the
texinfo back-end, written by Jonathan Leech-Pepin.

** Set up

Configure emacs to edit texinfo, and to add some handy conversion
functions, by executing the setup-editing source code block.


** Exporting

Export using =C-c e= if you are confident your initialization file(s)
won't pollute the process.

Alternatively, tangle =makefile= and =init.el= with =C-c C-v t= and
then from a shell run either =make= or =make info=.
* Nicolas Goaziou's instructions for v.8                           :noexport:

** Global Changes
All occurrences of "#+LABEL:" should be replaced with "#+NAME:".

*** TODO Replace #+LABEL with #+NAME

** Chapter 2, Document Structure
   :PROPERTIES:
   :CATEGORY: Ch. 2
   :END:
In "2. Document Structure", one section could be added about
cross-referencing, which would point to "Internal links". There, targets
in comments can be removed. Also most back-ends will turn links to
targets into proper cross-reference number (see `org-export-get-ordinal'
docstring for cases handled).

*** TODO Add section about cross-referencing

** Chapter 4, Hyperlinks
   :PROPERTIES:
   :CATEGORY: Ch. 4
   :END:
"Internal links". There, targets
in comments can be removed. Also most back-ends will turn links to
targets into proper cross-reference number (see `org-export-get-ordinal'
docstring for cases handled).

*** TODO Remove targets in comments

** Chapter 11, Markup for Rich Export
   :PROPERTIES:
   :CATEGORY: Ch. 11
   :END:
*** Include Keyword
The "#+INCLUDE:" keyword syntax and effect is slightly different. You
may want to look at `org-export-expand-include-keyword'.

**** TODO Revise Include keyword
** Chapter 12, Exporting
   :PROPERTIES:
   :CATEGORY: Ch. 12
   :END:
*** Export Options
In "12. Exporting", "Export options" section need an overhaul. See
`org-export-options-alist' for the default list of export options. Other
options are back-end specific and should be introduced in their own
section. Also "#+KEYWORD:" renaming into ":EXPORT_KEYWORD:" property is
systematic.

**** TODO Overhaul Export options section

**** TODO KEYWORD now EXPORT_KEYWORD

*** Macros
There should also be a section about macros (and move it out of "11
Markup for rich export"), general, hard-coded ({{{time(...)}}},
{{{property(...)}}}, {{{input-file}}} and {{{modification-time(...)}}})
and specific ({{{date}}}, {{{author}}}, {{{title}}} and {{{email}}}). It
should be specified that macros are recursive and only apply to one
line. Therefore, they are appropriate for small replacements. For more
complex ones, one may use Babel instead.

**** TODO Write macros section
Subsections: General, Hard-coded, Specific

*** Filters
There should also be a section about filters used to customize export
output and another one about `org-export-define-derived-backend' which
allow someone to tweak a back-end.

**** TODO Write filters section

*** Define derived back-end
and another one about `org-export-define-derived-backend' which
allow someone to tweak a back-end.

**** TODO Write derived back-end section

*** Export Snippets
A section can be added about export snippets, i.e.

  @@ob-latex:\something{...}@@

They are a generalization for @<html> tags.

**** TODO Write export snippets section
*** Captions
There may be a section about captions and their syntax. A note should
specify that export back-ends may or may not respect a caption. On the
other hand "11.2 Images and Tables" focuses on captions. Since these are
not specific to Images and Tables, it may be removed.

**** TODO Write captions section
*** Back-ends
I would also regroup every back-end into a sub-section to not clutter
main section.

Other options are back-end specific and should be introduced in their
own section.

Also most back-ends will turn links to
targets into proper cross-reference number (see `org-export-get-ordinal'
docstring for cases handled).


**** Old back-ends

"DocBook export" (though texinfo back-end can export to DocBook) and
"XOXO export" sections can be removed as the back-ends are discontinued.
There is no equivalent to "Taskjuggler export" yet, so it can be removed
too.

***** TODO Remove DocBook backend

***** TODO Remove XOXO backend

***** TODO Remove Taskjuggler backend

**** Back-end template
These are only suggestion. There is also probably many more things to
do. But I think that the hardest part is to start writing it. If you
come up with a good organization for e-latex back-end documentation, we
can use it for other back-ends thereafter.

***** TODO Write back-end template

****** TODO Does back-end turn links to targets?

**** LaTeX Back-end
About the latex back-end, you know certainly a lot. It should be
specified that it introduces 3 new keywords, namely "LATEX_CLASS",
"LATEX_CLASS_OPTIONS" and "LATEX_HEADER". It also introduces
"BEGIN_LATEX" and "BEGIN_TEX" blocks (the latter being just a synonym
for the former). It would be worth to add that it handles footnotes in
item tags and footnotes within footnotes. It also handles booktabs,
paralist types, automatic babel language selection with #+LANGUAGE: in
addition to already present features (minted/listings package handling).

***** TODO Write LaTeX back-end
**** Beamer Back-end
The BEAMER export back-end deserves, IMO, its own section.

***** TODO Write Beamer back-end
**** TexInfo Back-end
> BTW, it would be great to have a texinfo exporter so the Org
> documentation could be written in Org-mode :)

There is one, albeit barely tested: (require 'org-e-texinfo).

though texinfo back-end can export to DocBook

***** TODO Write texinfo backend
*** Export dispatcher
I think that the export dispatcher doesn't deserve its own section. The
introduction to Export subsystem can talk about "M-x
org-export-dispatch" (bound to C-c C-e) instead.
**** TODO Remove export dispatcher section

*** Smart quotes
There should be a section about smart-quotes too.

**** TODO Add smart quotes section

* Notes                                                            :noexport:
** TODO org-version.inc needs to change format
It is in texinfo format now, but should be in a form that can be
exported every which way.

** Entities

> With the new exporter's texinfo back-end, I think org-entities and
> org-entities-user might usefully be augmented with the entities listed
> in Chapter 14 of the texinfo manual, Special Insertions.
>
> Or, is there some other Org mechanism that might be preferable?

AFAIU, texinfo can handle UTF-8 characters with:

  @documentencoding UTF-8

(see section 18.2 from texinfo manual). So I guess it's safe to rely
on :utf-8 entities.

However, special characters like @dots{} are usually handled with
"special strings" mechanism, directly at the plain text transcoded (see
`org-e-latex-plain-text' for example).


*** TODO Add @documentencoding UTF-8 to header

*** TODO Investigate special strings mechanism
** TODO texinfo export restriction on position of Copying heading 
[2012-11-12 Mon]
[[gnus:nnfolder%2Barchive:sent-mail#m1mwympokm.fsf@tsdye.com][Email from Thomas S. Dye: Re: {O} texinfo back-end won't]]
** TODO Change description of Publishing 
[2012-11-17 Sat]
[[file:~/org/orgmanual/orgmanual.org::*Publishing][Publishing]]
** TODO Edit description for Miscellaneous 
[2012-11-17 Sat]
[[file:~/org/orgmanual/orgmanual.org::*Miscellaneous][Miscellaneous]]
Perhaps shorten to "All the rest"
** TODO Add concept index to the info version? 
[2012-11-17 Sat]
[[file:~/org/orgmanual/orgmanual.org::*Concept%20index][Concept index]]
** TODO Update 7.2 Special properties 
[2012-11-17 Sat]
[[gnus:nnfolder%2Barchive:sent-mail#m1lie0ow7k.fsf@tsdye.com][Email from Thomas S. Dye: Re: {org-e-texinfo} generate m]]

> EXPORT_TITLE property is meant to provide a title for a subtree export.

* Org-mode setup                                                   :noexport:

** Editing setup
#+name: setup-editing
#+header: :results silent
#+header: :noweb yes
#+header: :eval no-export
#+begin_src emacs-lisp
(require 'org-e-texinfo)
(define-key org-mode-map (kbd "C-c e") 'org-export-dispatch)
(setq org-pretty-entities nil)
(setq org-src-preserve-indentation t)
(setq org-confirm-babel-evaluate nil)
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (sh . t)))
(add-to-list 'org-export-snippet-translation-alist
             '("info" . "e-texinfo"))
#+end_src

** init.el file
This source code block requires paths to your Org mode installation.
Modify accordingly.

#+name: emacs-init
#+header: :tangle init.el
#+header: :results silent
#+header: :eval no-export
#+begin_src emacs-lisp
(setq load-path (cons "~/.emacs.d/src/org-mode/lisp" load-path))
(setq load-path (cons "~/.emacs.d/src/org-mode/contrib/lisp" load-path))
(require 'org-e-texinfo)
(setq org-src-preserve-indentation t)
(setq org-confirm-babel-evaluate nil)
(setq org-footnote-section "Footnotes to export")
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (makefile . t)
   (sh . t)))
(add-to-list 'org-export-snippet-translation-alist
             '("info" . "e-texinfo"))
#+end_src

** Makefile
This source code block requires information to call your emacs binary.

Be certain =org-src-preserve-indentation= is non-nil before you edit
or export this source code block.

#+name: make-manual
#+header: :tangle Makefile
#+header: :eval no-export
#+header: :results silent
#+begin_src makefile
  CC=gcc  
  EMACS=/Applications/MacPorts/Emacs.app/Contents/MacOS/Emacs
  BATCH_EMACS=$(EMACS) --batch -Q -l init.el

  manual: clean
	$(BATCH_EMACS) orgmanual.org -f org-e-texinfo-export-to-texinfo

  info: clean
	$(BATCH_EMACS) orgmanual.org -f org-e-texinfo-export-to-info

  dvi: cleandvi
	$(BATCH_EMACS) orgmanual.org -f org-e-texinfo-export-to-texinfo
	texi2dvi orgmanual.texi

  pdf: cleanpdf
	$(BATCH_EMACS) orgmanual.org -f org-e-texinfo-export-to-texinfo
	texi2dvi --pdf orgmanual.texi

  info-batch: clean
	$(BATCH_EMACS) orgmanual.org -f org-e-texinfo-export-to-texinfo
	makeinfo orgmanual.texi

  export-test: cleantest
	$(BATCH_EMACS) export-test.org -f org-e-texinfo-export-to-texinfo

  info-test: cleantest
	$(BATCH_EMACS) export-test.org -f org-e-texinfo-export-to-info

  clean realclean::
	rm -f *~ orgmanual.texi orgmanual.info

  cleantest realclean::
	rm -f export-test.texi

  cleandvi realclean::
	rm -f *.dvi *.toc *.tp *.vr *.pg *.log *.ky *.fn *.cps *.cp *.aux

  cleanpdf realclean::
	rm -f *.pdf

  realclean::
	rm -f Makefile init.el
#+end_src


*** DONE Figure out how to export with a batch call
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2012-11-10 Sat 12:46]
    :END:
The correct command is org-e-texinfo-export-to-texinfo


